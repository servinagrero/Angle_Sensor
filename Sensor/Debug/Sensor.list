
Sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000369c  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  080037d8  080037d8  000137d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080038a4  080038a4  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080038a4  080038a4  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080038a4  080038a4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080038a4  080038a4  000138a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080038a8  080038a8  000138a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080038ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c8  20000070  0800391c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000138  0800391c  00020138  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000888b  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001a34  00000000  00000000  00028924  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000818  00000000  00000000  0002a358  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000740  00000000  00000000  0002ab70  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001704b  00000000  00000000  0002b2b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006ec0  00000000  00000000  000422fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008e99b  00000000  00000000  000491bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d7b56  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002738  00000000  00000000  000d7bd4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000070 	.word	0x20000070
 8000158:	00000000 	.word	0x00000000
 800015c:	080037c0 	.word	0x080037c0

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000074 	.word	0x20000074
 8000178:	080037c0 	.word	0x080037c0

0800017c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800017c:	b580      	push	{r7, lr}
 800017e:	b082      	sub	sp, #8
 8000180:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000182:	2300      	movs	r3, #0
 8000184:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000186:	2003      	movs	r0, #3
 8000188:	f000 fdaa 	bl	8000ce0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800018c:	2000      	movs	r0, #0
 800018e:	f000 f80d 	bl	80001ac <HAL_InitTick>
 8000192:	4603      	mov	r3, r0
 8000194:	2b00      	cmp	r3, #0
 8000196:	d002      	beq.n	800019e <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000198:	2301      	movs	r3, #1
 800019a:	71fb      	strb	r3, [r7, #7]
 800019c:	e001      	b.n	80001a2 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800019e:	f002 f9e7 	bl	8002570 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80001a2:	79fb      	ldrb	r3, [r7, #7]
}
 80001a4:	4618      	mov	r0, r3
 80001a6:	3708      	adds	r7, #8
 80001a8:	46bd      	mov	sp, r7
 80001aa:	bd80      	pop	{r7, pc}

080001ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80001ac:	b580      	push	{r7, lr}
 80001ae:	b084      	sub	sp, #16
 80001b0:	af00      	add	r7, sp, #0
 80001b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80001b4:	2300      	movs	r3, #0
 80001b6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80001b8:	4b16      	ldr	r3, [pc, #88]	; (8000214 <HAL_InitTick+0x68>)
 80001ba:	681b      	ldr	r3, [r3, #0]
 80001bc:	2b00      	cmp	r3, #0
 80001be:	d022      	beq.n	8000206 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80001c0:	4b15      	ldr	r3, [pc, #84]	; (8000218 <HAL_InitTick+0x6c>)
 80001c2:	681a      	ldr	r2, [r3, #0]
 80001c4:	4b13      	ldr	r3, [pc, #76]	; (8000214 <HAL_InitTick+0x68>)
 80001c6:	681b      	ldr	r3, [r3, #0]
 80001c8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80001cc:	fbb1 f3f3 	udiv	r3, r1, r3
 80001d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80001d4:	4618      	mov	r0, r3
 80001d6:	f000 fdb8 	bl	8000d4a <HAL_SYSTICK_Config>
 80001da:	4603      	mov	r3, r0
 80001dc:	2b00      	cmp	r3, #0
 80001de:	d10f      	bne.n	8000200 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	2b0f      	cmp	r3, #15
 80001e4:	d809      	bhi.n	80001fa <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001e6:	2200      	movs	r2, #0
 80001e8:	6879      	ldr	r1, [r7, #4]
 80001ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80001ee:	f000 fd82 	bl	8000cf6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80001f2:	4a0a      	ldr	r2, [pc, #40]	; (800021c <HAL_InitTick+0x70>)
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	6013      	str	r3, [r2, #0]
 80001f8:	e007      	b.n	800020a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80001fa:	2301      	movs	r3, #1
 80001fc:	73fb      	strb	r3, [r7, #15]
 80001fe:	e004      	b.n	800020a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000200:	2301      	movs	r3, #1
 8000202:	73fb      	strb	r3, [r7, #15]
 8000204:	e001      	b.n	800020a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000206:	2301      	movs	r3, #1
 8000208:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800020a:	7bfb      	ldrb	r3, [r7, #15]
}
 800020c:	4618      	mov	r0, r3
 800020e:	3710      	adds	r7, #16
 8000210:	46bd      	mov	sp, r7
 8000212:	bd80      	pop	{r7, pc}
 8000214:	20000004 	.word	0x20000004
 8000218:	20000008 	.word	0x20000008
 800021c:	20000000 	.word	0x20000000

08000220 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000220:	b480      	push	{r7}
 8000222:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000224:	4b05      	ldr	r3, [pc, #20]	; (800023c <HAL_IncTick+0x1c>)
 8000226:	681a      	ldr	r2, [r3, #0]
 8000228:	4b05      	ldr	r3, [pc, #20]	; (8000240 <HAL_IncTick+0x20>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	4413      	add	r3, r2
 800022e:	4a03      	ldr	r2, [pc, #12]	; (800023c <HAL_IncTick+0x1c>)
 8000230:	6013      	str	r3, [r2, #0]
}
 8000232:	bf00      	nop
 8000234:	46bd      	mov	sp, r7
 8000236:	bc80      	pop	{r7}
 8000238:	4770      	bx	lr
 800023a:	bf00      	nop
 800023c:	2000009c 	.word	0x2000009c
 8000240:	20000004 	.word	0x20000004

08000244 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000244:	b480      	push	{r7}
 8000246:	af00      	add	r7, sp, #0
  return uwTick;
 8000248:	4b02      	ldr	r3, [pc, #8]	; (8000254 <HAL_GetTick+0x10>)
 800024a:	681b      	ldr	r3, [r3, #0]
}
 800024c:	4618      	mov	r0, r3
 800024e:	46bd      	mov	sp, r7
 8000250:	bc80      	pop	{r7}
 8000252:	4770      	bx	lr
 8000254:	2000009c 	.word	0x2000009c

08000258 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	b08e      	sub	sp, #56	; 0x38
 800025c:	af00      	add	r7, sp, #0
 800025e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000260:	2300      	movs	r3, #0
 8000262:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t tmp_cr1 = 0;
 8000266:	2300      	movs	r3, #0
 8000268:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tmp_cr2 = 0;
 800026a:	2300      	movs	r3, #0
 800026c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	2b00      	cmp	r3, #0
 8000272:	d101      	bne.n	8000278 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000274:	2301      	movs	r3, #1
 8000276:	e127      	b.n	80004c8 <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	691b      	ldr	r3, [r3, #16]
 800027c:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000282:	2b00      	cmp	r3, #0
 8000284:	d115      	bne.n	80002b2 <HAL_ADC_Init+0x5a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	2200      	movs	r2, #0
 800028a:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	2200      	movs	r2, #0
 8000290:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000294:	4b8e      	ldr	r3, [pc, #568]	; (80004d0 <HAL_ADC_Init+0x278>)
 8000296:	6a1b      	ldr	r3, [r3, #32]
 8000298:	4a8d      	ldr	r2, [pc, #564]	; (80004d0 <HAL_ADC_Init+0x278>)
 800029a:	f043 0301 	orr.w	r3, r3, #1
 800029e:	6213      	str	r3, [r2, #32]
 80002a0:	4b8b      	ldr	r3, [pc, #556]	; (80004d0 <HAL_ADC_Init+0x278>)
 80002a2:	6a1b      	ldr	r3, [r3, #32]
 80002a4:	f003 0301 	and.w	r3, r3, #1
 80002a8:	60bb      	str	r3, [r7, #8]
 80002aa:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80002ac:	6878      	ldr	r0, [r7, #4]
 80002ae:	f002 f98d 	bl	80025cc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002b6:	f003 0310 	and.w	r3, r3, #16
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 80ff 	bne.w	80004be <HAL_ADC_Init+0x266>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002c4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80002c8:	f023 0302 	bic.w	r3, r3, #2
 80002cc:	f043 0202 	orr.w	r2, r3, #2
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 80002d4:	4b7f      	ldr	r3, [pc, #508]	; (80004d4 <HAL_ADC_Init+0x27c>)
 80002d6:	685b      	ldr	r3, [r3, #4]
 80002d8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	685b      	ldr	r3, [r3, #4]
 80002e0:	497c      	ldr	r1, [pc, #496]	; (80004d4 <HAL_ADC_Init+0x27c>)
 80002e2:	4313      	orrs	r3, r2
 80002e4:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 80002ee:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80002f6:	4619      	mov	r1, r3
 80002f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80002fc:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80002fe:	6a3b      	ldr	r3, [r7, #32]
 8000300:	fa93 f3a3 	rbit	r3, r3
 8000304:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000306:	69fb      	ldr	r3, [r7, #28]
 8000308:	fab3 f383 	clz	r3, r3
 800030c:	b2db      	uxtb	r3, r3
 800030e:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 8000312:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000318:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000320:	4619      	mov	r1, r3
 8000322:	2302      	movs	r3, #2
 8000324:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000328:	fa93 f3a3 	rbit	r3, r3
 800032c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800032e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000330:	fab3 f383 	clz	r3, r3
 8000334:	b2db      	uxtb	r3, r3
 8000336:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 800033a:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 800033c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800033e:	4313      	orrs	r3, r2
 8000340:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000346:	2b10      	cmp	r3, #16
 8000348:	d007      	beq.n	800035a <HAL_ADC_Init+0x102>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
                  hadc->Init.ExternalTrigConvEdge );
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8000352:	4313      	orrs	r3, r2
 8000354:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000356:	4313      	orrs	r3, r2
 8000358:	62fb      	str	r3, [r7, #44]	; 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000364:	2b40      	cmp	r3, #64	; 0x40
 8000366:	d04f      	beq.n	8000408 <HAL_ADC_Init+0x1b0>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	699b      	ldr	r3, [r3, #24]
 800036c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800036e:	4313      	orrs	r3, r2
 8000370:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 800037a:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 800037c:	687a      	ldr	r2, [r7, #4]
 800037e:	6912      	ldr	r2, [r2, #16]
 8000380:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8000384:	d003      	beq.n	800038e <HAL_ADC_Init+0x136>
 8000386:	687a      	ldr	r2, [r7, #4]
 8000388:	6912      	ldr	r2, [r2, #16]
 800038a:	2a01      	cmp	r2, #1
 800038c:	d102      	bne.n	8000394 <HAL_ADC_Init+0x13c>
 800038e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000392:	e000      	b.n	8000396 <HAL_ADC_Init+0x13e>
 8000394:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 8000396:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8000398:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800039a:	4313      	orrs	r3, r2
 800039c:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80003a4:	2b01      	cmp	r3, #1
 80003a6:	d125      	bne.n	80003f4 <HAL_ADC_Init+0x19c>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d114      	bne.n	80003dc <HAL_ADC_Init+0x184>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003b6:	3b01      	subs	r3, #1
 80003b8:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 80003bc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80003be:	69ba      	ldr	r2, [r7, #24]
 80003c0:	fa92 f2a2 	rbit	r2, r2
 80003c4:	617a      	str	r2, [r7, #20]
  return result;
 80003c6:	697a      	ldr	r2, [r7, #20]
 80003c8:	fab2 f282 	clz	r2, r2
 80003cc:	b2d2      	uxtb	r2, r2
 80003ce:	4093      	lsls	r3, r2
 80003d0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80003d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80003d6:	4313      	orrs	r3, r2
 80003d8:	633b      	str	r3, [r7, #48]	; 0x30
 80003da:	e00b      	b.n	80003f4 <HAL_ADC_Init+0x19c>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003e0:	f043 0220 	orr.w	r2, r3, #32
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	64da      	str	r2, [r3, #76]	; 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80003ec:	f043 0201 	orr.w	r2, r3, #1
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	651a      	str	r2, [r3, #80]	; 0x50
        }
      }
      
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	685a      	ldr	r2, [r3, #4]
 80003fa:	4b37      	ldr	r3, [pc, #220]	; (80004d8 <HAL_ADC_Init+0x280>)
 80003fc:	4013      	ands	r3, r2
 80003fe:	687a      	ldr	r2, [r7, #4]
 8000400:	6812      	ldr	r2, [r2, #0]
 8000402:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000404:	430b      	orrs	r3, r1
 8000406:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	689a      	ldr	r2, [r3, #8]
 800040e:	4b33      	ldr	r3, [pc, #204]	; (80004dc <HAL_ADC_Init+0x284>)
 8000410:	4013      	ands	r3, r2
 8000412:	687a      	ldr	r2, [r7, #4]
 8000414:	6812      	ldr	r2, [r2, #0]
 8000416:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000418:	430b      	orrs	r3, r1
 800041a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	691b      	ldr	r3, [r3, #16]
 8000420:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000424:	d003      	beq.n	800042e <HAL_ADC_Init+0x1d6>
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	691b      	ldr	r3, [r3, #16]
 800042a:	2b01      	cmp	r3, #1
 800042c:	d119      	bne.n	8000462 <HAL_ADC_Init+0x20a>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000434:	f023 71f8 	bic.w	r1, r3, #32505856	; 0x1f00000
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800043c:	3b01      	subs	r3, #1
 800043e:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
 8000442:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000444:	693a      	ldr	r2, [r7, #16]
 8000446:	fa92 f2a2 	rbit	r2, r2
 800044a:	60fa      	str	r2, [r7, #12]
  return result;
 800044c:	68fa      	ldr	r2, [r7, #12]
 800044e:	fab2 f282 	clz	r2, r2
 8000452:	b2d2      	uxtb	r2, r2
 8000454:	fa03 f202 	lsl.w	r2, r3, r2
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	430a      	orrs	r2, r1
 800045e:	631a      	str	r2, [r3, #48]	; 0x30
 8000460:	e007      	b.n	8000472 <HAL_ADC_Init+0x21a>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	f022 72f8 	bic.w	r2, r2, #32505856	; 0x1f00000
 8000470:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	689a      	ldr	r2, [r3, #8]
 8000478:	4b19      	ldr	r3, [pc, #100]	; (80004e0 <HAL_ADC_Init+0x288>)
 800047a:	4013      	ands	r3, r2
 800047c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800047e:	429a      	cmp	r2, r3
 8000480:	d10b      	bne.n	800049a <HAL_ADC_Init+0x242>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	2200      	movs	r2, #0
 8000486:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800048c:	f023 0303 	bic.w	r3, r3, #3
 8000490:	f043 0201 	orr.w	r2, r3, #1
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	64da      	str	r2, [r3, #76]	; 0x4c
 8000498:	e014      	b.n	80004c4 <HAL_ADC_Init+0x26c>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800049e:	f023 0312 	bic.w	r3, r3, #18
 80004a2:	f043 0210 	orr.w	r2, r3, #16
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	64da      	str	r2, [r3, #76]	; 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80004ae:	f043 0201 	orr.w	r2, r3, #1
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	651a      	str	r2, [r3, #80]	; 0x50
      
      tmp_hal_status = HAL_ERROR;
 80004b6:	2301      	movs	r3, #1
 80004b8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80004bc:	e002      	b.n	80004c4 <HAL_ADC_Init+0x26c>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80004be:	2301      	movs	r3, #1
 80004c0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 80004c4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 80004c8:	4618      	mov	r0, r3
 80004ca:	3738      	adds	r7, #56	; 0x38
 80004cc:	46bd      	mov	sp, r7
 80004ce:	bd80      	pop	{r7, pc}
 80004d0:	40023800 	.word	0x40023800
 80004d4:	40012700 	.word	0x40012700
 80004d8:	fcfc16ff 	.word	0xfcfc16ff
 80004dc:	c0fff189 	.word	0xc0fff189
 80004e0:	bf80fffe 	.word	0xbf80fffe

080004e4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80004e4:	b480      	push	{r7}
 80004e6:	b085      	sub	sp, #20
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
 80004ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80004ee:	2300      	movs	r3, #0
 80004f0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 80004f2:	2300      	movs	r3, #0
 80004f4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80004fc:	2b01      	cmp	r3, #1
 80004fe:	d101      	bne.n	8000504 <HAL_ADC_ConfigChannel+0x20>
 8000500:	2302      	movs	r3, #2
 8000502:	e14f      	b.n	80007a4 <HAL_ADC_ConfigChannel+0x2c0>
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	2201      	movs	r2, #1
 8000508:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800050c:	683b      	ldr	r3, [r7, #0]
 800050e:	685b      	ldr	r3, [r3, #4]
 8000510:	2b06      	cmp	r3, #6
 8000512:	d81c      	bhi.n	800054e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800051a:	683b      	ldr	r3, [r7, #0]
 800051c:	685a      	ldr	r2, [r3, #4]
 800051e:	4613      	mov	r3, r2
 8000520:	009b      	lsls	r3, r3, #2
 8000522:	4413      	add	r3, r2
 8000524:	3b05      	subs	r3, #5
 8000526:	221f      	movs	r2, #31
 8000528:	fa02 f303 	lsl.w	r3, r2, r3
 800052c:	43db      	mvns	r3, r3
 800052e:	4019      	ands	r1, r3
 8000530:	683b      	ldr	r3, [r7, #0]
 8000532:	6818      	ldr	r0, [r3, #0]
 8000534:	683b      	ldr	r3, [r7, #0]
 8000536:	685a      	ldr	r2, [r3, #4]
 8000538:	4613      	mov	r3, r2
 800053a:	009b      	lsls	r3, r3, #2
 800053c:	4413      	add	r3, r2
 800053e:	3b05      	subs	r3, #5
 8000540:	fa00 f203 	lsl.w	r2, r0, r3
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	430a      	orrs	r2, r1
 800054a:	641a      	str	r2, [r3, #64]	; 0x40
 800054c:	e07e      	b.n	800064c <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800054e:	683b      	ldr	r3, [r7, #0]
 8000550:	685b      	ldr	r3, [r3, #4]
 8000552:	2b0c      	cmp	r3, #12
 8000554:	d81c      	bhi.n	8000590 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800055c:	683b      	ldr	r3, [r7, #0]
 800055e:	685a      	ldr	r2, [r3, #4]
 8000560:	4613      	mov	r3, r2
 8000562:	009b      	lsls	r3, r3, #2
 8000564:	4413      	add	r3, r2
 8000566:	3b23      	subs	r3, #35	; 0x23
 8000568:	221f      	movs	r2, #31
 800056a:	fa02 f303 	lsl.w	r3, r2, r3
 800056e:	43db      	mvns	r3, r3
 8000570:	4019      	ands	r1, r3
 8000572:	683b      	ldr	r3, [r7, #0]
 8000574:	6818      	ldr	r0, [r3, #0]
 8000576:	683b      	ldr	r3, [r7, #0]
 8000578:	685a      	ldr	r2, [r3, #4]
 800057a:	4613      	mov	r3, r2
 800057c:	009b      	lsls	r3, r3, #2
 800057e:	4413      	add	r3, r2
 8000580:	3b23      	subs	r3, #35	; 0x23
 8000582:	fa00 f203 	lsl.w	r2, r0, r3
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	430a      	orrs	r2, r1
 800058c:	63da      	str	r2, [r3, #60]	; 0x3c
 800058e:	e05d      	b.n	800064c <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 8000590:	683b      	ldr	r3, [r7, #0]
 8000592:	685b      	ldr	r3, [r3, #4]
 8000594:	2b12      	cmp	r3, #18
 8000596:	d81c      	bhi.n	80005d2 <HAL_ADC_ConfigChannel+0xee>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800059e:	683b      	ldr	r3, [r7, #0]
 80005a0:	685a      	ldr	r2, [r3, #4]
 80005a2:	4613      	mov	r3, r2
 80005a4:	009b      	lsls	r3, r3, #2
 80005a6:	4413      	add	r3, r2
 80005a8:	3b41      	subs	r3, #65	; 0x41
 80005aa:	221f      	movs	r2, #31
 80005ac:	fa02 f303 	lsl.w	r3, r2, r3
 80005b0:	43db      	mvns	r3, r3
 80005b2:	4019      	ands	r1, r3
 80005b4:	683b      	ldr	r3, [r7, #0]
 80005b6:	6818      	ldr	r0, [r3, #0]
 80005b8:	683b      	ldr	r3, [r7, #0]
 80005ba:	685a      	ldr	r2, [r3, #4]
 80005bc:	4613      	mov	r3, r2
 80005be:	009b      	lsls	r3, r3, #2
 80005c0:	4413      	add	r3, r2
 80005c2:	3b41      	subs	r3, #65	; 0x41
 80005c4:	fa00 f203 	lsl.w	r2, r0, r3
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	430a      	orrs	r2, r1
 80005ce:	639a      	str	r2, [r3, #56]	; 0x38
 80005d0:	e03c      	b.n	800064c <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 80005d2:	683b      	ldr	r3, [r7, #0]
 80005d4:	685b      	ldr	r3, [r3, #4]
 80005d6:	2b18      	cmp	r3, #24
 80005d8:	d81c      	bhi.n	8000614 <HAL_ADC_ConfigChannel+0x130>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80005e0:	683b      	ldr	r3, [r7, #0]
 80005e2:	685a      	ldr	r2, [r3, #4]
 80005e4:	4613      	mov	r3, r2
 80005e6:	009b      	lsls	r3, r3, #2
 80005e8:	4413      	add	r3, r2
 80005ea:	3b5f      	subs	r3, #95	; 0x5f
 80005ec:	221f      	movs	r2, #31
 80005ee:	fa02 f303 	lsl.w	r3, r2, r3
 80005f2:	43db      	mvns	r3, r3
 80005f4:	4019      	ands	r1, r3
 80005f6:	683b      	ldr	r3, [r7, #0]
 80005f8:	6818      	ldr	r0, [r3, #0]
 80005fa:	683b      	ldr	r3, [r7, #0]
 80005fc:	685a      	ldr	r2, [r3, #4]
 80005fe:	4613      	mov	r3, r2
 8000600:	009b      	lsls	r3, r3, #2
 8000602:	4413      	add	r3, r2
 8000604:	3b5f      	subs	r3, #95	; 0x5f
 8000606:	fa00 f203 	lsl.w	r2, r0, r3
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	430a      	orrs	r2, r1
 8000610:	635a      	str	r2, [r3, #52]	; 0x34
 8000612:	e01b      	b.n	800064c <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800061a:	683b      	ldr	r3, [r7, #0]
 800061c:	685a      	ldr	r2, [r3, #4]
 800061e:	4613      	mov	r3, r2
 8000620:	009b      	lsls	r3, r3, #2
 8000622:	4413      	add	r3, r2
 8000624:	3b7d      	subs	r3, #125	; 0x7d
 8000626:	221f      	movs	r2, #31
 8000628:	fa02 f303 	lsl.w	r3, r2, r3
 800062c:	43db      	mvns	r3, r3
 800062e:	4019      	ands	r1, r3
 8000630:	683b      	ldr	r3, [r7, #0]
 8000632:	6818      	ldr	r0, [r3, #0]
 8000634:	683b      	ldr	r3, [r7, #0]
 8000636:	685a      	ldr	r2, [r3, #4]
 8000638:	4613      	mov	r3, r2
 800063a:	009b      	lsls	r3, r3, #2
 800063c:	4413      	add	r3, r2
 800063e:	3b7d      	subs	r3, #125	; 0x7d
 8000640:	fa00 f203 	lsl.w	r2, r0, r3
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	430a      	orrs	r2, r1
 800064a:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 800064c:	683b      	ldr	r3, [r7, #0]
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	2b09      	cmp	r3, #9
 8000652:	d81a      	bhi.n	800068a <HAL_ADC_ConfigChannel+0x1a6>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	6959      	ldr	r1, [r3, #20]
 800065a:	683b      	ldr	r3, [r7, #0]
 800065c:	681a      	ldr	r2, [r3, #0]
 800065e:	4613      	mov	r3, r2
 8000660:	005b      	lsls	r3, r3, #1
 8000662:	4413      	add	r3, r2
 8000664:	2207      	movs	r2, #7
 8000666:	fa02 f303 	lsl.w	r3, r2, r3
 800066a:	43db      	mvns	r3, r3
 800066c:	4019      	ands	r1, r3
 800066e:	683b      	ldr	r3, [r7, #0]
 8000670:	6898      	ldr	r0, [r3, #8]
 8000672:	683b      	ldr	r3, [r7, #0]
 8000674:	681a      	ldr	r2, [r3, #0]
 8000676:	4613      	mov	r3, r2
 8000678:	005b      	lsls	r3, r3, #1
 800067a:	4413      	add	r3, r2
 800067c:	fa00 f203 	lsl.w	r2, r0, r3
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	430a      	orrs	r2, r1
 8000686:	615a      	str	r2, [r3, #20]
 8000688:	e05d      	b.n	8000746 <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 800068a:	683b      	ldr	r3, [r7, #0]
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	2b13      	cmp	r3, #19
 8000690:	d81c      	bhi.n	80006cc <HAL_ADC_ConfigChannel+0x1e8>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	6919      	ldr	r1, [r3, #16]
 8000698:	683b      	ldr	r3, [r7, #0]
 800069a:	681a      	ldr	r2, [r3, #0]
 800069c:	4613      	mov	r3, r2
 800069e:	005b      	lsls	r3, r3, #1
 80006a0:	4413      	add	r3, r2
 80006a2:	3b1e      	subs	r3, #30
 80006a4:	2207      	movs	r2, #7
 80006a6:	fa02 f303 	lsl.w	r3, r2, r3
 80006aa:	43db      	mvns	r3, r3
 80006ac:	4019      	ands	r1, r3
 80006ae:	683b      	ldr	r3, [r7, #0]
 80006b0:	6898      	ldr	r0, [r3, #8]
 80006b2:	683b      	ldr	r3, [r7, #0]
 80006b4:	681a      	ldr	r2, [r3, #0]
 80006b6:	4613      	mov	r3, r2
 80006b8:	005b      	lsls	r3, r3, #1
 80006ba:	4413      	add	r3, r2
 80006bc:	3b1e      	subs	r3, #30
 80006be:	fa00 f203 	lsl.w	r2, r0, r3
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	430a      	orrs	r2, r1
 80006c8:	611a      	str	r2, [r3, #16]
 80006ca:	e03c      	b.n	8000746 <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 80006cc:	683b      	ldr	r3, [r7, #0]
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	2b1d      	cmp	r3, #29
 80006d2:	d81c      	bhi.n	800070e <HAL_ADC_ConfigChannel+0x22a>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	68d9      	ldr	r1, [r3, #12]
 80006da:	683b      	ldr	r3, [r7, #0]
 80006dc:	681a      	ldr	r2, [r3, #0]
 80006de:	4613      	mov	r3, r2
 80006e0:	005b      	lsls	r3, r3, #1
 80006e2:	4413      	add	r3, r2
 80006e4:	3b3c      	subs	r3, #60	; 0x3c
 80006e6:	2207      	movs	r2, #7
 80006e8:	fa02 f303 	lsl.w	r3, r2, r3
 80006ec:	43db      	mvns	r3, r3
 80006ee:	4019      	ands	r1, r3
 80006f0:	683b      	ldr	r3, [r7, #0]
 80006f2:	6898      	ldr	r0, [r3, #8]
 80006f4:	683b      	ldr	r3, [r7, #0]
 80006f6:	681a      	ldr	r2, [r3, #0]
 80006f8:	4613      	mov	r3, r2
 80006fa:	005b      	lsls	r3, r3, #1
 80006fc:	4413      	add	r3, r2
 80006fe:	3b3c      	subs	r3, #60	; 0x3c
 8000700:	fa00 f203 	lsl.w	r2, r0, r3
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	430a      	orrs	r2, r1
 800070a:	60da      	str	r2, [r3, #12]
 800070c:	e01b      	b.n	8000746 <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8000714:	683b      	ldr	r3, [r7, #0]
 8000716:	681a      	ldr	r2, [r3, #0]
 8000718:	4613      	mov	r3, r2
 800071a:	005b      	lsls	r3, r3, #1
 800071c:	4413      	add	r3, r2
 800071e:	3b5a      	subs	r3, #90	; 0x5a
 8000720:	2207      	movs	r2, #7
 8000722:	fa02 f303 	lsl.w	r3, r2, r3
 8000726:	43db      	mvns	r3, r3
 8000728:	4019      	ands	r1, r3
 800072a:	683b      	ldr	r3, [r7, #0]
 800072c:	6898      	ldr	r0, [r3, #8]
 800072e:	683b      	ldr	r3, [r7, #0]
 8000730:	681a      	ldr	r2, [r3, #0]
 8000732:	4613      	mov	r3, r2
 8000734:	005b      	lsls	r3, r3, #1
 8000736:	4413      	add	r3, r2
 8000738:	3b5a      	subs	r3, #90	; 0x5a
 800073a:	fa00 f203 	lsl.w	r2, r0, r3
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	430a      	orrs	r2, r1
 8000744:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000746:	683b      	ldr	r3, [r7, #0]
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	2b10      	cmp	r3, #16
 800074c:	d003      	beq.n	8000756 <HAL_ADC_ConfigChannel+0x272>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800074e:	683b      	ldr	r3, [r7, #0]
 8000750:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000752:	2b11      	cmp	r3, #17
 8000754:	d121      	bne.n	800079a <HAL_ADC_ConfigChannel+0x2b6>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 8000756:	4b16      	ldr	r3, [pc, #88]	; (80007b0 <HAL_ADC_ConfigChannel+0x2cc>)
 8000758:	685b      	ldr	r3, [r3, #4]
 800075a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800075e:	2b00      	cmp	r3, #0
 8000760:	d11b      	bne.n	800079a <HAL_ADC_ConfigChannel+0x2b6>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 8000762:	4b13      	ldr	r3, [pc, #76]	; (80007b0 <HAL_ADC_ConfigChannel+0x2cc>)
 8000764:	685b      	ldr	r3, [r3, #4]
 8000766:	4a12      	ldr	r2, [pc, #72]	; (80007b0 <HAL_ADC_ConfigChannel+0x2cc>)
 8000768:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800076c:	6053      	str	r3, [r2, #4]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800076e:	683b      	ldr	r3, [r7, #0]
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	2b10      	cmp	r3, #16
 8000774:	d111      	bne.n	800079a <HAL_ADC_ConfigChannel+0x2b6>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8000776:	4b0f      	ldr	r3, [pc, #60]	; (80007b4 <HAL_ADC_ConfigChannel+0x2d0>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	4a0f      	ldr	r2, [pc, #60]	; (80007b8 <HAL_ADC_ConfigChannel+0x2d4>)
 800077c:	fba2 2303 	umull	r2, r3, r2, r3
 8000780:	0c9a      	lsrs	r2, r3, #18
 8000782:	4613      	mov	r3, r2
 8000784:	009b      	lsls	r3, r3, #2
 8000786:	4413      	add	r3, r2
 8000788:	005b      	lsls	r3, r3, #1
 800078a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 800078c:	e002      	b.n	8000794 <HAL_ADC_ConfigChannel+0x2b0>
          {
            wait_loop_index--;
 800078e:	68bb      	ldr	r3, [r7, #8]
 8000790:	3b01      	subs	r3, #1
 8000792:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8000794:	68bb      	ldr	r3, [r7, #8]
 8000796:	2b00      	cmp	r3, #0
 8000798:	d1f9      	bne.n	800078e <HAL_ADC_ConfigChannel+0x2aa>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	2200      	movs	r2, #0
 800079e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 80007a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80007a4:	4618      	mov	r0, r3
 80007a6:	3714      	adds	r7, #20
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bc80      	pop	{r7}
 80007ac:	4770      	bx	lr
 80007ae:	bf00      	nop
 80007b0:	40012700 	.word	0x40012700
 80007b4:	20000008 	.word	0x20000008
 80007b8:	431bde83 	.word	0x431bde83

080007bc <HAL_ADCEx_InjectedConfigChannel>:
  * @param  sConfigInjected Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{   
 80007bc:	b490      	push	{r4, r7}
 80007be:	b084      	sub	sp, #16
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
 80007c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80007c6:	2300      	movs	r3, #0
 80007c8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 80007ca:	2300      	movs	r3, #0
 80007cc:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_EXTTRIGINJEC_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80007d4:	2b01      	cmp	r3, #1
 80007d6:	d101      	bne.n	80007dc <HAL_ADCEx_InjectedConfigChannel+0x20>
 80007d8:	2302      	movs	r3, #2
 80007da:	e1aa      	b.n	8000b32 <HAL_ADCEx_InjectedConfigChannel+0x376>
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	2201      	movs	r2, #1
 80007e0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  /*   Note: Scan mode is present by hardware on this device and, if          */
  /*   disabled, discards automatically nb of conversions. Anyway, nb of      */
  /*   conversions is forced to 0x00 for alignment over all STM32 devices.    */
  /* - if scan mode is enabled, injected channels sequence length is set to   */
  /*   parameter ""InjectedNbrOfConversion".                                  */
  if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	691b      	ldr	r3, [r3, #16]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d119      	bne.n	8000820 <HAL_ADCEx_InjectedConfigChannel+0x64>
  {
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 80007ec:	683b      	ldr	r3, [r7, #0]
 80007ee:	685b      	ldr	r3, [r3, #4]
 80007f0:	2b01      	cmp	r3, #1
 80007f2:	d10c      	bne.n	800080e <HAL_ADCEx_InjectedConfigChannel+0x52>
    {
      /* Clear the old SQx bits for all injected ranks */
        MODIFY_REG(hadc->Instance->JSQR                              ,
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007fa:	0d9b      	lsrs	r3, r3, #22
 80007fc:	059b      	lsls	r3, r3, #22
 80007fe:	683a      	ldr	r2, [r7, #0]
 8000800:	6812      	ldr	r2, [r2, #0]
 8000802:	03d1      	lsls	r1, r2, #15
 8000804:	687a      	ldr	r2, [r7, #4]
 8000806:	6812      	ldr	r2, [r2, #0]
 8000808:	430b      	orrs	r3, r1
 800080a:	6453      	str	r3, [r2, #68]	; 0x44
 800080c:	e04f      	b.n	80008ae <HAL_ADCEx_InjectedConfigChannel+0xf2>
    /* If another injected rank than rank1 was intended to be set, and could  */
    /* not due to ScanConvMode disabled, error is reported.                   */
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000812:	f043 0220 	orr.w	r2, r3, #32
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	64da      	str	r2, [r3, #76]	; 0x4c
        
      tmp_hal_status = HAL_ERROR;
 800081a:	2301      	movs	r3, #1
 800081c:	73fb      	strb	r3, [r7, #15]
 800081e:	e046      	b.n	80008ae <HAL_ADCEx_InjectedConfigChannel+0xf2>
  else
  {   
    /* Since injected channels rank conv. order depends on total number of   */
    /* injected conversions, selected rank must be below or equal to total   */
    /* number of injected conversions to be updated.                         */
    if (sConfigInjected->InjectedRank <= sConfigInjected->InjectedNbrOfConversion)
 8000820:	683b      	ldr	r3, [r7, #0]
 8000822:	685a      	ldr	r2, [r3, #4]
 8000824:	683b      	ldr	r3, [r7, #0]
 8000826:	691b      	ldr	r3, [r3, #16]
 8000828:	429a      	cmp	r2, r3
 800082a:	d82a      	bhi.n	8000882 <HAL_ADCEx_InjectedConfigChannel+0xc6>
    {
      /* Clear the old SQx bits for the selected rank */
      /* Set the SQx bits for the selected rank */
      MODIFY_REG(hadc->Instance->JSQR                                                     ,
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8000832:	683b      	ldr	r3, [r7, #0]
 8000834:	685a      	ldr	r2, [r3, #4]
 8000836:	683b      	ldr	r3, [r7, #0]
 8000838:	691b      	ldr	r3, [r3, #16]
 800083a:	1ad2      	subs	r2, r2, r3
 800083c:	4613      	mov	r3, r2
 800083e:	009b      	lsls	r3, r3, #2
 8000840:	4413      	add	r3, r2
 8000842:	330f      	adds	r3, #15
 8000844:	221f      	movs	r2, #31
 8000846:	fa02 f303 	lsl.w	r3, r2, r3
 800084a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800084e:	43db      	mvns	r3, r3
 8000850:	4019      	ands	r1, r3
 8000852:	683b      	ldr	r3, [r7, #0]
 8000854:	691b      	ldr	r3, [r3, #16]
 8000856:	3b01      	subs	r3, #1
 8000858:	0518      	lsls	r0, r3, #20
 800085a:	683b      	ldr	r3, [r7, #0]
 800085c:	681c      	ldr	r4, [r3, #0]
 800085e:	683b      	ldr	r3, [r7, #0]
 8000860:	685a      	ldr	r2, [r3, #4]
 8000862:	683b      	ldr	r3, [r7, #0]
 8000864:	691b      	ldr	r3, [r3, #16]
 8000866:	1ad2      	subs	r2, r2, r3
 8000868:	4613      	mov	r3, r2
 800086a:	009b      	lsls	r3, r3, #2
 800086c:	4413      	add	r3, r2
 800086e:	330f      	adds	r3, #15
 8000870:	fa04 f303 	lsl.w	r3, r4, r3
 8000874:	ea40 0203 	orr.w	r2, r0, r3
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	430a      	orrs	r2, r1
 800087e:	645a      	str	r2, [r3, #68]	; 0x44
 8000880:	e015      	b.n	80008ae <HAL_ADCEx_InjectedConfigChannel+0xf2>
                                                sConfigInjected->InjectedNbrOfConversion)  );
    }
    else
    {
      /* Clear the old SQx bits for the selected rank */
      MODIFY_REG(hadc->Instance->JSQR                                       ,
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8000888:	683b      	ldr	r3, [r7, #0]
 800088a:	685a      	ldr	r2, [r3, #4]
 800088c:	683b      	ldr	r3, [r7, #0]
 800088e:	691b      	ldr	r3, [r3, #16]
 8000890:	1ad2      	subs	r2, r2, r3
 8000892:	4613      	mov	r3, r2
 8000894:	009b      	lsls	r3, r3, #2
 8000896:	4413      	add	r3, r2
 8000898:	330f      	adds	r3, #15
 800089a:	221f      	movs	r2, #31
 800089c:	fa02 f303 	lsl.w	r3, r2, r3
 80008a0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80008a4:	43da      	mvns	r2, r3
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	400a      	ands	r2, r1
 80008ac:	645a      	str	r2, [r3, #68]	; 0x44
  /* start.                                                                   */
  /* Note: This configuration keeps the hardware feature of parameter         */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to             */
  /*       software start.                                                    */
  
  if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80008ae:	683b      	ldr	r3, [r7, #0]
 80008b0:	699b      	ldr	r3, [r3, #24]
 80008b2:	2b10      	cmp	r3, #16
 80008b4:	d00e      	beq.n	80008d4 <HAL_ADCEx_InjectedConfigChannel+0x118>
  {    
    MODIFY_REG(hadc->Instance->CR2                        ,
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	689b      	ldr	r3, [r3, #8]
 80008bc:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 80008c0:	683b      	ldr	r3, [r7, #0]
 80008c2:	699a      	ldr	r2, [r3, #24]
 80008c4:	683b      	ldr	r3, [r7, #0]
 80008c6:	69db      	ldr	r3, [r3, #28]
 80008c8:	431a      	orrs	r2, r3
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	430a      	orrs	r2, r1
 80008d0:	609a      	str	r2, [r3, #8]
 80008d2:	e007      	b.n	80008e4 <HAL_ADCEx_InjectedConfigChannel+0x128>
               sConfigInjected->ExternalTrigInjecConv    |
               sConfigInjected->ExternalTrigInjecConvEdge  );
  }
  else
  {
    MODIFY_REG(hadc->Instance->CR2,
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	689a      	ldr	r2, [r3, #8]
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 80008e2:	609a      	str	r2, [r3, #8]
  /* Configuration of injected group                                          */
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Automatic injected conversion                                         */
  /*  - Injected discontinuous mode                                           */
  if ((ADC_IS_ENABLE(hadc) == RESET))
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008ee:	2b40      	cmp	r3, #64	; 0x40
 80008f0:	d039      	beq.n	8000966 <HAL_ADCEx_InjectedConfigChannel+0x1aa>
  {
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO   |
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	685a      	ldr	r2, [r3, #4]
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	f422 52a0 	bic.w	r2, r2, #5120	; 0x1400
 8000900:	605a      	str	r2, [r3, #4]
                             ADC_CR1_JDISCEN  );
    
    /* Automatic injected conversion can be enabled if injected group         */
    /* external triggers are disabled.                                        */
    if (sConfigInjected->AutoInjectedConv == ENABLE)
 8000902:	683b      	ldr	r3, [r7, #0]
 8000904:	7d5b      	ldrb	r3, [r3, #21]
 8000906:	2b01      	cmp	r3, #1
 8000908:	d114      	bne.n	8000934 <HAL_ADCEx_InjectedConfigChannel+0x178>
    {
      if (sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 800090a:	683b      	ldr	r3, [r7, #0]
 800090c:	699b      	ldr	r3, [r3, #24]
 800090e:	2b10      	cmp	r3, #16
 8000910:	d108      	bne.n	8000924 <HAL_ADCEx_InjectedConfigChannel+0x168>
      {
        SET_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO);
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	685a      	ldr	r2, [r3, #4]
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000920:	605a      	str	r2, [r3, #4]
 8000922:	e007      	b.n	8000934 <HAL_ADCEx_InjectedConfigChannel+0x178>
      }
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000928:	f043 0220 	orr.w	r2, r3, #32
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	64da      	str	r2, [r3, #76]	; 0x4c
        
        tmp_hal_status = HAL_ERROR;
 8000930:	2301      	movs	r3, #1
 8000932:	73fb      	strb	r3, [r7, #15]
      }
    }
    
    /* Injected discontinuous can be enabled only if auto-injected mode is    */
    /* disabled.                                                              */  
    if (sConfigInjected->InjectedDiscontinuousConvMode == ENABLE)
 8000934:	683b      	ldr	r3, [r7, #0]
 8000936:	7d1b      	ldrb	r3, [r3, #20]
 8000938:	2b01      	cmp	r3, #1
 800093a:	d114      	bne.n	8000966 <HAL_ADCEx_InjectedConfigChannel+0x1aa>
    {
      if (sConfigInjected->AutoInjectedConv == DISABLE)
 800093c:	683b      	ldr	r3, [r7, #0]
 800093e:	7d5b      	ldrb	r3, [r3, #21]
 8000940:	2b00      	cmp	r3, #0
 8000942:	d108      	bne.n	8000956 <HAL_ADCEx_InjectedConfigChannel+0x19a>
      {
        SET_BIT(hadc->Instance->CR1, ADC_CR1_JDISCEN);
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	685a      	ldr	r2, [r3, #4]
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000952:	605a      	str	r2, [r3, #4]
 8000954:	e007      	b.n	8000966 <HAL_ADCEx_InjectedConfigChannel+0x1aa>
      } 
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800095a:	f043 0220 	orr.w	r2, r3, #32
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	64da      	str	r2, [r3, #76]	; 0x4c
        
        tmp_hal_status = HAL_ERROR;
 8000962:	2301      	movs	r3, #1
 8000964:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* Channel sampling time configuration */
  /* For InjectedChannels 0 to 9 */
  if (sConfigInjected->InjectedChannel < ADC_CHANNEL_10)
 8000966:	683b      	ldr	r3, [r7, #0]
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	2b09      	cmp	r3, #9
 800096c:	d81a      	bhi.n	80009a4 <HAL_ADCEx_InjectedConfigChannel+0x1e8>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	6959      	ldr	r1, [r3, #20]
 8000974:	683b      	ldr	r3, [r7, #0]
 8000976:	681a      	ldr	r2, [r3, #0]
 8000978:	4613      	mov	r3, r2
 800097a:	005b      	lsls	r3, r3, #1
 800097c:	4413      	add	r3, r2
 800097e:	2207      	movs	r2, #7
 8000980:	fa02 f303 	lsl.w	r3, r2, r3
 8000984:	43db      	mvns	r3, r3
 8000986:	4019      	ands	r1, r3
 8000988:	683b      	ldr	r3, [r7, #0]
 800098a:	6898      	ldr	r0, [r3, #8]
 800098c:	683b      	ldr	r3, [r7, #0]
 800098e:	681a      	ldr	r2, [r3, #0]
 8000990:	4613      	mov	r3, r2
 8000992:	005b      	lsls	r3, r3, #1
 8000994:	4413      	add	r3, r2
 8000996:	fa00 f203 	lsl.w	r2, r0, r3
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	430a      	orrs	r2, r1
 80009a0:	615a      	str	r2, [r3, #20]
 80009a2:	e05d      	b.n	8000a60 <HAL_ADCEx_InjectedConfigChannel+0x2a4>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfigInjected->InjectedChannel),
               ADC_SMPR3(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel) );
  }
  /* For InjectedChannels 10 to 19 */
  else if (sConfigInjected->InjectedChannel < ADC_CHANNEL_20)
 80009a4:	683b      	ldr	r3, [r7, #0]
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	2b13      	cmp	r3, #19
 80009aa:	d81c      	bhi.n	80009e6 <HAL_ADCEx_InjectedConfigChannel+0x22a>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	6919      	ldr	r1, [r3, #16]
 80009b2:	683b      	ldr	r3, [r7, #0]
 80009b4:	681a      	ldr	r2, [r3, #0]
 80009b6:	4613      	mov	r3, r2
 80009b8:	005b      	lsls	r3, r3, #1
 80009ba:	4413      	add	r3, r2
 80009bc:	3b1e      	subs	r3, #30
 80009be:	2207      	movs	r2, #7
 80009c0:	fa02 f303 	lsl.w	r3, r2, r3
 80009c4:	43db      	mvns	r3, r3
 80009c6:	4019      	ands	r1, r3
 80009c8:	683b      	ldr	r3, [r7, #0]
 80009ca:	6898      	ldr	r0, [r3, #8]
 80009cc:	683b      	ldr	r3, [r7, #0]
 80009ce:	681a      	ldr	r2, [r3, #0]
 80009d0:	4613      	mov	r3, r2
 80009d2:	005b      	lsls	r3, r3, #1
 80009d4:	4413      	add	r3, r2
 80009d6:	3b1e      	subs	r3, #30
 80009d8:	fa00 f203 	lsl.w	r2, r0, r3
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	430a      	orrs	r2, r1
 80009e2:	611a      	str	r2, [r3, #16]
 80009e4:	e03c      	b.n	8000a60 <HAL_ADCEx_InjectedConfigChannel+0x2a4>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfigInjected->InjectedChannel),
               ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel) );
  }
  /* For InjectedChannels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For InjectedChannels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfigInjected->InjectedChannel <= ADC_SMPR1_CHANNEL_MAX)
 80009e6:	683b      	ldr	r3, [r7, #0]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	2b1d      	cmp	r3, #29
 80009ec:	d81c      	bhi.n	8000a28 <HAL_ADCEx_InjectedConfigChannel+0x26c>
  {   
    MODIFY_REG(hadc->Instance->SMPR1,
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	68d9      	ldr	r1, [r3, #12]
 80009f4:	683b      	ldr	r3, [r7, #0]
 80009f6:	681a      	ldr	r2, [r3, #0]
 80009f8:	4613      	mov	r3, r2
 80009fa:	005b      	lsls	r3, r3, #1
 80009fc:	4413      	add	r3, r2
 80009fe:	3b3c      	subs	r3, #60	; 0x3c
 8000a00:	2207      	movs	r2, #7
 8000a02:	fa02 f303 	lsl.w	r3, r2, r3
 8000a06:	43db      	mvns	r3, r3
 8000a08:	4019      	ands	r1, r3
 8000a0a:	683b      	ldr	r3, [r7, #0]
 8000a0c:	6898      	ldr	r0, [r3, #8]
 8000a0e:	683b      	ldr	r3, [r7, #0]
 8000a10:	681a      	ldr	r2, [r3, #0]
 8000a12:	4613      	mov	r3, r2
 8000a14:	005b      	lsls	r3, r3, #1
 8000a16:	4413      	add	r3, r2
 8000a18:	3b3c      	subs	r3, #60	; 0x3c
 8000a1a:	fa00 f203 	lsl.w	r2, r0, r3
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	430a      	orrs	r2, r1
 8000a24:	60da      	str	r2, [r3, #12]
 8000a26:	e01b      	b.n	8000a60 <HAL_ADCEx_InjectedConfigChannel+0x2a4>
               ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel) );
  }
  /* For InjectedChannels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	681a      	ldr	r2, [r3, #0]
 8000a32:	4613      	mov	r3, r2
 8000a34:	005b      	lsls	r3, r3, #1
 8000a36:	4413      	add	r3, r2
 8000a38:	3b5a      	subs	r3, #90	; 0x5a
 8000a3a:	2207      	movs	r2, #7
 8000a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a40:	43db      	mvns	r3, r3
 8000a42:	4019      	ands	r1, r3
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	6898      	ldr	r0, [r3, #8]
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	681a      	ldr	r2, [r3, #0]
 8000a4c:	4613      	mov	r3, r2
 8000a4e:	005b      	lsls	r3, r3, #1
 8000a50:	4413      	add	r3, r2
 8000a52:	3b5a      	subs	r3, #90	; 0x5a
 8000a54:	fa00 f203 	lsl.w	r2, r0, r3
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	430a      	orrs	r2, r1
 8000a5e:	65da      	str	r2, [r3, #92]	; 0x5c
  }
  
  
  /* Configure the offset: offset enable/disable, InjectedChannel, offset value */
  switch(sConfigInjected->InjectedRank)
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	685b      	ldr	r3, [r3, #4]
 8000a64:	2b02      	cmp	r3, #2
 8000a66:	d011      	beq.n	8000a8c <HAL_ADCEx_InjectedConfigChannel+0x2d0>
 8000a68:	2b03      	cmp	r3, #3
 8000a6a:	d01d      	beq.n	8000aa8 <HAL_ADCEx_InjectedConfigChannel+0x2ec>
 8000a6c:	2b01      	cmp	r3, #1
 8000a6e:	d129      	bne.n	8000ac4 <HAL_ADCEx_InjectedConfigChannel+0x308>
  {
    case 1:
      /* Set injected channel 1 offset */
      MODIFY_REG(hadc->Instance->JOFR1,
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	699b      	ldr	r3, [r3, #24]
 8000a76:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8000a7a:	f023 030f 	bic.w	r3, r3, #15
 8000a7e:	683a      	ldr	r2, [r7, #0]
 8000a80:	68d1      	ldr	r1, [r2, #12]
 8000a82:	687a      	ldr	r2, [r7, #4]
 8000a84:	6812      	ldr	r2, [r2, #0]
 8000a86:	430b      	orrs	r3, r1
 8000a88:	6193      	str	r3, [r2, #24]
                 ADC_JOFR1_JOFFSET1,
                 sConfigInjected->InjectedOffset);
      break;
 8000a8a:	e029      	b.n	8000ae0 <HAL_ADCEx_InjectedConfigChannel+0x324>
    case 2:
      /* Set injected channel 2 offset */
      MODIFY_REG(hadc->Instance->JOFR2,
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	69db      	ldr	r3, [r3, #28]
 8000a92:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8000a96:	f023 030f 	bic.w	r3, r3, #15
 8000a9a:	683a      	ldr	r2, [r7, #0]
 8000a9c:	68d1      	ldr	r1, [r2, #12]
 8000a9e:	687a      	ldr	r2, [r7, #4]
 8000aa0:	6812      	ldr	r2, [r2, #0]
 8000aa2:	430b      	orrs	r3, r1
 8000aa4:	61d3      	str	r3, [r2, #28]
                 ADC_JOFR2_JOFFSET2,
                 sConfigInjected->InjectedOffset);
      break;
 8000aa6:	e01b      	b.n	8000ae0 <HAL_ADCEx_InjectedConfigChannel+0x324>
    case 3:
      /* Set injected channel 3 offset */
      MODIFY_REG(hadc->Instance->JOFR3,
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	6a1b      	ldr	r3, [r3, #32]
 8000aae:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8000ab2:	f023 030f 	bic.w	r3, r3, #15
 8000ab6:	683a      	ldr	r2, [r7, #0]
 8000ab8:	68d1      	ldr	r1, [r2, #12]
 8000aba:	687a      	ldr	r2, [r7, #4]
 8000abc:	6812      	ldr	r2, [r2, #0]
 8000abe:	430b      	orrs	r3, r1
 8000ac0:	6213      	str	r3, [r2, #32]
                 ADC_JOFR3_JOFFSET3,
                 sConfigInjected->InjectedOffset);
      break;
 8000ac2:	e00d      	b.n	8000ae0 <HAL_ADCEx_InjectedConfigChannel+0x324>
    case 4:
    default:
      MODIFY_REG(hadc->Instance->JOFR4,
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000aca:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8000ace:	f023 030f 	bic.w	r3, r3, #15
 8000ad2:	683a      	ldr	r2, [r7, #0]
 8000ad4:	68d1      	ldr	r1, [r2, #12]
 8000ad6:	687a      	ldr	r2, [r7, #4]
 8000ad8:	6812      	ldr	r2, [r2, #0]
 8000ada:	430b      	orrs	r3, r1
 8000adc:	6253      	str	r3, [r2, #36]	; 0x24
                 ADC_JOFR4_JOFFSET4,
                 sConfigInjected->InjectedOffset);
      break;
 8000ade:	bf00      	nop
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	2b10      	cmp	r3, #16
 8000ae6:	d003      	beq.n	8000af0 <HAL_ADCEx_InjectedConfigChannel+0x334>
      (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)      )
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	681b      	ldr	r3, [r3, #0]
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 8000aec:	2b11      	cmp	r3, #17
 8000aee:	d11b      	bne.n	8000b28 <HAL_ADCEx_InjectedConfigChannel+0x36c>
  {
    SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 8000af0:	4b12      	ldr	r3, [pc, #72]	; (8000b3c <HAL_ADCEx_InjectedConfigChannel+0x380>)
 8000af2:	685b      	ldr	r3, [r3, #4]
 8000af4:	4a11      	ldr	r2, [pc, #68]	; (8000b3c <HAL_ADCEx_InjectedConfigChannel+0x380>)
 8000af6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000afa:	6053      	str	r3, [r2, #4]
    
    if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR))
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	2b10      	cmp	r3, #16
 8000b02:	d111      	bne.n	8000b28 <HAL_ADCEx_InjectedConfigChannel+0x36c>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8000b04:	4b0e      	ldr	r3, [pc, #56]	; (8000b40 <HAL_ADCEx_InjectedConfigChannel+0x384>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a0e      	ldr	r2, [pc, #56]	; (8000b44 <HAL_ADCEx_InjectedConfigChannel+0x388>)
 8000b0a:	fba2 2303 	umull	r2, r3, r2, r3
 8000b0e:	0c9a      	lsrs	r2, r3, #18
 8000b10:	4613      	mov	r3, r2
 8000b12:	009b      	lsls	r3, r3, #2
 8000b14:	4413      	add	r3, r2
 8000b16:	005b      	lsls	r3, r3, #1
 8000b18:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0)
 8000b1a:	e002      	b.n	8000b22 <HAL_ADCEx_InjectedConfigChannel+0x366>
      {
        wait_loop_index--;
 8000b1c:	68bb      	ldr	r3, [r7, #8]
 8000b1e:	3b01      	subs	r3, #1
 8000b20:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0)
 8000b22:	68bb      	ldr	r3, [r7, #8]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d1f9      	bne.n	8000b1c <HAL_ADCEx_InjectedConfigChannel+0x360>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 8000b30:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	3710      	adds	r7, #16
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bc90      	pop	{r4, r7}
 8000b3a:	4770      	bx	lr
 8000b3c:	40012700 	.word	0x40012700
 8000b40:	20000008 	.word	0x20000008
 8000b44:	431bde83 	.word	0x431bde83

08000b48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b085      	sub	sp, #20
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	f003 0307 	and.w	r3, r3, #7
 8000b56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b58:	4b0c      	ldr	r3, [pc, #48]	; (8000b8c <__NVIC_SetPriorityGrouping+0x44>)
 8000b5a:	68db      	ldr	r3, [r3, #12]
 8000b5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b5e:	68ba      	ldr	r2, [r7, #8]
 8000b60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b64:	4013      	ands	r3, r2
 8000b66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b6c:	68bb      	ldr	r3, [r7, #8]
 8000b6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b7a:	4a04      	ldr	r2, [pc, #16]	; (8000b8c <__NVIC_SetPriorityGrouping+0x44>)
 8000b7c:	68bb      	ldr	r3, [r7, #8]
 8000b7e:	60d3      	str	r3, [r2, #12]
}
 8000b80:	bf00      	nop
 8000b82:	3714      	adds	r7, #20
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bc80      	pop	{r7}
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop
 8000b8c:	e000ed00 	.word	0xe000ed00

08000b90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b94:	4b04      	ldr	r3, [pc, #16]	; (8000ba8 <__NVIC_GetPriorityGrouping+0x18>)
 8000b96:	68db      	ldr	r3, [r3, #12]
 8000b98:	0a1b      	lsrs	r3, r3, #8
 8000b9a:	f003 0307 	and.w	r3, r3, #7
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bc80      	pop	{r7}
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	e000ed00 	.word	0xe000ed00

08000bac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b083      	sub	sp, #12
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	db0b      	blt.n	8000bd6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bbe:	79fb      	ldrb	r3, [r7, #7]
 8000bc0:	f003 021f 	and.w	r2, r3, #31
 8000bc4:	4906      	ldr	r1, [pc, #24]	; (8000be0 <__NVIC_EnableIRQ+0x34>)
 8000bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bca:	095b      	lsrs	r3, r3, #5
 8000bcc:	2001      	movs	r0, #1
 8000bce:	fa00 f202 	lsl.w	r2, r0, r2
 8000bd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000bd6:	bf00      	nop
 8000bd8:	370c      	adds	r7, #12
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bc80      	pop	{r7}
 8000bde:	4770      	bx	lr
 8000be0:	e000e100 	.word	0xe000e100

08000be4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b083      	sub	sp, #12
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	4603      	mov	r3, r0
 8000bec:	6039      	str	r1, [r7, #0]
 8000bee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	db0a      	blt.n	8000c0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	b2da      	uxtb	r2, r3
 8000bfc:	490c      	ldr	r1, [pc, #48]	; (8000c30 <__NVIC_SetPriority+0x4c>)
 8000bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c02:	0112      	lsls	r2, r2, #4
 8000c04:	b2d2      	uxtb	r2, r2
 8000c06:	440b      	add	r3, r1
 8000c08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c0c:	e00a      	b.n	8000c24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	b2da      	uxtb	r2, r3
 8000c12:	4908      	ldr	r1, [pc, #32]	; (8000c34 <__NVIC_SetPriority+0x50>)
 8000c14:	79fb      	ldrb	r3, [r7, #7]
 8000c16:	f003 030f 	and.w	r3, r3, #15
 8000c1a:	3b04      	subs	r3, #4
 8000c1c:	0112      	lsls	r2, r2, #4
 8000c1e:	b2d2      	uxtb	r2, r2
 8000c20:	440b      	add	r3, r1
 8000c22:	761a      	strb	r2, [r3, #24]
}
 8000c24:	bf00      	nop
 8000c26:	370c      	adds	r7, #12
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bc80      	pop	{r7}
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	e000e100 	.word	0xe000e100
 8000c34:	e000ed00 	.word	0xe000ed00

08000c38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b089      	sub	sp, #36	; 0x24
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	60f8      	str	r0, [r7, #12]
 8000c40:	60b9      	str	r1, [r7, #8]
 8000c42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	f003 0307 	and.w	r3, r3, #7
 8000c4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c4c:	69fb      	ldr	r3, [r7, #28]
 8000c4e:	f1c3 0307 	rsb	r3, r3, #7
 8000c52:	2b04      	cmp	r3, #4
 8000c54:	bf28      	it	cs
 8000c56:	2304      	movcs	r3, #4
 8000c58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c5a:	69fb      	ldr	r3, [r7, #28]
 8000c5c:	3304      	adds	r3, #4
 8000c5e:	2b06      	cmp	r3, #6
 8000c60:	d902      	bls.n	8000c68 <NVIC_EncodePriority+0x30>
 8000c62:	69fb      	ldr	r3, [r7, #28]
 8000c64:	3b03      	subs	r3, #3
 8000c66:	e000      	b.n	8000c6a <NVIC_EncodePriority+0x32>
 8000c68:	2300      	movs	r3, #0
 8000c6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c6c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000c70:	69bb      	ldr	r3, [r7, #24]
 8000c72:	fa02 f303 	lsl.w	r3, r2, r3
 8000c76:	43da      	mvns	r2, r3
 8000c78:	68bb      	ldr	r3, [r7, #8]
 8000c7a:	401a      	ands	r2, r3
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c80:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c84:	697b      	ldr	r3, [r7, #20]
 8000c86:	fa01 f303 	lsl.w	r3, r1, r3
 8000c8a:	43d9      	mvns	r1, r3
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c90:	4313      	orrs	r3, r2
         );
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	3724      	adds	r7, #36	; 0x24
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bc80      	pop	{r7}
 8000c9a:	4770      	bx	lr

08000c9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	3b01      	subs	r3, #1
 8000ca8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cac:	d301      	bcc.n	8000cb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cae:	2301      	movs	r3, #1
 8000cb0:	e00f      	b.n	8000cd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cb2:	4a0a      	ldr	r2, [pc, #40]	; (8000cdc <SysTick_Config+0x40>)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	3b01      	subs	r3, #1
 8000cb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cba:	210f      	movs	r1, #15
 8000cbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000cc0:	f7ff ff90 	bl	8000be4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cc4:	4b05      	ldr	r3, [pc, #20]	; (8000cdc <SysTick_Config+0x40>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cca:	4b04      	ldr	r3, [pc, #16]	; (8000cdc <SysTick_Config+0x40>)
 8000ccc:	2207      	movs	r2, #7
 8000cce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cd0:	2300      	movs	r3, #0
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	3708      	adds	r7, #8
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	e000e010 	.word	0xe000e010

08000ce0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ce8:	6878      	ldr	r0, [r7, #4]
 8000cea:	f7ff ff2d 	bl	8000b48 <__NVIC_SetPriorityGrouping>
}
 8000cee:	bf00      	nop
 8000cf0:	3708      	adds	r7, #8
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}

08000cf6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cf6:	b580      	push	{r7, lr}
 8000cf8:	b086      	sub	sp, #24
 8000cfa:	af00      	add	r7, sp, #0
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	60b9      	str	r1, [r7, #8]
 8000d00:	607a      	str	r2, [r7, #4]
 8000d02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000d04:	2300      	movs	r3, #0
 8000d06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d08:	f7ff ff42 	bl	8000b90 <__NVIC_GetPriorityGrouping>
 8000d0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d0e:	687a      	ldr	r2, [r7, #4]
 8000d10:	68b9      	ldr	r1, [r7, #8]
 8000d12:	6978      	ldr	r0, [r7, #20]
 8000d14:	f7ff ff90 	bl	8000c38 <NVIC_EncodePriority>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d1e:	4611      	mov	r1, r2
 8000d20:	4618      	mov	r0, r3
 8000d22:	f7ff ff5f 	bl	8000be4 <__NVIC_SetPriority>
}
 8000d26:	bf00      	nop
 8000d28:	3718      	adds	r7, #24
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}

08000d2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d2e:	b580      	push	{r7, lr}
 8000d30:	b082      	sub	sp, #8
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	4603      	mov	r3, r0
 8000d36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f7ff ff35 	bl	8000bac <__NVIC_EnableIRQ>
}
 8000d42:	bf00      	nop
 8000d44:	3708      	adds	r7, #8
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}

08000d4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d4a:	b580      	push	{r7, lr}
 8000d4c:	b082      	sub	sp, #8
 8000d4e:	af00      	add	r7, sp, #0
 8000d50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d52:	6878      	ldr	r0, [r7, #4]
 8000d54:	f7ff ffa2 	bl	8000c9c <SysTick_Config>
 8000d58:	4603      	mov	r3, r0
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	3708      	adds	r7, #8
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
	...

08000d64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000d64:	b480      	push	{r7}
 8000d66:	b087      	sub	sp, #28
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
 8000d6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000d72:	2300      	movs	r3, #0
 8000d74:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8000d76:	2300      	movs	r3, #0
 8000d78:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000d7a:	e160      	b.n	800103e <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	681a      	ldr	r2, [r3, #0]
 8000d80:	2101      	movs	r1, #1
 8000d82:	697b      	ldr	r3, [r7, #20]
 8000d84:	fa01 f303 	lsl.w	r3, r1, r3
 8000d88:	4013      	ands	r3, r2
 8000d8a:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	f000 8152 	beq.w	8001038 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	2b02      	cmp	r3, #2
 8000d9a:	d003      	beq.n	8000da4 <HAL_GPIO_Init+0x40>
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	2b12      	cmp	r3, #18
 8000da2:	d123      	bne.n	8000dec <HAL_GPIO_Init+0x88>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */ 
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	08da      	lsrs	r2, r3, #3
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	3208      	adds	r2, #8
 8000dac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000db0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 8000db2:	697b      	ldr	r3, [r7, #20]
 8000db4:	f003 0307 	and.w	r3, r3, #7
 8000db8:	009b      	lsls	r3, r3, #2
 8000dba:	220f      	movs	r2, #15
 8000dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc0:	43db      	mvns	r3, r3
 8000dc2:	693a      	ldr	r2, [r7, #16]
 8000dc4:	4013      	ands	r3, r2
 8000dc6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));       
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	691a      	ldr	r2, [r3, #16]
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	f003 0307 	and.w	r3, r3, #7
 8000dd2:	009b      	lsls	r3, r3, #2
 8000dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd8:	693a      	ldr	r2, [r7, #16]
 8000dda:	4313      	orrs	r3, r2
 8000ddc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8000dde:	697b      	ldr	r3, [r7, #20]
 8000de0:	08da      	lsrs	r2, r3, #3
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	3208      	adds	r2, #8
 8000de6:	6939      	ldr	r1, [r7, #16]
 8000de8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 8000df2:	697b      	ldr	r3, [r7, #20]
 8000df4:	005b      	lsls	r3, r3, #1
 8000df6:	2203      	movs	r2, #3
 8000df8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfc:	43db      	mvns	r3, r3
 8000dfe:	693a      	ldr	r2, [r7, #16]
 8000e00:	4013      	ands	r3, r2
 8000e02:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	f003 0203 	and.w	r2, r3, #3
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	005b      	lsls	r3, r3, #1
 8000e10:	fa02 f303 	lsl.w	r3, r2, r3
 8000e14:	693a      	ldr	r2, [r7, #16]
 8000e16:	4313      	orrs	r3, r2
 8000e18:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	693a      	ldr	r2, [r7, #16]
 8000e1e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	2b01      	cmp	r3, #1
 8000e26:	d00b      	beq.n	8000e40 <HAL_GPIO_Init+0xdc>
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	2b02      	cmp	r3, #2
 8000e2e:	d007      	beq.n	8000e40 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e34:	2b11      	cmp	r3, #17
 8000e36:	d003      	beq.n	8000e40 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	2b12      	cmp	r3, #18
 8000e3e:	d130      	bne.n	8000ea2 <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	689b      	ldr	r3, [r3, #8]
 8000e44:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000e46:	697b      	ldr	r3, [r7, #20]
 8000e48:	005b      	lsls	r3, r3, #1
 8000e4a:	2203      	movs	r2, #3
 8000e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e50:	43db      	mvns	r3, r3
 8000e52:	693a      	ldr	r2, [r7, #16]
 8000e54:	4013      	ands	r3, r2
 8000e56:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	68da      	ldr	r2, [r3, #12]
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	005b      	lsls	r3, r3, #1
 8000e60:	fa02 f303 	lsl.w	r3, r2, r3
 8000e64:	693a      	ldr	r2, [r7, #16]
 8000e66:	4313      	orrs	r3, r2
 8000e68:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	693a      	ldr	r2, [r7, #16]
 8000e6e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	685b      	ldr	r3, [r3, #4]
 8000e74:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000e76:	2201      	movs	r2, #1
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7e:	43db      	mvns	r3, r3
 8000e80:	693a      	ldr	r2, [r7, #16]
 8000e82:	4013      	ands	r3, r2
 8000e84:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	091b      	lsrs	r3, r3, #4
 8000e8c:	f003 0201 	and.w	r2, r3, #1
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	fa02 f303 	lsl.w	r3, r2, r3
 8000e96:	693a      	ldr	r2, [r7, #16]
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	693a      	ldr	r2, [r7, #16]
 8000ea0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	68db      	ldr	r3, [r3, #12]
 8000ea6:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	005b      	lsls	r3, r3, #1
 8000eac:	2203      	movs	r2, #3
 8000eae:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb2:	43db      	mvns	r3, r3
 8000eb4:	693a      	ldr	r2, [r7, #16]
 8000eb6:	4013      	ands	r3, r2
 8000eb8:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	689a      	ldr	r2, [r3, #8]
 8000ebe:	697b      	ldr	r3, [r7, #20]
 8000ec0:	005b      	lsls	r3, r3, #1
 8000ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec6:	693a      	ldr	r2, [r7, #16]
 8000ec8:	4313      	orrs	r3, r2
 8000eca:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	693a      	ldr	r2, [r7, #16]
 8000ed0:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	f000 80ac 	beq.w	8001038 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ee0:	4b5d      	ldr	r3, [pc, #372]	; (8001058 <HAL_GPIO_Init+0x2f4>)
 8000ee2:	6a1b      	ldr	r3, [r3, #32]
 8000ee4:	4a5c      	ldr	r2, [pc, #368]	; (8001058 <HAL_GPIO_Init+0x2f4>)
 8000ee6:	f043 0301 	orr.w	r3, r3, #1
 8000eea:	6213      	str	r3, [r2, #32]
 8000eec:	4b5a      	ldr	r3, [pc, #360]	; (8001058 <HAL_GPIO_Init+0x2f4>)
 8000eee:	6a1b      	ldr	r3, [r3, #32]
 8000ef0:	f003 0301 	and.w	r3, r3, #1
 8000ef4:	60bb      	str	r3, [r7, #8]
 8000ef6:	68bb      	ldr	r3, [r7, #8]
        
        temp = SYSCFG->EXTICR[position >> 2];
 8000ef8:	4a58      	ldr	r2, [pc, #352]	; (800105c <HAL_GPIO_Init+0x2f8>)
 8000efa:	697b      	ldr	r3, [r7, #20]
 8000efc:	089b      	lsrs	r3, r3, #2
 8000efe:	3302      	adds	r3, #2
 8000f00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f04:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8000f06:	697b      	ldr	r3, [r7, #20]
 8000f08:	f003 0303 	and.w	r3, r3, #3
 8000f0c:	009b      	lsls	r3, r3, #2
 8000f0e:	220f      	movs	r2, #15
 8000f10:	fa02 f303 	lsl.w	r3, r2, r3
 8000f14:	43db      	mvns	r3, r3
 8000f16:	693a      	ldr	r2, [r7, #16]
 8000f18:	4013      	ands	r3, r2
 8000f1a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	4a50      	ldr	r2, [pc, #320]	; (8001060 <HAL_GPIO_Init+0x2fc>)
 8000f20:	4293      	cmp	r3, r2
 8000f22:	d025      	beq.n	8000f70 <HAL_GPIO_Init+0x20c>
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	4a4f      	ldr	r2, [pc, #316]	; (8001064 <HAL_GPIO_Init+0x300>)
 8000f28:	4293      	cmp	r3, r2
 8000f2a:	d01f      	beq.n	8000f6c <HAL_GPIO_Init+0x208>
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	4a4e      	ldr	r2, [pc, #312]	; (8001068 <HAL_GPIO_Init+0x304>)
 8000f30:	4293      	cmp	r3, r2
 8000f32:	d019      	beq.n	8000f68 <HAL_GPIO_Init+0x204>
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	4a4d      	ldr	r2, [pc, #308]	; (800106c <HAL_GPIO_Init+0x308>)
 8000f38:	4293      	cmp	r3, r2
 8000f3a:	d013      	beq.n	8000f64 <HAL_GPIO_Init+0x200>
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	4a4c      	ldr	r2, [pc, #304]	; (8001070 <HAL_GPIO_Init+0x30c>)
 8000f40:	4293      	cmp	r3, r2
 8000f42:	d00d      	beq.n	8000f60 <HAL_GPIO_Init+0x1fc>
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	4a4b      	ldr	r2, [pc, #300]	; (8001074 <HAL_GPIO_Init+0x310>)
 8000f48:	4293      	cmp	r3, r2
 8000f4a:	d007      	beq.n	8000f5c <HAL_GPIO_Init+0x1f8>
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	4a4a      	ldr	r2, [pc, #296]	; (8001078 <HAL_GPIO_Init+0x314>)
 8000f50:	4293      	cmp	r3, r2
 8000f52:	d101      	bne.n	8000f58 <HAL_GPIO_Init+0x1f4>
 8000f54:	2306      	movs	r3, #6
 8000f56:	e00c      	b.n	8000f72 <HAL_GPIO_Init+0x20e>
 8000f58:	2307      	movs	r3, #7
 8000f5a:	e00a      	b.n	8000f72 <HAL_GPIO_Init+0x20e>
 8000f5c:	2305      	movs	r3, #5
 8000f5e:	e008      	b.n	8000f72 <HAL_GPIO_Init+0x20e>
 8000f60:	2304      	movs	r3, #4
 8000f62:	e006      	b.n	8000f72 <HAL_GPIO_Init+0x20e>
 8000f64:	2303      	movs	r3, #3
 8000f66:	e004      	b.n	8000f72 <HAL_GPIO_Init+0x20e>
 8000f68:	2302      	movs	r3, #2
 8000f6a:	e002      	b.n	8000f72 <HAL_GPIO_Init+0x20e>
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	e000      	b.n	8000f72 <HAL_GPIO_Init+0x20e>
 8000f70:	2300      	movs	r3, #0
 8000f72:	697a      	ldr	r2, [r7, #20]
 8000f74:	f002 0203 	and.w	r2, r2, #3
 8000f78:	0092      	lsls	r2, r2, #2
 8000f7a:	4093      	lsls	r3, r2
 8000f7c:	693a      	ldr	r2, [r7, #16]
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000f82:	4936      	ldr	r1, [pc, #216]	; (800105c <HAL_GPIO_Init+0x2f8>)
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	089b      	lsrs	r3, r3, #2
 8000f88:	3302      	adds	r3, #2
 8000f8a:	693a      	ldr	r2, [r7, #16]
 8000f8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f90:	4b3a      	ldr	r3, [pc, #232]	; (800107c <HAL_GPIO_Init+0x318>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	43db      	mvns	r3, r3
 8000f9a:	693a      	ldr	r2, [r7, #16]
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d003      	beq.n	8000fb4 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent); 
 8000fac:	693a      	ldr	r2, [r7, #16]
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	4313      	orrs	r3, r2
 8000fb2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000fb4:	4a31      	ldr	r2, [pc, #196]	; (800107c <HAL_GPIO_Init+0x318>)
 8000fb6:	693b      	ldr	r3, [r7, #16]
 8000fb8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000fba:	4b30      	ldr	r3, [pc, #192]	; (800107c <HAL_GPIO_Init+0x318>)
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	43db      	mvns	r3, r3
 8000fc4:	693a      	ldr	r2, [r7, #16]
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d003      	beq.n	8000fde <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent); 
 8000fd6:	693a      	ldr	r2, [r7, #16]
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000fde:	4a27      	ldr	r2, [pc, #156]	; (800107c <HAL_GPIO_Init+0x318>)
 8000fe0:	693b      	ldr	r3, [r7, #16]
 8000fe2:	6053      	str	r3, [r2, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fe4:	4b25      	ldr	r3, [pc, #148]	; (800107c <HAL_GPIO_Init+0x318>)
 8000fe6:	689b      	ldr	r3, [r3, #8]
 8000fe8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	43db      	mvns	r3, r3
 8000fee:	693a      	ldr	r2, [r7, #16]
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d003      	beq.n	8001008 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent); 
 8001000:	693a      	ldr	r2, [r7, #16]
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	4313      	orrs	r3, r2
 8001006:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001008:	4a1c      	ldr	r2, [pc, #112]	; (800107c <HAL_GPIO_Init+0x318>)
 800100a:	693b      	ldr	r3, [r7, #16]
 800100c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800100e:	4b1b      	ldr	r3, [pc, #108]	; (800107c <HAL_GPIO_Init+0x318>)
 8001010:	68db      	ldr	r3, [r3, #12]
 8001012:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	43db      	mvns	r3, r3
 8001018:	693a      	ldr	r2, [r7, #16]
 800101a:	4013      	ands	r3, r2
 800101c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001026:	2b00      	cmp	r3, #0
 8001028:	d003      	beq.n	8001032 <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent); 
 800102a:	693a      	ldr	r2, [r7, #16]
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	4313      	orrs	r3, r2
 8001030:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001032:	4a12      	ldr	r2, [pc, #72]	; (800107c <HAL_GPIO_Init+0x318>)
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	3301      	adds	r3, #1
 800103c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	681a      	ldr	r2, [r3, #0]
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	fa22 f303 	lsr.w	r3, r2, r3
 8001048:	2b00      	cmp	r3, #0
 800104a:	f47f ae97 	bne.w	8000d7c <HAL_GPIO_Init+0x18>
  } 
}
 800104e:	bf00      	nop
 8001050:	371c      	adds	r7, #28
 8001052:	46bd      	mov	sp, r7
 8001054:	bc80      	pop	{r7}
 8001056:	4770      	bx	lr
 8001058:	40023800 	.word	0x40023800
 800105c:	40010000 	.word	0x40010000
 8001060:	40020000 	.word	0x40020000
 8001064:	40020400 	.word	0x40020400
 8001068:	40020800 	.word	0x40020800
 800106c:	40020c00 	.word	0x40020c00
 8001070:	40021000 	.word	0x40021000
 8001074:	40021400 	.word	0x40021400
 8001078:	40021800 	.word	0x40021800
 800107c:	40010400 	.word	0x40010400

08001080 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b088      	sub	sp, #32
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d101      	bne.n	8001092 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800108e:	2301      	movs	r3, #1
 8001090:	e31d      	b.n	80016ce <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001092:	4b94      	ldr	r3, [pc, #592]	; (80012e4 <HAL_RCC_OscConfig+0x264>)
 8001094:	689b      	ldr	r3, [r3, #8]
 8001096:	f003 030c 	and.w	r3, r3, #12
 800109a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800109c:	4b91      	ldr	r3, [pc, #580]	; (80012e4 <HAL_RCC_OscConfig+0x264>)
 800109e:	689b      	ldr	r3, [r3, #8]
 80010a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010a4:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f003 0301 	and.w	r3, r3, #1
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d07b      	beq.n	80011aa <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80010b2:	69bb      	ldr	r3, [r7, #24]
 80010b4:	2b08      	cmp	r3, #8
 80010b6:	d006      	beq.n	80010c6 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80010b8:	69bb      	ldr	r3, [r7, #24]
 80010ba:	2b0c      	cmp	r3, #12
 80010bc:	d10f      	bne.n	80010de <HAL_RCC_OscConfig+0x5e>
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010c4:	d10b      	bne.n	80010de <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010c6:	4b87      	ldr	r3, [pc, #540]	; (80012e4 <HAL_RCC_OscConfig+0x264>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d06a      	beq.n	80011a8 <HAL_RCC_OscConfig+0x128>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d166      	bne.n	80011a8 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 80010da:	2301      	movs	r3, #1
 80010dc:	e2f7      	b.n	80016ce <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	2b01      	cmp	r3, #1
 80010e4:	d106      	bne.n	80010f4 <HAL_RCC_OscConfig+0x74>
 80010e6:	4b7f      	ldr	r3, [pc, #508]	; (80012e4 <HAL_RCC_OscConfig+0x264>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4a7e      	ldr	r2, [pc, #504]	; (80012e4 <HAL_RCC_OscConfig+0x264>)
 80010ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010f0:	6013      	str	r3, [r2, #0]
 80010f2:	e02d      	b.n	8001150 <HAL_RCC_OscConfig+0xd0>
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d10c      	bne.n	8001116 <HAL_RCC_OscConfig+0x96>
 80010fc:	4b79      	ldr	r3, [pc, #484]	; (80012e4 <HAL_RCC_OscConfig+0x264>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a78      	ldr	r2, [pc, #480]	; (80012e4 <HAL_RCC_OscConfig+0x264>)
 8001102:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001106:	6013      	str	r3, [r2, #0]
 8001108:	4b76      	ldr	r3, [pc, #472]	; (80012e4 <HAL_RCC_OscConfig+0x264>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a75      	ldr	r2, [pc, #468]	; (80012e4 <HAL_RCC_OscConfig+0x264>)
 800110e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001112:	6013      	str	r3, [r2, #0]
 8001114:	e01c      	b.n	8001150 <HAL_RCC_OscConfig+0xd0>
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	2b05      	cmp	r3, #5
 800111c:	d10c      	bne.n	8001138 <HAL_RCC_OscConfig+0xb8>
 800111e:	4b71      	ldr	r3, [pc, #452]	; (80012e4 <HAL_RCC_OscConfig+0x264>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4a70      	ldr	r2, [pc, #448]	; (80012e4 <HAL_RCC_OscConfig+0x264>)
 8001124:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001128:	6013      	str	r3, [r2, #0]
 800112a:	4b6e      	ldr	r3, [pc, #440]	; (80012e4 <HAL_RCC_OscConfig+0x264>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4a6d      	ldr	r2, [pc, #436]	; (80012e4 <HAL_RCC_OscConfig+0x264>)
 8001130:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001134:	6013      	str	r3, [r2, #0]
 8001136:	e00b      	b.n	8001150 <HAL_RCC_OscConfig+0xd0>
 8001138:	4b6a      	ldr	r3, [pc, #424]	; (80012e4 <HAL_RCC_OscConfig+0x264>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a69      	ldr	r2, [pc, #420]	; (80012e4 <HAL_RCC_OscConfig+0x264>)
 800113e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001142:	6013      	str	r3, [r2, #0]
 8001144:	4b67      	ldr	r3, [pc, #412]	; (80012e4 <HAL_RCC_OscConfig+0x264>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a66      	ldr	r2, [pc, #408]	; (80012e4 <HAL_RCC_OscConfig+0x264>)
 800114a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800114e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d013      	beq.n	8001180 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001158:	f7ff f874 	bl	8000244 <HAL_GetTick>
 800115c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800115e:	e008      	b.n	8001172 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001160:	f7ff f870 	bl	8000244 <HAL_GetTick>
 8001164:	4602      	mov	r2, r0
 8001166:	693b      	ldr	r3, [r7, #16]
 8001168:	1ad3      	subs	r3, r2, r3
 800116a:	2b64      	cmp	r3, #100	; 0x64
 800116c:	d901      	bls.n	8001172 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 800116e:	2303      	movs	r3, #3
 8001170:	e2ad      	b.n	80016ce <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001172:	4b5c      	ldr	r3, [pc, #368]	; (80012e4 <HAL_RCC_OscConfig+0x264>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800117a:	2b00      	cmp	r3, #0
 800117c:	d0f0      	beq.n	8001160 <HAL_RCC_OscConfig+0xe0>
 800117e:	e014      	b.n	80011aa <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001180:	f7ff f860 	bl	8000244 <HAL_GetTick>
 8001184:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001186:	e008      	b.n	800119a <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001188:	f7ff f85c 	bl	8000244 <HAL_GetTick>
 800118c:	4602      	mov	r2, r0
 800118e:	693b      	ldr	r3, [r7, #16]
 8001190:	1ad3      	subs	r3, r2, r3
 8001192:	2b64      	cmp	r3, #100	; 0x64
 8001194:	d901      	bls.n	800119a <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8001196:	2303      	movs	r3, #3
 8001198:	e299      	b.n	80016ce <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800119a:	4b52      	ldr	r3, [pc, #328]	; (80012e4 <HAL_RCC_OscConfig+0x264>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d1f0      	bne.n	8001188 <HAL_RCC_OscConfig+0x108>
 80011a6:	e000      	b.n	80011aa <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f003 0302 	and.w	r3, r3, #2
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d05a      	beq.n	800126c <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80011b6:	69bb      	ldr	r3, [r7, #24]
 80011b8:	2b04      	cmp	r3, #4
 80011ba:	d005      	beq.n	80011c8 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80011bc:	69bb      	ldr	r3, [r7, #24]
 80011be:	2b0c      	cmp	r3, #12
 80011c0:	d119      	bne.n	80011f6 <HAL_RCC_OscConfig+0x176>
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d116      	bne.n	80011f6 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011c8:	4b46      	ldr	r3, [pc, #280]	; (80012e4 <HAL_RCC_OscConfig+0x264>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f003 0302 	and.w	r3, r3, #2
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d005      	beq.n	80011e0 <HAL_RCC_OscConfig+0x160>
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	68db      	ldr	r3, [r3, #12]
 80011d8:	2b01      	cmp	r3, #1
 80011da:	d001      	beq.n	80011e0 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 80011dc:	2301      	movs	r3, #1
 80011de:	e276      	b.n	80016ce <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011e0:	4b40      	ldr	r3, [pc, #256]	; (80012e4 <HAL_RCC_OscConfig+0x264>)
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	691b      	ldr	r3, [r3, #16]
 80011ec:	021b      	lsls	r3, r3, #8
 80011ee:	493d      	ldr	r1, [pc, #244]	; (80012e4 <HAL_RCC_OscConfig+0x264>)
 80011f0:	4313      	orrs	r3, r2
 80011f2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011f4:	e03a      	b.n	800126c <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	68db      	ldr	r3, [r3, #12]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d020      	beq.n	8001240 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011fe:	4b3a      	ldr	r3, [pc, #232]	; (80012e8 <HAL_RCC_OscConfig+0x268>)
 8001200:	2201      	movs	r2, #1
 8001202:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001204:	f7ff f81e 	bl	8000244 <HAL_GetTick>
 8001208:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800120a:	e008      	b.n	800121e <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800120c:	f7ff f81a 	bl	8000244 <HAL_GetTick>
 8001210:	4602      	mov	r2, r0
 8001212:	693b      	ldr	r3, [r7, #16]
 8001214:	1ad3      	subs	r3, r2, r3
 8001216:	2b02      	cmp	r3, #2
 8001218:	d901      	bls.n	800121e <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800121a:	2303      	movs	r3, #3
 800121c:	e257      	b.n	80016ce <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800121e:	4b31      	ldr	r3, [pc, #196]	; (80012e4 <HAL_RCC_OscConfig+0x264>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f003 0302 	and.w	r3, r3, #2
 8001226:	2b00      	cmp	r3, #0
 8001228:	d0f0      	beq.n	800120c <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800122a:	4b2e      	ldr	r3, [pc, #184]	; (80012e4 <HAL_RCC_OscConfig+0x264>)
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	691b      	ldr	r3, [r3, #16]
 8001236:	021b      	lsls	r3, r3, #8
 8001238:	492a      	ldr	r1, [pc, #168]	; (80012e4 <HAL_RCC_OscConfig+0x264>)
 800123a:	4313      	orrs	r3, r2
 800123c:	604b      	str	r3, [r1, #4]
 800123e:	e015      	b.n	800126c <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001240:	4b29      	ldr	r3, [pc, #164]	; (80012e8 <HAL_RCC_OscConfig+0x268>)
 8001242:	2200      	movs	r2, #0
 8001244:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001246:	f7fe fffd 	bl	8000244 <HAL_GetTick>
 800124a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800124c:	e008      	b.n	8001260 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800124e:	f7fe fff9 	bl	8000244 <HAL_GetTick>
 8001252:	4602      	mov	r2, r0
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	1ad3      	subs	r3, r2, r3
 8001258:	2b02      	cmp	r3, #2
 800125a:	d901      	bls.n	8001260 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 800125c:	2303      	movs	r3, #3
 800125e:	e236      	b.n	80016ce <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001260:	4b20      	ldr	r3, [pc, #128]	; (80012e4 <HAL_RCC_OscConfig+0x264>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f003 0302 	and.w	r3, r3, #2
 8001268:	2b00      	cmp	r3, #0
 800126a:	d1f0      	bne.n	800124e <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f003 0310 	and.w	r3, r3, #16
 8001274:	2b00      	cmp	r3, #0
 8001276:	f000 80b8 	beq.w	80013ea <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 800127a:	69bb      	ldr	r3, [r7, #24]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d170      	bne.n	8001362 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001280:	4b18      	ldr	r3, [pc, #96]	; (80012e4 <HAL_RCC_OscConfig+0x264>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001288:	2b00      	cmp	r3, #0
 800128a:	d005      	beq.n	8001298 <HAL_RCC_OscConfig+0x218>
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	699b      	ldr	r3, [r3, #24]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d101      	bne.n	8001298 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8001294:	2301      	movs	r3, #1
 8001296:	e21a      	b.n	80016ce <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6a1a      	ldr	r2, [r3, #32]
 800129c:	4b11      	ldr	r3, [pc, #68]	; (80012e4 <HAL_RCC_OscConfig+0x264>)
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80012a4:	429a      	cmp	r2, r3
 80012a6:	d921      	bls.n	80012ec <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6a1b      	ldr	r3, [r3, #32]
 80012ac:	4618      	mov	r0, r3
 80012ae:	f000 fbd5 	bl	8001a5c <RCC_SetFlashLatencyFromMSIRange>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d001      	beq.n	80012bc <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 80012b8:	2301      	movs	r3, #1
 80012ba:	e208      	b.n	80016ce <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012bc:	4b09      	ldr	r3, [pc, #36]	; (80012e4 <HAL_RCC_OscConfig+0x264>)
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6a1b      	ldr	r3, [r3, #32]
 80012c8:	4906      	ldr	r1, [pc, #24]	; (80012e4 <HAL_RCC_OscConfig+0x264>)
 80012ca:	4313      	orrs	r3, r2
 80012cc:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012ce:	4b05      	ldr	r3, [pc, #20]	; (80012e4 <HAL_RCC_OscConfig+0x264>)
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	69db      	ldr	r3, [r3, #28]
 80012da:	061b      	lsls	r3, r3, #24
 80012dc:	4901      	ldr	r1, [pc, #4]	; (80012e4 <HAL_RCC_OscConfig+0x264>)
 80012de:	4313      	orrs	r3, r2
 80012e0:	604b      	str	r3, [r1, #4]
 80012e2:	e020      	b.n	8001326 <HAL_RCC_OscConfig+0x2a6>
 80012e4:	40023800 	.word	0x40023800
 80012e8:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012ec:	4ba4      	ldr	r3, [pc, #656]	; (8001580 <HAL_RCC_OscConfig+0x500>)
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6a1b      	ldr	r3, [r3, #32]
 80012f8:	49a1      	ldr	r1, [pc, #644]	; (8001580 <HAL_RCC_OscConfig+0x500>)
 80012fa:	4313      	orrs	r3, r2
 80012fc:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012fe:	4ba0      	ldr	r3, [pc, #640]	; (8001580 <HAL_RCC_OscConfig+0x500>)
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	69db      	ldr	r3, [r3, #28]
 800130a:	061b      	lsls	r3, r3, #24
 800130c:	499c      	ldr	r1, [pc, #624]	; (8001580 <HAL_RCC_OscConfig+0x500>)
 800130e:	4313      	orrs	r3, r2
 8001310:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6a1b      	ldr	r3, [r3, #32]
 8001316:	4618      	mov	r0, r3
 8001318:	f000 fba0 	bl	8001a5c <RCC_SetFlashLatencyFromMSIRange>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8001322:	2301      	movs	r3, #1
 8001324:	e1d3      	b.n	80016ce <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6a1b      	ldr	r3, [r3, #32]
 800132a:	0b5b      	lsrs	r3, r3, #13
 800132c:	3301      	adds	r3, #1
 800132e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001332:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001336:	4a92      	ldr	r2, [pc, #584]	; (8001580 <HAL_RCC_OscConfig+0x500>)
 8001338:	6892      	ldr	r2, [r2, #8]
 800133a:	0912      	lsrs	r2, r2, #4
 800133c:	f002 020f 	and.w	r2, r2, #15
 8001340:	4990      	ldr	r1, [pc, #576]	; (8001584 <HAL_RCC_OscConfig+0x504>)
 8001342:	5c8a      	ldrb	r2, [r1, r2]
 8001344:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001346:	4a90      	ldr	r2, [pc, #576]	; (8001588 <HAL_RCC_OscConfig+0x508>)
 8001348:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800134a:	4b90      	ldr	r3, [pc, #576]	; (800158c <HAL_RCC_OscConfig+0x50c>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4618      	mov	r0, r3
 8001350:	f7fe ff2c 	bl	80001ac <HAL_InitTick>
 8001354:	4603      	mov	r3, r0
 8001356:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001358:	7bfb      	ldrb	r3, [r7, #15]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d045      	beq.n	80013ea <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 800135e:	7bfb      	ldrb	r3, [r7, #15]
 8001360:	e1b5      	b.n	80016ce <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	699b      	ldr	r3, [r3, #24]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d029      	beq.n	80013be <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800136a:	4b89      	ldr	r3, [pc, #548]	; (8001590 <HAL_RCC_OscConfig+0x510>)
 800136c:	2201      	movs	r2, #1
 800136e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001370:	f7fe ff68 	bl	8000244 <HAL_GetTick>
 8001374:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001376:	e008      	b.n	800138a <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001378:	f7fe ff64 	bl	8000244 <HAL_GetTick>
 800137c:	4602      	mov	r2, r0
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	1ad3      	subs	r3, r2, r3
 8001382:	2b02      	cmp	r3, #2
 8001384:	d901      	bls.n	800138a <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8001386:	2303      	movs	r3, #3
 8001388:	e1a1      	b.n	80016ce <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800138a:	4b7d      	ldr	r3, [pc, #500]	; (8001580 <HAL_RCC_OscConfig+0x500>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001392:	2b00      	cmp	r3, #0
 8001394:	d0f0      	beq.n	8001378 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001396:	4b7a      	ldr	r3, [pc, #488]	; (8001580 <HAL_RCC_OscConfig+0x500>)
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6a1b      	ldr	r3, [r3, #32]
 80013a2:	4977      	ldr	r1, [pc, #476]	; (8001580 <HAL_RCC_OscConfig+0x500>)
 80013a4:	4313      	orrs	r3, r2
 80013a6:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013a8:	4b75      	ldr	r3, [pc, #468]	; (8001580 <HAL_RCC_OscConfig+0x500>)
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	69db      	ldr	r3, [r3, #28]
 80013b4:	061b      	lsls	r3, r3, #24
 80013b6:	4972      	ldr	r1, [pc, #456]	; (8001580 <HAL_RCC_OscConfig+0x500>)
 80013b8:	4313      	orrs	r3, r2
 80013ba:	604b      	str	r3, [r1, #4]
 80013bc:	e015      	b.n	80013ea <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80013be:	4b74      	ldr	r3, [pc, #464]	; (8001590 <HAL_RCC_OscConfig+0x510>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013c4:	f7fe ff3e 	bl	8000244 <HAL_GetTick>
 80013c8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80013ca:	e008      	b.n	80013de <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80013cc:	f7fe ff3a 	bl	8000244 <HAL_GetTick>
 80013d0:	4602      	mov	r2, r0
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	2b02      	cmp	r3, #2
 80013d8:	d901      	bls.n	80013de <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80013da:	2303      	movs	r3, #3
 80013dc:	e177      	b.n	80016ce <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80013de:	4b68      	ldr	r3, [pc, #416]	; (8001580 <HAL_RCC_OscConfig+0x500>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d1f0      	bne.n	80013cc <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f003 0308 	and.w	r3, r3, #8
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d030      	beq.n	8001458 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	695b      	ldr	r3, [r3, #20]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d016      	beq.n	800142c <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013fe:	4b65      	ldr	r3, [pc, #404]	; (8001594 <HAL_RCC_OscConfig+0x514>)
 8001400:	2201      	movs	r2, #1
 8001402:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001404:	f7fe ff1e 	bl	8000244 <HAL_GetTick>
 8001408:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800140a:	e008      	b.n	800141e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800140c:	f7fe ff1a 	bl	8000244 <HAL_GetTick>
 8001410:	4602      	mov	r2, r0
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	2b02      	cmp	r3, #2
 8001418:	d901      	bls.n	800141e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800141a:	2303      	movs	r3, #3
 800141c:	e157      	b.n	80016ce <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800141e:	4b58      	ldr	r3, [pc, #352]	; (8001580 <HAL_RCC_OscConfig+0x500>)
 8001420:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001422:	f003 0302 	and.w	r3, r3, #2
 8001426:	2b00      	cmp	r3, #0
 8001428:	d0f0      	beq.n	800140c <HAL_RCC_OscConfig+0x38c>
 800142a:	e015      	b.n	8001458 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800142c:	4b59      	ldr	r3, [pc, #356]	; (8001594 <HAL_RCC_OscConfig+0x514>)
 800142e:	2200      	movs	r2, #0
 8001430:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001432:	f7fe ff07 	bl	8000244 <HAL_GetTick>
 8001436:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001438:	e008      	b.n	800144c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800143a:	f7fe ff03 	bl	8000244 <HAL_GetTick>
 800143e:	4602      	mov	r2, r0
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	1ad3      	subs	r3, r2, r3
 8001444:	2b02      	cmp	r3, #2
 8001446:	d901      	bls.n	800144c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001448:	2303      	movs	r3, #3
 800144a:	e140      	b.n	80016ce <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800144c:	4b4c      	ldr	r3, [pc, #304]	; (8001580 <HAL_RCC_OscConfig+0x500>)
 800144e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001450:	f003 0302 	and.w	r3, r3, #2
 8001454:	2b00      	cmp	r3, #0
 8001456:	d1f0      	bne.n	800143a <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f003 0304 	and.w	r3, r3, #4
 8001460:	2b00      	cmp	r3, #0
 8001462:	f000 80b5 	beq.w	80015d0 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001466:	2300      	movs	r3, #0
 8001468:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800146a:	4b45      	ldr	r3, [pc, #276]	; (8001580 <HAL_RCC_OscConfig+0x500>)
 800146c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800146e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001472:	2b00      	cmp	r3, #0
 8001474:	d10d      	bne.n	8001492 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001476:	4b42      	ldr	r3, [pc, #264]	; (8001580 <HAL_RCC_OscConfig+0x500>)
 8001478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800147a:	4a41      	ldr	r2, [pc, #260]	; (8001580 <HAL_RCC_OscConfig+0x500>)
 800147c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001480:	6253      	str	r3, [r2, #36]	; 0x24
 8001482:	4b3f      	ldr	r3, [pc, #252]	; (8001580 <HAL_RCC_OscConfig+0x500>)
 8001484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001486:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800148a:	60bb      	str	r3, [r7, #8]
 800148c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800148e:	2301      	movs	r3, #1
 8001490:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001492:	4b41      	ldr	r3, [pc, #260]	; (8001598 <HAL_RCC_OscConfig+0x518>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800149a:	2b00      	cmp	r3, #0
 800149c:	d118      	bne.n	80014d0 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800149e:	4b3e      	ldr	r3, [pc, #248]	; (8001598 <HAL_RCC_OscConfig+0x518>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4a3d      	ldr	r2, [pc, #244]	; (8001598 <HAL_RCC_OscConfig+0x518>)
 80014a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014aa:	f7fe fecb 	bl	8000244 <HAL_GetTick>
 80014ae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014b0:	e008      	b.n	80014c4 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014b2:	f7fe fec7 	bl	8000244 <HAL_GetTick>
 80014b6:	4602      	mov	r2, r0
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	1ad3      	subs	r3, r2, r3
 80014bc:	2b64      	cmp	r3, #100	; 0x64
 80014be:	d901      	bls.n	80014c4 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80014c0:	2303      	movs	r3, #3
 80014c2:	e104      	b.n	80016ce <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014c4:	4b34      	ldr	r3, [pc, #208]	; (8001598 <HAL_RCC_OscConfig+0x518>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d0f0      	beq.n	80014b2 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	689b      	ldr	r3, [r3, #8]
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	d106      	bne.n	80014e6 <HAL_RCC_OscConfig+0x466>
 80014d8:	4b29      	ldr	r3, [pc, #164]	; (8001580 <HAL_RCC_OscConfig+0x500>)
 80014da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014dc:	4a28      	ldr	r2, [pc, #160]	; (8001580 <HAL_RCC_OscConfig+0x500>)
 80014de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014e2:	6353      	str	r3, [r2, #52]	; 0x34
 80014e4:	e02d      	b.n	8001542 <HAL_RCC_OscConfig+0x4c2>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	689b      	ldr	r3, [r3, #8]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d10c      	bne.n	8001508 <HAL_RCC_OscConfig+0x488>
 80014ee:	4b24      	ldr	r3, [pc, #144]	; (8001580 <HAL_RCC_OscConfig+0x500>)
 80014f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014f2:	4a23      	ldr	r2, [pc, #140]	; (8001580 <HAL_RCC_OscConfig+0x500>)
 80014f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80014f8:	6353      	str	r3, [r2, #52]	; 0x34
 80014fa:	4b21      	ldr	r3, [pc, #132]	; (8001580 <HAL_RCC_OscConfig+0x500>)
 80014fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014fe:	4a20      	ldr	r2, [pc, #128]	; (8001580 <HAL_RCC_OscConfig+0x500>)
 8001500:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001504:	6353      	str	r3, [r2, #52]	; 0x34
 8001506:	e01c      	b.n	8001542 <HAL_RCC_OscConfig+0x4c2>
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	689b      	ldr	r3, [r3, #8]
 800150c:	2b05      	cmp	r3, #5
 800150e:	d10c      	bne.n	800152a <HAL_RCC_OscConfig+0x4aa>
 8001510:	4b1b      	ldr	r3, [pc, #108]	; (8001580 <HAL_RCC_OscConfig+0x500>)
 8001512:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001514:	4a1a      	ldr	r2, [pc, #104]	; (8001580 <HAL_RCC_OscConfig+0x500>)
 8001516:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800151a:	6353      	str	r3, [r2, #52]	; 0x34
 800151c:	4b18      	ldr	r3, [pc, #96]	; (8001580 <HAL_RCC_OscConfig+0x500>)
 800151e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001520:	4a17      	ldr	r2, [pc, #92]	; (8001580 <HAL_RCC_OscConfig+0x500>)
 8001522:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001526:	6353      	str	r3, [r2, #52]	; 0x34
 8001528:	e00b      	b.n	8001542 <HAL_RCC_OscConfig+0x4c2>
 800152a:	4b15      	ldr	r3, [pc, #84]	; (8001580 <HAL_RCC_OscConfig+0x500>)
 800152c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800152e:	4a14      	ldr	r2, [pc, #80]	; (8001580 <HAL_RCC_OscConfig+0x500>)
 8001530:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001534:	6353      	str	r3, [r2, #52]	; 0x34
 8001536:	4b12      	ldr	r3, [pc, #72]	; (8001580 <HAL_RCC_OscConfig+0x500>)
 8001538:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800153a:	4a11      	ldr	r2, [pc, #68]	; (8001580 <HAL_RCC_OscConfig+0x500>)
 800153c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001540:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	689b      	ldr	r3, [r3, #8]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d015      	beq.n	8001576 <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800154a:	f7fe fe7b 	bl	8000244 <HAL_GetTick>
 800154e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001550:	e00a      	b.n	8001568 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001552:	f7fe fe77 	bl	8000244 <HAL_GetTick>
 8001556:	4602      	mov	r2, r0
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	1ad3      	subs	r3, r2, r3
 800155c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001560:	4293      	cmp	r3, r2
 8001562:	d901      	bls.n	8001568 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001564:	2303      	movs	r3, #3
 8001566:	e0b2      	b.n	80016ce <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001568:	4b05      	ldr	r3, [pc, #20]	; (8001580 <HAL_RCC_OscConfig+0x500>)
 800156a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800156c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001570:	2b00      	cmp	r3, #0
 8001572:	d0ee      	beq.n	8001552 <HAL_RCC_OscConfig+0x4d2>
 8001574:	e023      	b.n	80015be <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001576:	f7fe fe65 	bl	8000244 <HAL_GetTick>
 800157a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800157c:	e019      	b.n	80015b2 <HAL_RCC_OscConfig+0x532>
 800157e:	bf00      	nop
 8001580:	40023800 	.word	0x40023800
 8001584:	080037f4 	.word	0x080037f4
 8001588:	20000008 	.word	0x20000008
 800158c:	20000000 	.word	0x20000000
 8001590:	42470020 	.word	0x42470020
 8001594:	42470680 	.word	0x42470680
 8001598:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800159c:	f7fe fe52 	bl	8000244 <HAL_GetTick>
 80015a0:	4602      	mov	r2, r0
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d901      	bls.n	80015b2 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 80015ae:	2303      	movs	r3, #3
 80015b0:	e08d      	b.n	80016ce <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80015b2:	4b49      	ldr	r3, [pc, #292]	; (80016d8 <HAL_RCC_OscConfig+0x658>)
 80015b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d1ee      	bne.n	800159c <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80015be:	7ffb      	ldrb	r3, [r7, #31]
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	d105      	bne.n	80015d0 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015c4:	4b44      	ldr	r3, [pc, #272]	; (80016d8 <HAL_RCC_OscConfig+0x658>)
 80015c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015c8:	4a43      	ldr	r2, [pc, #268]	; (80016d8 <HAL_RCC_OscConfig+0x658>)
 80015ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015ce:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d079      	beq.n	80016cc <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015d8:	69bb      	ldr	r3, [r7, #24]
 80015da:	2b0c      	cmp	r3, #12
 80015dc:	d056      	beq.n	800168c <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015e2:	2b02      	cmp	r3, #2
 80015e4:	d13b      	bne.n	800165e <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015e6:	4b3d      	ldr	r3, [pc, #244]	; (80016dc <HAL_RCC_OscConfig+0x65c>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ec:	f7fe fe2a 	bl	8000244 <HAL_GetTick>
 80015f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80015f2:	e008      	b.n	8001606 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015f4:	f7fe fe26 	bl	8000244 <HAL_GetTick>
 80015f8:	4602      	mov	r2, r0
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	1ad3      	subs	r3, r2, r3
 80015fe:	2b02      	cmp	r3, #2
 8001600:	d901      	bls.n	8001606 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001602:	2303      	movs	r3, #3
 8001604:	e063      	b.n	80016ce <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001606:	4b34      	ldr	r3, [pc, #208]	; (80016d8 <HAL_RCC_OscConfig+0x658>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800160e:	2b00      	cmp	r3, #0
 8001610:	d1f0      	bne.n	80015f4 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001612:	4b31      	ldr	r3, [pc, #196]	; (80016d8 <HAL_RCC_OscConfig+0x658>)
 8001614:	689b      	ldr	r3, [r3, #8]
 8001616:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001622:	4319      	orrs	r1, r3
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001628:	430b      	orrs	r3, r1
 800162a:	492b      	ldr	r1, [pc, #172]	; (80016d8 <HAL_RCC_OscConfig+0x658>)
 800162c:	4313      	orrs	r3, r2
 800162e:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001630:	4b2a      	ldr	r3, [pc, #168]	; (80016dc <HAL_RCC_OscConfig+0x65c>)
 8001632:	2201      	movs	r2, #1
 8001634:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001636:	f7fe fe05 	bl	8000244 <HAL_GetTick>
 800163a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800163c:	e008      	b.n	8001650 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800163e:	f7fe fe01 	bl	8000244 <HAL_GetTick>
 8001642:	4602      	mov	r2, r0
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	1ad3      	subs	r3, r2, r3
 8001648:	2b02      	cmp	r3, #2
 800164a:	d901      	bls.n	8001650 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 800164c:	2303      	movs	r3, #3
 800164e:	e03e      	b.n	80016ce <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001650:	4b21      	ldr	r3, [pc, #132]	; (80016d8 <HAL_RCC_OscConfig+0x658>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001658:	2b00      	cmp	r3, #0
 800165a:	d0f0      	beq.n	800163e <HAL_RCC_OscConfig+0x5be>
 800165c:	e036      	b.n	80016cc <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800165e:	4b1f      	ldr	r3, [pc, #124]	; (80016dc <HAL_RCC_OscConfig+0x65c>)
 8001660:	2200      	movs	r2, #0
 8001662:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001664:	f7fe fdee 	bl	8000244 <HAL_GetTick>
 8001668:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800166a:	e008      	b.n	800167e <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800166c:	f7fe fdea 	bl	8000244 <HAL_GetTick>
 8001670:	4602      	mov	r2, r0
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	1ad3      	subs	r3, r2, r3
 8001676:	2b02      	cmp	r3, #2
 8001678:	d901      	bls.n	800167e <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 800167a:	2303      	movs	r3, #3
 800167c:	e027      	b.n	80016ce <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800167e:	4b16      	ldr	r3, [pc, #88]	; (80016d8 <HAL_RCC_OscConfig+0x658>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001686:	2b00      	cmp	r3, #0
 8001688:	d1f0      	bne.n	800166c <HAL_RCC_OscConfig+0x5ec>
 800168a:	e01f      	b.n	80016cc <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001690:	2b01      	cmp	r3, #1
 8001692:	d101      	bne.n	8001698 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8001694:	2301      	movs	r3, #1
 8001696:	e01a      	b.n	80016ce <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001698:	4b0f      	ldr	r3, [pc, #60]	; (80016d8 <HAL_RCC_OscConfig+0x658>)
 800169a:	689b      	ldr	r3, [r3, #8]
 800169c:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016a8:	429a      	cmp	r2, r3
 80016aa:	d10d      	bne.n	80016c8 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016b6:	429a      	cmp	r2, r3
 80016b8:	d106      	bne.n	80016c8 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80016c4:	429a      	cmp	r2, r3
 80016c6:	d001      	beq.n	80016cc <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 80016c8:	2301      	movs	r3, #1
 80016ca:	e000      	b.n	80016ce <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 80016cc:	2300      	movs	r3, #0
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	3720      	adds	r7, #32
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	40023800 	.word	0x40023800
 80016dc:	42470060 	.word	0x42470060

080016e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b084      	sub	sp, #16
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
 80016e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d101      	bne.n	80016f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016f0:	2301      	movs	r3, #1
 80016f2:	e11a      	b.n	800192a <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80016f4:	4b8f      	ldr	r3, [pc, #572]	; (8001934 <HAL_RCC_ClockConfig+0x254>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f003 0301 	and.w	r3, r3, #1
 80016fc:	683a      	ldr	r2, [r7, #0]
 80016fe:	429a      	cmp	r2, r3
 8001700:	d919      	bls.n	8001736 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	2b01      	cmp	r3, #1
 8001706:	d105      	bne.n	8001714 <HAL_RCC_ClockConfig+0x34>
 8001708:	4b8a      	ldr	r3, [pc, #552]	; (8001934 <HAL_RCC_ClockConfig+0x254>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a89      	ldr	r2, [pc, #548]	; (8001934 <HAL_RCC_ClockConfig+0x254>)
 800170e:	f043 0304 	orr.w	r3, r3, #4
 8001712:	6013      	str	r3, [r2, #0]
 8001714:	4b87      	ldr	r3, [pc, #540]	; (8001934 <HAL_RCC_ClockConfig+0x254>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f023 0201 	bic.w	r2, r3, #1
 800171c:	4985      	ldr	r1, [pc, #532]	; (8001934 <HAL_RCC_ClockConfig+0x254>)
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	4313      	orrs	r3, r2
 8001722:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001724:	4b83      	ldr	r3, [pc, #524]	; (8001934 <HAL_RCC_ClockConfig+0x254>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f003 0301 	and.w	r3, r3, #1
 800172c:	683a      	ldr	r2, [r7, #0]
 800172e:	429a      	cmp	r2, r3
 8001730:	d001      	beq.n	8001736 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	e0f9      	b.n	800192a <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f003 0302 	and.w	r3, r3, #2
 800173e:	2b00      	cmp	r3, #0
 8001740:	d008      	beq.n	8001754 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001742:	4b7d      	ldr	r3, [pc, #500]	; (8001938 <HAL_RCC_ClockConfig+0x258>)
 8001744:	689b      	ldr	r3, [r3, #8]
 8001746:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	689b      	ldr	r3, [r3, #8]
 800174e:	497a      	ldr	r1, [pc, #488]	; (8001938 <HAL_RCC_ClockConfig+0x258>)
 8001750:	4313      	orrs	r3, r2
 8001752:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f003 0301 	and.w	r3, r3, #1
 800175c:	2b00      	cmp	r3, #0
 800175e:	f000 808e 	beq.w	800187e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	2b02      	cmp	r3, #2
 8001768:	d107      	bne.n	800177a <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800176a:	4b73      	ldr	r3, [pc, #460]	; (8001938 <HAL_RCC_ClockConfig+0x258>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001772:	2b00      	cmp	r3, #0
 8001774:	d121      	bne.n	80017ba <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	e0d7      	b.n	800192a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	2b03      	cmp	r3, #3
 8001780:	d107      	bne.n	8001792 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001782:	4b6d      	ldr	r3, [pc, #436]	; (8001938 <HAL_RCC_ClockConfig+0x258>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800178a:	2b00      	cmp	r3, #0
 800178c:	d115      	bne.n	80017ba <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800178e:	2301      	movs	r3, #1
 8001790:	e0cb      	b.n	800192a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	2b01      	cmp	r3, #1
 8001798:	d107      	bne.n	80017aa <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800179a:	4b67      	ldr	r3, [pc, #412]	; (8001938 <HAL_RCC_ClockConfig+0x258>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f003 0302 	and.w	r3, r3, #2
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d109      	bne.n	80017ba <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
 80017a8:	e0bf      	b.n	800192a <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80017aa:	4b63      	ldr	r3, [pc, #396]	; (8001938 <HAL_RCC_ClockConfig+0x258>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d101      	bne.n	80017ba <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80017b6:	2301      	movs	r3, #1
 80017b8:	e0b7      	b.n	800192a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017ba:	4b5f      	ldr	r3, [pc, #380]	; (8001938 <HAL_RCC_ClockConfig+0x258>)
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	f023 0203 	bic.w	r2, r3, #3
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	495c      	ldr	r1, [pc, #368]	; (8001938 <HAL_RCC_ClockConfig+0x258>)
 80017c8:	4313      	orrs	r3, r2
 80017ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017cc:	f7fe fd3a 	bl	8000244 <HAL_GetTick>
 80017d0:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	2b02      	cmp	r3, #2
 80017d8:	d112      	bne.n	8001800 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80017da:	e00a      	b.n	80017f2 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017dc:	f7fe fd32 	bl	8000244 <HAL_GetTick>
 80017e0:	4602      	mov	r2, r0
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d901      	bls.n	80017f2 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 80017ee:	2303      	movs	r3, #3
 80017f0:	e09b      	b.n	800192a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80017f2:	4b51      	ldr	r3, [pc, #324]	; (8001938 <HAL_RCC_ClockConfig+0x258>)
 80017f4:	689b      	ldr	r3, [r3, #8]
 80017f6:	f003 030c 	and.w	r3, r3, #12
 80017fa:	2b08      	cmp	r3, #8
 80017fc:	d1ee      	bne.n	80017dc <HAL_RCC_ClockConfig+0xfc>
 80017fe:	e03e      	b.n	800187e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	2b03      	cmp	r3, #3
 8001806:	d112      	bne.n	800182e <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001808:	e00a      	b.n	8001820 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800180a:	f7fe fd1b 	bl	8000244 <HAL_GetTick>
 800180e:	4602      	mov	r2, r0
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	1ad3      	subs	r3, r2, r3
 8001814:	f241 3288 	movw	r2, #5000	; 0x1388
 8001818:	4293      	cmp	r3, r2
 800181a:	d901      	bls.n	8001820 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 800181c:	2303      	movs	r3, #3
 800181e:	e084      	b.n	800192a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001820:	4b45      	ldr	r3, [pc, #276]	; (8001938 <HAL_RCC_ClockConfig+0x258>)
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	f003 030c 	and.w	r3, r3, #12
 8001828:	2b0c      	cmp	r3, #12
 800182a:	d1ee      	bne.n	800180a <HAL_RCC_ClockConfig+0x12a>
 800182c:	e027      	b.n	800187e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	2b01      	cmp	r3, #1
 8001834:	d11d      	bne.n	8001872 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001836:	e00a      	b.n	800184e <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001838:	f7fe fd04 	bl	8000244 <HAL_GetTick>
 800183c:	4602      	mov	r2, r0
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	1ad3      	subs	r3, r2, r3
 8001842:	f241 3288 	movw	r2, #5000	; 0x1388
 8001846:	4293      	cmp	r3, r2
 8001848:	d901      	bls.n	800184e <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 800184a:	2303      	movs	r3, #3
 800184c:	e06d      	b.n	800192a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800184e:	4b3a      	ldr	r3, [pc, #232]	; (8001938 <HAL_RCC_ClockConfig+0x258>)
 8001850:	689b      	ldr	r3, [r3, #8]
 8001852:	f003 030c 	and.w	r3, r3, #12
 8001856:	2b04      	cmp	r3, #4
 8001858:	d1ee      	bne.n	8001838 <HAL_RCC_ClockConfig+0x158>
 800185a:	e010      	b.n	800187e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800185c:	f7fe fcf2 	bl	8000244 <HAL_GetTick>
 8001860:	4602      	mov	r2, r0
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	f241 3288 	movw	r2, #5000	; 0x1388
 800186a:	4293      	cmp	r3, r2
 800186c:	d901      	bls.n	8001872 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 800186e:	2303      	movs	r3, #3
 8001870:	e05b      	b.n	800192a <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001872:	4b31      	ldr	r3, [pc, #196]	; (8001938 <HAL_RCC_ClockConfig+0x258>)
 8001874:	689b      	ldr	r3, [r3, #8]
 8001876:	f003 030c 	and.w	r3, r3, #12
 800187a:	2b00      	cmp	r3, #0
 800187c:	d1ee      	bne.n	800185c <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800187e:	4b2d      	ldr	r3, [pc, #180]	; (8001934 <HAL_RCC_ClockConfig+0x254>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f003 0301 	and.w	r3, r3, #1
 8001886:	683a      	ldr	r2, [r7, #0]
 8001888:	429a      	cmp	r2, r3
 800188a:	d219      	bcs.n	80018c0 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	2b01      	cmp	r3, #1
 8001890:	d105      	bne.n	800189e <HAL_RCC_ClockConfig+0x1be>
 8001892:	4b28      	ldr	r3, [pc, #160]	; (8001934 <HAL_RCC_ClockConfig+0x254>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a27      	ldr	r2, [pc, #156]	; (8001934 <HAL_RCC_ClockConfig+0x254>)
 8001898:	f043 0304 	orr.w	r3, r3, #4
 800189c:	6013      	str	r3, [r2, #0]
 800189e:	4b25      	ldr	r3, [pc, #148]	; (8001934 <HAL_RCC_ClockConfig+0x254>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f023 0201 	bic.w	r2, r3, #1
 80018a6:	4923      	ldr	r1, [pc, #140]	; (8001934 <HAL_RCC_ClockConfig+0x254>)
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	4313      	orrs	r3, r2
 80018ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018ae:	4b21      	ldr	r3, [pc, #132]	; (8001934 <HAL_RCC_ClockConfig+0x254>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f003 0301 	and.w	r3, r3, #1
 80018b6:	683a      	ldr	r2, [r7, #0]
 80018b8:	429a      	cmp	r2, r3
 80018ba:	d001      	beq.n	80018c0 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 80018bc:	2301      	movs	r3, #1
 80018be:	e034      	b.n	800192a <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f003 0304 	and.w	r3, r3, #4
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d008      	beq.n	80018de <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018cc:	4b1a      	ldr	r3, [pc, #104]	; (8001938 <HAL_RCC_ClockConfig+0x258>)
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	68db      	ldr	r3, [r3, #12]
 80018d8:	4917      	ldr	r1, [pc, #92]	; (8001938 <HAL_RCC_ClockConfig+0x258>)
 80018da:	4313      	orrs	r3, r2
 80018dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f003 0308 	and.w	r3, r3, #8
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d009      	beq.n	80018fe <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018ea:	4b13      	ldr	r3, [pc, #76]	; (8001938 <HAL_RCC_ClockConfig+0x258>)
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	691b      	ldr	r3, [r3, #16]
 80018f6:	00db      	lsls	r3, r3, #3
 80018f8:	490f      	ldr	r1, [pc, #60]	; (8001938 <HAL_RCC_ClockConfig+0x258>)
 80018fa:	4313      	orrs	r3, r2
 80018fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018fe:	f000 f823 	bl	8001948 <HAL_RCC_GetSysClockFreq>
 8001902:	4601      	mov	r1, r0
 8001904:	4b0c      	ldr	r3, [pc, #48]	; (8001938 <HAL_RCC_ClockConfig+0x258>)
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	091b      	lsrs	r3, r3, #4
 800190a:	f003 030f 	and.w	r3, r3, #15
 800190e:	4a0b      	ldr	r2, [pc, #44]	; (800193c <HAL_RCC_ClockConfig+0x25c>)
 8001910:	5cd3      	ldrb	r3, [r2, r3]
 8001912:	fa21 f303 	lsr.w	r3, r1, r3
 8001916:	4a0a      	ldr	r2, [pc, #40]	; (8001940 <HAL_RCC_ClockConfig+0x260>)
 8001918:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800191a:	4b0a      	ldr	r3, [pc, #40]	; (8001944 <HAL_RCC_ClockConfig+0x264>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4618      	mov	r0, r3
 8001920:	f7fe fc44 	bl	80001ac <HAL_InitTick>
 8001924:	4603      	mov	r3, r0
 8001926:	72fb      	strb	r3, [r7, #11]

  return status;
 8001928:	7afb      	ldrb	r3, [r7, #11]
}
 800192a:	4618      	mov	r0, r3
 800192c:	3710      	adds	r7, #16
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	40023c00 	.word	0x40023c00
 8001938:	40023800 	.word	0x40023800
 800193c:	080037f4 	.word	0x080037f4
 8001940:	20000008 	.word	0x20000008
 8001944:	20000000 	.word	0x20000000

08001948 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001948:	b480      	push	{r7}
 800194a:	b087      	sub	sp, #28
 800194c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 800194e:	4b26      	ldr	r3, [pc, #152]	; (80019e8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001950:	689b      	ldr	r3, [r3, #8]
 8001952:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	f003 030c 	and.w	r3, r3, #12
 800195a:	2b08      	cmp	r3, #8
 800195c:	d006      	beq.n	800196c <HAL_RCC_GetSysClockFreq+0x24>
 800195e:	2b0c      	cmp	r3, #12
 8001960:	d007      	beq.n	8001972 <HAL_RCC_GetSysClockFreq+0x2a>
 8001962:	2b04      	cmp	r3, #4
 8001964:	d12c      	bne.n	80019c0 <HAL_RCC_GetSysClockFreq+0x78>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001966:	4b21      	ldr	r3, [pc, #132]	; (80019ec <HAL_RCC_GetSysClockFreq+0xa4>)
 8001968:	613b      	str	r3, [r7, #16]
      break;
 800196a:	e037      	b.n	80019dc <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800196c:	4b20      	ldr	r3, [pc, #128]	; (80019f0 <HAL_RCC_GetSysClockFreq+0xa8>)
 800196e:	613b      	str	r3, [r7, #16]
      break;
 8001970:	e034      	b.n	80019dc <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	0c9b      	lsrs	r3, r3, #18
 8001976:	f003 030f 	and.w	r3, r3, #15
 800197a:	4a1e      	ldr	r2, [pc, #120]	; (80019f4 <HAL_RCC_GetSysClockFreq+0xac>)
 800197c:	5cd3      	ldrb	r3, [r2, r3]
 800197e:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	0d9b      	lsrs	r3, r3, #22
 8001984:	f003 0303 	and.w	r3, r3, #3
 8001988:	3301      	adds	r3, #1
 800198a:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800198c:	4b16      	ldr	r3, [pc, #88]	; (80019e8 <HAL_RCC_GetSysClockFreq+0xa0>)
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001994:	2b00      	cmp	r3, #0
 8001996:	d008      	beq.n	80019aa <HAL_RCC_GetSysClockFreq+0x62>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	4a15      	ldr	r2, [pc, #84]	; (80019f0 <HAL_RCC_GetSysClockFreq+0xa8>)
 800199c:	fb02 f203 	mul.w	r2, r2, r3
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80019a6:	617b      	str	r3, [r7, #20]
 80019a8:	e007      	b.n	80019ba <HAL_RCC_GetSysClockFreq+0x72>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE * pllm) / plld;
 80019aa:	68bb      	ldr	r3, [r7, #8]
 80019ac:	4a0f      	ldr	r2, [pc, #60]	; (80019ec <HAL_RCC_GetSysClockFreq+0xa4>)
 80019ae:	fb02 f203 	mul.w	r2, r2, r3
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80019b8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	613b      	str	r3, [r7, #16]
      break;
 80019be:	e00d      	b.n	80019dc <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80019c0:	4b09      	ldr	r3, [pc, #36]	; (80019e8 <HAL_RCC_GetSysClockFreq+0xa0>)
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	0b5b      	lsrs	r3, r3, #13
 80019c6:	f003 0307 	and.w	r3, r3, #7
 80019ca:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	3301      	adds	r3, #1
 80019d0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80019d4:	fa02 f303 	lsl.w	r3, r2, r3
 80019d8:	613b      	str	r3, [r7, #16]
      break;
 80019da:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019dc:	693b      	ldr	r3, [r7, #16]
}
 80019de:	4618      	mov	r0, r3
 80019e0:	371c      	adds	r7, #28
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bc80      	pop	{r7}
 80019e6:	4770      	bx	lr
 80019e8:	40023800 	.word	0x40023800
 80019ec:	00f42400 	.word	0x00f42400
 80019f0:	016e3600 	.word	0x016e3600
 80019f4:	080037e8 	.word	0x080037e8

080019f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019fc:	4b02      	ldr	r3, [pc, #8]	; (8001a08 <HAL_RCC_GetHCLKFreq+0x10>)
 80019fe:	681b      	ldr	r3, [r3, #0]
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bc80      	pop	{r7}
 8001a06:	4770      	bx	lr
 8001a08:	20000008 	.word	0x20000008

08001a0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001a10:	f7ff fff2 	bl	80019f8 <HAL_RCC_GetHCLKFreq>
 8001a14:	4601      	mov	r1, r0
 8001a16:	4b05      	ldr	r3, [pc, #20]	; (8001a2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	0a1b      	lsrs	r3, r3, #8
 8001a1c:	f003 0307 	and.w	r3, r3, #7
 8001a20:	4a03      	ldr	r2, [pc, #12]	; (8001a30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a22:	5cd3      	ldrb	r3, [r2, r3]
 8001a24:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	40023800 	.word	0x40023800
 8001a30:	08003804 	.word	0x08003804

08001a34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001a38:	f7ff ffde 	bl	80019f8 <HAL_RCC_GetHCLKFreq>
 8001a3c:	4601      	mov	r1, r0
 8001a3e:	4b05      	ldr	r3, [pc, #20]	; (8001a54 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	0adb      	lsrs	r3, r3, #11
 8001a44:	f003 0307 	and.w	r3, r3, #7
 8001a48:	4a03      	ldr	r2, [pc, #12]	; (8001a58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a4a:	5cd3      	ldrb	r3, [r2, r3]
 8001a4c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	40023800 	.word	0x40023800
 8001a58:	08003804 	.word	0x08003804

08001a5c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b087      	sub	sp, #28
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001a64:	2300      	movs	r3, #0
 8001a66:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001a68:	4b29      	ldr	r3, [pc, #164]	; (8001b10 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d12c      	bne.n	8001ace <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001a74:	4b26      	ldr	r3, [pc, #152]	; (8001b10 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d005      	beq.n	8001a8c <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001a80:	4b24      	ldr	r3, [pc, #144]	; (8001b14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8001a88:	617b      	str	r3, [r7, #20]
 8001a8a:	e016      	b.n	8001aba <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a8c:	4b20      	ldr	r3, [pc, #128]	; (8001b10 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a90:	4a1f      	ldr	r2, [pc, #124]	; (8001b10 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001a92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a96:	6253      	str	r3, [r2, #36]	; 0x24
 8001a98:	4b1d      	ldr	r3, [pc, #116]	; (8001b10 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aa0:	60fb      	str	r3, [r7, #12]
 8001aa2:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001aa4:	4b1b      	ldr	r3, [pc, #108]	; (8001b14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8001aac:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8001aae:	4b18      	ldr	r3, [pc, #96]	; (8001b10 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab2:	4a17      	ldr	r2, [pc, #92]	; (8001b10 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001ab4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ab8:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8001ac0:	d105      	bne.n	8001ace <RCC_SetFlashLatencyFromMSIRange+0x72>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8001ac8:	d101      	bne.n	8001ace <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8001aca:	2301      	movs	r3, #1
 8001acc:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d105      	bne.n	8001ae0 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8001ad4:	4b10      	ldr	r3, [pc, #64]	; (8001b18 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a0f      	ldr	r2, [pc, #60]	; (8001b18 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ada:	f043 0304 	orr.w	r3, r3, #4
 8001ade:	6013      	str	r3, [r2, #0]
 8001ae0:	4b0d      	ldr	r3, [pc, #52]	; (8001b18 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f023 0201 	bic.w	r2, r3, #1
 8001ae8:	490b      	ldr	r1, [pc, #44]	; (8001b18 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	4313      	orrs	r3, r2
 8001aee:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001af0:	4b09      	ldr	r3, [pc, #36]	; (8001b18 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f003 0301 	and.w	r3, r3, #1
 8001af8:	693a      	ldr	r2, [r7, #16]
 8001afa:	429a      	cmp	r2, r3
 8001afc:	d001      	beq.n	8001b02 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e000      	b.n	8001b04 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8001b02:	2300      	movs	r3, #0
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	371c      	adds	r7, #28
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bc80      	pop	{r7}
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	40023800 	.word	0x40023800
 8001b14:	40007000 	.word	0x40007000
 8001b18:	40023c00 	.word	0x40023c00

08001b1c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d101      	bne.n	8001b2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e03f      	b.n	8001bae <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d106      	bne.n	8001b48 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001b42:	6878      	ldr	r0, [r7, #4]
 8001b44:	f000 fd60 	bl	8002608 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2224      	movs	r2, #36	; 0x24
 8001b4c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	68da      	ldr	r2, [r3, #12]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001b5e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001b60:	6878      	ldr	r0, [r7, #4]
 8001b62:	f000 f9b1 	bl	8001ec8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	691a      	ldr	r2, [r3, #16]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001b74:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	695a      	ldr	r2, [r3, #20]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001b84:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	68da      	ldr	r2, [r3, #12]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001b94:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2200      	movs	r2, #0
 8001b9a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2220      	movs	r2, #32
 8001ba0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2220      	movs	r2, #32
 8001ba8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001bac:	2300      	movs	r3, #0
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3708      	adds	r7, #8
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}

08001bb6 <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001bb6:	b580      	push	{r7, lr}
 8001bb8:	b088      	sub	sp, #32
 8001bba:	af02      	add	r7, sp, #8
 8001bbc:	60f8      	str	r0, [r7, #12]
 8001bbe:	60b9      	str	r1, [r7, #8]
 8001bc0:	603b      	str	r3, [r7, #0]
 8001bc2:	4613      	mov	r3, r2
 8001bc4:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001bd0:	b2db      	uxtb	r3, r3
 8001bd2:	2b20      	cmp	r3, #32
 8001bd4:	f040 8083 	bne.w	8001cde <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d002      	beq.n	8001be4 <HAL_UART_Transmit+0x2e>
 8001bde:	88fb      	ldrh	r3, [r7, #6]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d101      	bne.n	8001be8 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	e07b      	b.n	8001ce0 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d101      	bne.n	8001bf6 <HAL_UART_Transmit+0x40>
 8001bf2:	2302      	movs	r3, #2
 8001bf4:	e074      	b.n	8001ce0 <HAL_UART_Transmit+0x12a>
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	2200      	movs	r2, #0
 8001c02:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	2221      	movs	r2, #33	; 0x21
 8001c08:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001c0c:	f7fe fb1a 	bl	8000244 <HAL_GetTick>
 8001c10:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	88fa      	ldrh	r2, [r7, #6]
 8001c16:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	88fa      	ldrh	r2, [r7, #6]
 8001c1c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001c1e:	e042      	b.n	8001ca6 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001c24:	b29b      	uxth	r3, r3
 8001c26:	3b01      	subs	r3, #1
 8001c28:	b29a      	uxth	r2, r3
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c36:	d122      	bne.n	8001c7e <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	9300      	str	r3, [sp, #0]
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	2200      	movs	r2, #0
 8001c40:	2180      	movs	r1, #128	; 0x80
 8001c42:	68f8      	ldr	r0, [r7, #12]
 8001c44:	f000 f8f6 	bl	8001e34 <UART_WaitOnFlagUntilTimeout>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d001      	beq.n	8001c52 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	e046      	b.n	8001ce0 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	881b      	ldrh	r3, [r3, #0]
 8001c5a:	461a      	mov	r2, r3
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001c64:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	691b      	ldr	r3, [r3, #16]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d103      	bne.n	8001c76 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8001c6e:	68bb      	ldr	r3, [r7, #8]
 8001c70:	3302      	adds	r3, #2
 8001c72:	60bb      	str	r3, [r7, #8]
 8001c74:	e017      	b.n	8001ca6 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8001c76:	68bb      	ldr	r3, [r7, #8]
 8001c78:	3301      	adds	r3, #1
 8001c7a:	60bb      	str	r3, [r7, #8]
 8001c7c:	e013      	b.n	8001ca6 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	9300      	str	r3, [sp, #0]
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	2200      	movs	r2, #0
 8001c86:	2180      	movs	r1, #128	; 0x80
 8001c88:	68f8      	ldr	r0, [r7, #12]
 8001c8a:	f000 f8d3 	bl	8001e34 <UART_WaitOnFlagUntilTimeout>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d001      	beq.n	8001c98 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8001c94:	2303      	movs	r3, #3
 8001c96:	e023      	b.n	8001ce0 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	1c5a      	adds	r2, r3, #1
 8001c9c:	60ba      	str	r2, [r7, #8]
 8001c9e:	781a      	ldrb	r2, [r3, #0]
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001caa:	b29b      	uxth	r3, r3
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d1b7      	bne.n	8001c20 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	9300      	str	r3, [sp, #0]
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	2140      	movs	r1, #64	; 0x40
 8001cba:	68f8      	ldr	r0, [r7, #12]
 8001cbc:	f000 f8ba 	bl	8001e34 <UART_WaitOnFlagUntilTimeout>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d001      	beq.n	8001cca <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8001cc6:	2303      	movs	r3, #3
 8001cc8:	e00a      	b.n	8001ce0 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	2220      	movs	r2, #32
 8001cce:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	e000      	b.n	8001ce0 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8001cde:	2302      	movs	r3, #2
  }
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3718      	adds	r7, #24
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}

08001ce8 <HAL_UART_Receive>:
  * @param  Size Amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b088      	sub	sp, #32
 8001cec:	af02      	add	r7, sp, #8
 8001cee:	60f8      	str	r0, [r7, #12]
 8001cf0:	60b9      	str	r1, [r7, #8]
 8001cf2:	603b      	str	r3, [r7, #0]
 8001cf4:	4613      	mov	r3, r2
 8001cf6:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001d02:	b2db      	uxtb	r3, r3
 8001d04:	2b20      	cmp	r3, #32
 8001d06:	f040 8090 	bne.w	8001e2a <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d002      	beq.n	8001d16 <HAL_UART_Receive+0x2e>
 8001d10:	88fb      	ldrh	r3, [r7, #6]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d101      	bne.n	8001d1a <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e088      	b.n	8001e2c <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	d101      	bne.n	8001d28 <HAL_UART_Receive+0x40>
 8001d24:	2302      	movs	r3, #2
 8001d26:	e081      	b.n	8001e2c <HAL_UART_Receive+0x144>
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	2200      	movs	r2, #0
 8001d34:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	2222      	movs	r2, #34	; 0x22
 8001d3a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001d3e:	f7fe fa81 	bl	8000244 <HAL_GetTick>
 8001d42:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	88fa      	ldrh	r2, [r7, #6]
 8001d48:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	88fa      	ldrh	r2, [r7, #6]
 8001d4e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8001d50:	e05c      	b.n	8001e0c <HAL_UART_Receive+0x124>
    {
      huart->RxXferCount--;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001d56:	b29b      	uxth	r3, r3
 8001d58:	3b01      	subs	r3, #1
 8001d5a:	b29a      	uxth	r2, r3
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d68:	d12b      	bne.n	8001dc2 <HAL_UART_Receive+0xda>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	9300      	str	r3, [sp, #0]
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	2200      	movs	r2, #0
 8001d72:	2120      	movs	r1, #32
 8001d74:	68f8      	ldr	r0, [r7, #12]
 8001d76:	f000 f85d 	bl	8001e34 <UART_WaitOnFlagUntilTimeout>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d001      	beq.n	8001d84 <HAL_UART_Receive+0x9c>
        {
          return HAL_TIMEOUT;
 8001d80:	2303      	movs	r3, #3
 8001d82:	e053      	b.n	8001e2c <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	691b      	ldr	r3, [r3, #16]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d10c      	bne.n	8001daa <HAL_UART_Receive+0xc2>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	b29b      	uxth	r3, r3
 8001d98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d9c:	b29a      	uxth	r2, r3
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	3302      	adds	r3, #2
 8001da6:	60bb      	str	r3, [r7, #8]
 8001da8:	e030      	b.n	8001e0c <HAL_UART_Receive+0x124>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	b29b      	uxth	r3, r3
 8001db2:	b2db      	uxtb	r3, r3
 8001db4:	b29a      	uxth	r2, r3
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	3301      	adds	r3, #1
 8001dbe:	60bb      	str	r3, [r7, #8]
 8001dc0:	e024      	b.n	8001e0c <HAL_UART_Receive+0x124>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	9300      	str	r3, [sp, #0]
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	2120      	movs	r1, #32
 8001dcc:	68f8      	ldr	r0, [r7, #12]
 8001dce:	f000 f831 	bl	8001e34 <UART_WaitOnFlagUntilTimeout>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d001      	beq.n	8001ddc <HAL_UART_Receive+0xf4>
        {
          return HAL_TIMEOUT;
 8001dd8:	2303      	movs	r3, #3
 8001dda:	e027      	b.n	8001e2c <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	691b      	ldr	r3, [r3, #16]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d108      	bne.n	8001df6 <HAL_UART_Receive+0x10e>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	6859      	ldr	r1, [r3, #4]
 8001dea:	68bb      	ldr	r3, [r7, #8]
 8001dec:	1c5a      	adds	r2, r3, #1
 8001dee:	60ba      	str	r2, [r7, #8]
 8001df0:	b2ca      	uxtb	r2, r1
 8001df2:	701a      	strb	r2, [r3, #0]
 8001df4:	e00a      	b.n	8001e0c <HAL_UART_Receive+0x124>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	b2da      	uxtb	r2, r3
 8001dfe:	68bb      	ldr	r3, [r7, #8]
 8001e00:	1c59      	adds	r1, r3, #1
 8001e02:	60b9      	str	r1, [r7, #8]
 8001e04:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001e08:	b2d2      	uxtb	r2, r2
 8001e0a:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001e10:	b29b      	uxth	r3, r3
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d19d      	bne.n	8001d52 <HAL_UART_Receive+0x6a>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	2220      	movs	r2, #32
 8001e1a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	2200      	movs	r2, #0
 8001e22:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8001e26:	2300      	movs	r3, #0
 8001e28:	e000      	b.n	8001e2c <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8001e2a:	2302      	movs	r3, #2
  }
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	3718      	adds	r7, #24
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}

08001e34 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b084      	sub	sp, #16
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	60f8      	str	r0, [r7, #12]
 8001e3c:	60b9      	str	r1, [r7, #8]
 8001e3e:	603b      	str	r3, [r7, #0]
 8001e40:	4613      	mov	r3, r2
 8001e42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001e44:	e02c      	b.n	8001ea0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e46:	69bb      	ldr	r3, [r7, #24]
 8001e48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001e4c:	d028      	beq.n	8001ea0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001e4e:	69bb      	ldr	r3, [r7, #24]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d007      	beq.n	8001e64 <UART_WaitOnFlagUntilTimeout+0x30>
 8001e54:	f7fe f9f6 	bl	8000244 <HAL_GetTick>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	69ba      	ldr	r2, [r7, #24]
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d21d      	bcs.n	8001ea0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	68da      	ldr	r2, [r3, #12]
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001e72:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	695a      	ldr	r2, [r3, #20]
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f022 0201 	bic.w	r2, r2, #1
 8001e82:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	2220      	movs	r2, #32
 8001e88:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	2220      	movs	r2, #32
 8001e90:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	2200      	movs	r2, #0
 8001e98:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8001e9c:	2303      	movs	r3, #3
 8001e9e:	e00f      	b.n	8001ec0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	68ba      	ldr	r2, [r7, #8]
 8001eac:	429a      	cmp	r2, r3
 8001eae:	bf0c      	ite	eq
 8001eb0:	2301      	moveq	r3, #1
 8001eb2:	2300      	movne	r3, #0
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	461a      	mov	r2, r3
 8001eb8:	79fb      	ldrb	r3, [r7, #7]
 8001eba:	429a      	cmp	r2, r3
 8001ebc:	d0c3      	beq.n	8001e46 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001ebe:	2300      	movs	r3, #0
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3710      	adds	r7, #16
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}

08001ec8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b084      	sub	sp, #16
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	691b      	ldr	r3, [r3, #16]
 8001ed6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	68da      	ldr	r2, [r3, #12]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	430a      	orrs	r2, r1
 8001ee4:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	689a      	ldr	r2, [r3, #8]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	691b      	ldr	r3, [r3, #16]
 8001eee:	431a      	orrs	r2, r3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	695b      	ldr	r3, [r3, #20]
 8001ef4:	431a      	orrs	r2, r3
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	69db      	ldr	r3, [r3, #28]
 8001efa:	4313      	orrs	r3, r2
 8001efc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8001f08:	f023 030c 	bic.w	r3, r3, #12
 8001f0c:	687a      	ldr	r2, [r7, #4]
 8001f0e:	6812      	ldr	r2, [r2, #0]
 8001f10:	68f9      	ldr	r1, [r7, #12]
 8001f12:	430b      	orrs	r3, r1
 8001f14:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	695b      	ldr	r3, [r3, #20]
 8001f1c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	699a      	ldr	r2, [r3, #24]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	430a      	orrs	r2, r1
 8001f2a:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	69db      	ldr	r3, [r3, #28]
 8001f30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f34:	f040 80a5 	bne.w	8002082 <UART_SetConfig+0x1ba>
  {
    /*------- UART-associated USART registers setting : BRR Configuration ------*/
    if((huart->Instance == USART1))
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4aa4      	ldr	r2, [pc, #656]	; (80021d0 <UART_SetConfig+0x308>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d14f      	bne.n	8001fe2 <UART_SetConfig+0x11a>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001f42:	f7ff fd77 	bl	8001a34 <HAL_RCC_GetPCLK2Freq>
 8001f46:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001f48:	68ba      	ldr	r2, [r7, #8]
 8001f4a:	4613      	mov	r3, r2
 8001f4c:	009b      	lsls	r3, r3, #2
 8001f4e:	4413      	add	r3, r2
 8001f50:	009a      	lsls	r2, r3, #2
 8001f52:	441a      	add	r2, r3
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	005b      	lsls	r3, r3, #1
 8001f5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f5e:	4a9d      	ldr	r2, [pc, #628]	; (80021d4 <UART_SetConfig+0x30c>)
 8001f60:	fba2 2303 	umull	r2, r3, r2, r3
 8001f64:	095b      	lsrs	r3, r3, #5
 8001f66:	0119      	lsls	r1, r3, #4
 8001f68:	68ba      	ldr	r2, [r7, #8]
 8001f6a:	4613      	mov	r3, r2
 8001f6c:	009b      	lsls	r3, r3, #2
 8001f6e:	4413      	add	r3, r2
 8001f70:	009a      	lsls	r2, r3, #2
 8001f72:	441a      	add	r2, r3
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	005b      	lsls	r3, r3, #1
 8001f7a:	fbb2 f2f3 	udiv	r2, r2, r3
 8001f7e:	4b95      	ldr	r3, [pc, #596]	; (80021d4 <UART_SetConfig+0x30c>)
 8001f80:	fba3 0302 	umull	r0, r3, r3, r2
 8001f84:	095b      	lsrs	r3, r3, #5
 8001f86:	2064      	movs	r0, #100	; 0x64
 8001f88:	fb00 f303 	mul.w	r3, r0, r3
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	00db      	lsls	r3, r3, #3
 8001f90:	3332      	adds	r3, #50	; 0x32
 8001f92:	4a90      	ldr	r2, [pc, #576]	; (80021d4 <UART_SetConfig+0x30c>)
 8001f94:	fba2 2303 	umull	r2, r3, r2, r3
 8001f98:	095b      	lsrs	r3, r3, #5
 8001f9a:	005b      	lsls	r3, r3, #1
 8001f9c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001fa0:	4419      	add	r1, r3
 8001fa2:	68ba      	ldr	r2, [r7, #8]
 8001fa4:	4613      	mov	r3, r2
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	4413      	add	r3, r2
 8001faa:	009a      	lsls	r2, r3, #2
 8001fac:	441a      	add	r2, r3
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	005b      	lsls	r3, r3, #1
 8001fb4:	fbb2 f2f3 	udiv	r2, r2, r3
 8001fb8:	4b86      	ldr	r3, [pc, #536]	; (80021d4 <UART_SetConfig+0x30c>)
 8001fba:	fba3 0302 	umull	r0, r3, r3, r2
 8001fbe:	095b      	lsrs	r3, r3, #5
 8001fc0:	2064      	movs	r0, #100	; 0x64
 8001fc2:	fb00 f303 	mul.w	r3, r0, r3
 8001fc6:	1ad3      	subs	r3, r2, r3
 8001fc8:	00db      	lsls	r3, r3, #3
 8001fca:	3332      	adds	r3, #50	; 0x32
 8001fcc:	4a81      	ldr	r2, [pc, #516]	; (80021d4 <UART_SetConfig+0x30c>)
 8001fce:	fba2 2303 	umull	r2, r3, r2, r3
 8001fd2:	095b      	lsrs	r3, r3, #5
 8001fd4:	f003 0207 	and.w	r2, r3, #7
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	440a      	add	r2, r1
 8001fde:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8001fe0:	e0f1      	b.n	80021c6 <UART_SetConfig+0x2fe>
      pclk = HAL_RCC_GetPCLK1Freq();
 8001fe2:	f7ff fd13 	bl	8001a0c <HAL_RCC_GetPCLK1Freq>
 8001fe6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001fe8:	68ba      	ldr	r2, [r7, #8]
 8001fea:	4613      	mov	r3, r2
 8001fec:	009b      	lsls	r3, r3, #2
 8001fee:	4413      	add	r3, r2
 8001ff0:	009a      	lsls	r2, r3, #2
 8001ff2:	441a      	add	r2, r3
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	005b      	lsls	r3, r3, #1
 8001ffa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ffe:	4a75      	ldr	r2, [pc, #468]	; (80021d4 <UART_SetConfig+0x30c>)
 8002000:	fba2 2303 	umull	r2, r3, r2, r3
 8002004:	095b      	lsrs	r3, r3, #5
 8002006:	0119      	lsls	r1, r3, #4
 8002008:	68ba      	ldr	r2, [r7, #8]
 800200a:	4613      	mov	r3, r2
 800200c:	009b      	lsls	r3, r3, #2
 800200e:	4413      	add	r3, r2
 8002010:	009a      	lsls	r2, r3, #2
 8002012:	441a      	add	r2, r3
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	005b      	lsls	r3, r3, #1
 800201a:	fbb2 f2f3 	udiv	r2, r2, r3
 800201e:	4b6d      	ldr	r3, [pc, #436]	; (80021d4 <UART_SetConfig+0x30c>)
 8002020:	fba3 0302 	umull	r0, r3, r3, r2
 8002024:	095b      	lsrs	r3, r3, #5
 8002026:	2064      	movs	r0, #100	; 0x64
 8002028:	fb00 f303 	mul.w	r3, r0, r3
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	00db      	lsls	r3, r3, #3
 8002030:	3332      	adds	r3, #50	; 0x32
 8002032:	4a68      	ldr	r2, [pc, #416]	; (80021d4 <UART_SetConfig+0x30c>)
 8002034:	fba2 2303 	umull	r2, r3, r2, r3
 8002038:	095b      	lsrs	r3, r3, #5
 800203a:	005b      	lsls	r3, r3, #1
 800203c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002040:	4419      	add	r1, r3
 8002042:	68ba      	ldr	r2, [r7, #8]
 8002044:	4613      	mov	r3, r2
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	4413      	add	r3, r2
 800204a:	009a      	lsls	r2, r3, #2
 800204c:	441a      	add	r2, r3
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	005b      	lsls	r3, r3, #1
 8002054:	fbb2 f2f3 	udiv	r2, r2, r3
 8002058:	4b5e      	ldr	r3, [pc, #376]	; (80021d4 <UART_SetConfig+0x30c>)
 800205a:	fba3 0302 	umull	r0, r3, r3, r2
 800205e:	095b      	lsrs	r3, r3, #5
 8002060:	2064      	movs	r0, #100	; 0x64
 8002062:	fb00 f303 	mul.w	r3, r0, r3
 8002066:	1ad3      	subs	r3, r2, r3
 8002068:	00db      	lsls	r3, r3, #3
 800206a:	3332      	adds	r3, #50	; 0x32
 800206c:	4a59      	ldr	r2, [pc, #356]	; (80021d4 <UART_SetConfig+0x30c>)
 800206e:	fba2 2303 	umull	r2, r3, r2, r3
 8002072:	095b      	lsrs	r3, r3, #5
 8002074:	f003 0207 	and.w	r2, r3, #7
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	440a      	add	r2, r1
 800207e:	609a      	str	r2, [r3, #8]
}
 8002080:	e0a1      	b.n	80021c6 <UART_SetConfig+0x2fe>
    if((huart->Instance == USART1))
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a52      	ldr	r2, [pc, #328]	; (80021d0 <UART_SetConfig+0x308>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d14e      	bne.n	800212a <UART_SetConfig+0x262>
      pclk = HAL_RCC_GetPCLK2Freq();
 800208c:	f7ff fcd2 	bl	8001a34 <HAL_RCC_GetPCLK2Freq>
 8002090:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002092:	68ba      	ldr	r2, [r7, #8]
 8002094:	4613      	mov	r3, r2
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	4413      	add	r3, r2
 800209a:	009a      	lsls	r2, r3, #2
 800209c:	441a      	add	r2, r3
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	009b      	lsls	r3, r3, #2
 80020a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80020a8:	4a4a      	ldr	r2, [pc, #296]	; (80021d4 <UART_SetConfig+0x30c>)
 80020aa:	fba2 2303 	umull	r2, r3, r2, r3
 80020ae:	095b      	lsrs	r3, r3, #5
 80020b0:	0119      	lsls	r1, r3, #4
 80020b2:	68ba      	ldr	r2, [r7, #8]
 80020b4:	4613      	mov	r3, r2
 80020b6:	009b      	lsls	r3, r3, #2
 80020b8:	4413      	add	r3, r2
 80020ba:	009a      	lsls	r2, r3, #2
 80020bc:	441a      	add	r2, r3
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80020c8:	4b42      	ldr	r3, [pc, #264]	; (80021d4 <UART_SetConfig+0x30c>)
 80020ca:	fba3 0302 	umull	r0, r3, r3, r2
 80020ce:	095b      	lsrs	r3, r3, #5
 80020d0:	2064      	movs	r0, #100	; 0x64
 80020d2:	fb00 f303 	mul.w	r3, r0, r3
 80020d6:	1ad3      	subs	r3, r2, r3
 80020d8:	011b      	lsls	r3, r3, #4
 80020da:	3332      	adds	r3, #50	; 0x32
 80020dc:	4a3d      	ldr	r2, [pc, #244]	; (80021d4 <UART_SetConfig+0x30c>)
 80020de:	fba2 2303 	umull	r2, r3, r2, r3
 80020e2:	095b      	lsrs	r3, r3, #5
 80020e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020e8:	4419      	add	r1, r3
 80020ea:	68ba      	ldr	r2, [r7, #8]
 80020ec:	4613      	mov	r3, r2
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	4413      	add	r3, r2
 80020f2:	009a      	lsls	r2, r3, #2
 80020f4:	441a      	add	r2, r3
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8002100:	4b34      	ldr	r3, [pc, #208]	; (80021d4 <UART_SetConfig+0x30c>)
 8002102:	fba3 0302 	umull	r0, r3, r3, r2
 8002106:	095b      	lsrs	r3, r3, #5
 8002108:	2064      	movs	r0, #100	; 0x64
 800210a:	fb00 f303 	mul.w	r3, r0, r3
 800210e:	1ad3      	subs	r3, r2, r3
 8002110:	011b      	lsls	r3, r3, #4
 8002112:	3332      	adds	r3, #50	; 0x32
 8002114:	4a2f      	ldr	r2, [pc, #188]	; (80021d4 <UART_SetConfig+0x30c>)
 8002116:	fba2 2303 	umull	r2, r3, r2, r3
 800211a:	095b      	lsrs	r3, r3, #5
 800211c:	f003 020f 	and.w	r2, r3, #15
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	440a      	add	r2, r1
 8002126:	609a      	str	r2, [r3, #8]
}
 8002128:	e04d      	b.n	80021c6 <UART_SetConfig+0x2fe>
      pclk = HAL_RCC_GetPCLK1Freq();
 800212a:	f7ff fc6f 	bl	8001a0c <HAL_RCC_GetPCLK1Freq>
 800212e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002130:	68ba      	ldr	r2, [r7, #8]
 8002132:	4613      	mov	r3, r2
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	4413      	add	r3, r2
 8002138:	009a      	lsls	r2, r3, #2
 800213a:	441a      	add	r2, r3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	009b      	lsls	r3, r3, #2
 8002142:	fbb2 f3f3 	udiv	r3, r2, r3
 8002146:	4a23      	ldr	r2, [pc, #140]	; (80021d4 <UART_SetConfig+0x30c>)
 8002148:	fba2 2303 	umull	r2, r3, r2, r3
 800214c:	095b      	lsrs	r3, r3, #5
 800214e:	0119      	lsls	r1, r3, #4
 8002150:	68ba      	ldr	r2, [r7, #8]
 8002152:	4613      	mov	r3, r2
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	4413      	add	r3, r2
 8002158:	009a      	lsls	r2, r3, #2
 800215a:	441a      	add	r2, r3
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	009b      	lsls	r3, r3, #2
 8002162:	fbb2 f2f3 	udiv	r2, r2, r3
 8002166:	4b1b      	ldr	r3, [pc, #108]	; (80021d4 <UART_SetConfig+0x30c>)
 8002168:	fba3 0302 	umull	r0, r3, r3, r2
 800216c:	095b      	lsrs	r3, r3, #5
 800216e:	2064      	movs	r0, #100	; 0x64
 8002170:	fb00 f303 	mul.w	r3, r0, r3
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	011b      	lsls	r3, r3, #4
 8002178:	3332      	adds	r3, #50	; 0x32
 800217a:	4a16      	ldr	r2, [pc, #88]	; (80021d4 <UART_SetConfig+0x30c>)
 800217c:	fba2 2303 	umull	r2, r3, r2, r3
 8002180:	095b      	lsrs	r3, r3, #5
 8002182:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002186:	4419      	add	r1, r3
 8002188:	68ba      	ldr	r2, [r7, #8]
 800218a:	4613      	mov	r3, r2
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	4413      	add	r3, r2
 8002190:	009a      	lsls	r2, r3, #2
 8002192:	441a      	add	r2, r3
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	fbb2 f2f3 	udiv	r2, r2, r3
 800219e:	4b0d      	ldr	r3, [pc, #52]	; (80021d4 <UART_SetConfig+0x30c>)
 80021a0:	fba3 0302 	umull	r0, r3, r3, r2
 80021a4:	095b      	lsrs	r3, r3, #5
 80021a6:	2064      	movs	r0, #100	; 0x64
 80021a8:	fb00 f303 	mul.w	r3, r0, r3
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	011b      	lsls	r3, r3, #4
 80021b0:	3332      	adds	r3, #50	; 0x32
 80021b2:	4a08      	ldr	r2, [pc, #32]	; (80021d4 <UART_SetConfig+0x30c>)
 80021b4:	fba2 2303 	umull	r2, r3, r2, r3
 80021b8:	095b      	lsrs	r3, r3, #5
 80021ba:	f003 020f 	and.w	r2, r3, #15
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	440a      	add	r2, r1
 80021c4:	609a      	str	r2, [r3, #8]
}
 80021c6:	bf00      	nop
 80021c8:	3710      	adds	r7, #16
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	40013800 	.word	0x40013800
 80021d4:	51eb851f 	.word	0x51eb851f

080021d8 <__io_putchar>:
#endif


/* USER CODE BEGIN 0 */
PUTCHAR_PROTOTYPE
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 80021e0:	1d39      	adds	r1, r7, #4
 80021e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80021e6:	2201      	movs	r2, #1
 80021e8:	4803      	ldr	r0, [pc, #12]	; (80021f8 <__io_putchar+0x20>)
 80021ea:	f7ff fce4 	bl	8001bb6 <HAL_UART_Transmit>
	return ch;
 80021ee:	687b      	ldr	r3, [r7, #4]
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	3708      	adds	r7, #8
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	200000a0 	.word	0x200000a0

080021fc <__io_getchar>:

GETCHAR_PROTOTYPE
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b082      	sub	sp, #8
 8002200:	af00      	add	r7, sp, #0
	char ch;
	HAL_UART_Receive(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8002202:	1df9      	adds	r1, r7, #7
 8002204:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002208:	2201      	movs	r2, #1
 800220a:	4804      	ldr	r0, [pc, #16]	; (800221c <__io_getchar+0x20>)
 800220c:	f7ff fd6c 	bl	8001ce8 <HAL_UART_Receive>

	return ch;
 8002210:	79fb      	ldrb	r3, [r7, #7]
}
 8002212:	4618      	mov	r0, r3
 8002214:	3708      	adds	r7, #8
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	200000a0 	.word	0x200000a0

08002220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b084      	sub	sp, #16
 8002224:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002226:	f7fd ffa9 	bl	800017c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800222a:	f000 f849 	bl	80022c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800222e:	f000 f939 	bl	80024a4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002232:	f000 f90d 	bl	8002450 <MX_USART2_UART_Init>
  MX_ADC_Init();
 8002236:	f000 f891 	bl	800235c <MX_ADC_Init>
  /* USER CODE BEGIN 2 */
  uint8_t *base_address = (uint8_t *)0x20000000;
 800223a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800223e:	60fb      	str	r3, [r7, #12]
  uint16_t *temp_p = (uint16_t *)0x1FF800FA;
 8002240:	4b1a      	ldr	r3, [pc, #104]	; (80022ac <main+0x8c>)
 8002242:	603b      	str	r3, [r7, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
      if(send_en) {
 8002244:	4b1a      	ldr	r3, [pc, #104]	; (80022b0 <main+0x90>)
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d0fb      	beq.n	8002244 <main+0x24>
	  for(int e = 0; e < 16; ++e) {
 800224c:	2300      	movs	r3, #0
 800224e:	60bb      	str	r3, [r7, #8]
 8002250:	e025      	b.n	800229e <main+0x7e>
	      //memcpy(mem_buffer, base_address, CHUNK_SIZE);
	      printf("%p\n", (void *)base_address);
 8002252:	68f9      	ldr	r1, [r7, #12]
 8002254:	4817      	ldr	r0, [pc, #92]	; (80022b4 <main+0x94>)
 8002256:	f000 fb7b 	bl	8002950 <iprintf>
	      printf("%hu\n", (uint16_t)*temp_p);
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	881b      	ldrh	r3, [r3, #0]
 800225e:	4619      	mov	r1, r3
 8002260:	4815      	ldr	r0, [pc, #84]	; (80022b8 <main+0x98>)
 8002262:	f000 fb75 	bl	8002950 <iprintf>

	      for(int c = 0; c < CHUNK_SIZE; ++c)
 8002266:	2300      	movs	r3, #0
 8002268:	607b      	str	r3, [r7, #4]
 800226a:	e00a      	b.n	8002282 <main+0x62>
		printf("%u ", *(base_address + c));
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	68fa      	ldr	r2, [r7, #12]
 8002270:	4413      	add	r3, r2
 8002272:	781b      	ldrb	r3, [r3, #0]
 8002274:	4619      	mov	r1, r3
 8002276:	4811      	ldr	r0, [pc, #68]	; (80022bc <main+0x9c>)
 8002278:	f000 fb6a 	bl	8002950 <iprintf>
	      for(int c = 0; c < CHUNK_SIZE; ++c)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	3301      	adds	r3, #1
 8002280:	607b      	str	r3, [r7, #4]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002288:	dbf0      	blt.n	800226c <main+0x4c>
	      printf("\n");
 800228a:	200a      	movs	r0, #10
 800228c:	f000 fb78 	bl	8002980 <putchar>

	      base_address += CHUNK_SIZE;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002296:	60fb      	str	r3, [r7, #12]
	  for(int e = 0; e < 16; ++e) {
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	3301      	adds	r3, #1
 800229c:	60bb      	str	r3, [r7, #8]
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	2b0f      	cmp	r3, #15
 80022a2:	ddd6      	ble.n	8002252 <main+0x32>

	  }
	  send_en = 0;
 80022a4:	4b02      	ldr	r3, [pc, #8]	; (80022b0 <main+0x90>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	701a      	strb	r2, [r3, #0]
      if(send_en) {
 80022aa:	e7cb      	b.n	8002244 <main+0x24>
 80022ac:	1ff800fa 	.word	0x1ff800fa
 80022b0:	2000008c 	.word	0x2000008c
 80022b4:	080037d8 	.word	0x080037d8
 80022b8:	080037dc 	.word	0x080037dc
 80022bc:	080037e4 	.word	0x080037e4

080022c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b092      	sub	sp, #72	; 0x48
 80022c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80022c6:	f107 0314 	add.w	r3, r7, #20
 80022ca:	2234      	movs	r2, #52	; 0x34
 80022cc:	2100      	movs	r1, #0
 80022ce:	4618      	mov	r0, r3
 80022d0:	f000 fb36 	bl	8002940 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80022d4:	463b      	mov	r3, r7
 80022d6:	2200      	movs	r2, #0
 80022d8:	601a      	str	r2, [r3, #0]
 80022da:	605a      	str	r2, [r3, #4]
 80022dc:	609a      	str	r2, [r3, #8]
 80022de:	60da      	str	r2, [r3, #12]
 80022e0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80022e2:	4b1d      	ldr	r3, [pc, #116]	; (8002358 <SystemClock_Config+0x98>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 80022ea:	4a1b      	ldr	r2, [pc, #108]	; (8002358 <SystemClock_Config+0x98>)
 80022ec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80022f0:	6013      	str	r3, [r2, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80022f2:	2302      	movs	r3, #2
 80022f4:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80022f6:	2301      	movs	r3, #1
 80022f8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80022fa:	2310      	movs	r3, #16
 80022fc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80022fe:	2302      	movs	r3, #2
 8002300:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002302:	2300      	movs	r3, #0
 8002304:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8002306:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800230a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 800230c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8002310:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002312:	f107 0314 	add.w	r3, r7, #20
 8002316:	4618      	mov	r0, r3
 8002318:	f7fe feb2 	bl	8001080 <HAL_RCC_OscConfig>
 800231c:	4603      	mov	r3, r0
 800231e:	2b00      	cmp	r3, #0
 8002320:	d001      	beq.n	8002326 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8002322:	f000 f91f 	bl	8002564 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002326:	230f      	movs	r3, #15
 8002328:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800232a:	2303      	movs	r3, #3
 800232c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800232e:	2300      	movs	r3, #0
 8002330:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002332:	2300      	movs	r3, #0
 8002334:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002336:	2300      	movs	r3, #0
 8002338:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800233a:	463b      	mov	r3, r7
 800233c:	2101      	movs	r1, #1
 800233e:	4618      	mov	r0, r3
 8002340:	f7ff f9ce 	bl	80016e0 <HAL_RCC_ClockConfig>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d001      	beq.n	800234e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800234a:	f000 f90b 	bl	8002564 <Error_Handler>
  }
}
 800234e:	bf00      	nop
 8002350:	3748      	adds	r7, #72	; 0x48
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	40007000 	.word	0x40007000

0800235c <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b08c      	sub	sp, #48	; 0x30
 8002360:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002362:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002366:	2200      	movs	r2, #0
 8002368:	601a      	str	r2, [r3, #0]
 800236a:	605a      	str	r2, [r3, #4]
 800236c:	609a      	str	r2, [r3, #8]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 800236e:	1d3b      	adds	r3, r7, #4
 8002370:	2220      	movs	r2, #32
 8002372:	2100      	movs	r1, #0
 8002374:	4618      	mov	r0, r3
 8002376:	f000 fae3 	bl	8002940 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc.Instance = ADC1;
 800237a:	4b33      	ldr	r3, [pc, #204]	; (8002448 <MX_ADC_Init+0xec>)
 800237c:	4a33      	ldr	r2, [pc, #204]	; (800244c <MX_ADC_Init+0xf0>)
 800237e:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002380:	4b31      	ldr	r3, [pc, #196]	; (8002448 <MX_ADC_Init+0xec>)
 8002382:	2200      	movs	r2, #0
 8002384:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8002386:	4b30      	ldr	r3, [pc, #192]	; (8002448 <MX_ADC_Init+0xec>)
 8002388:	2200      	movs	r2, #0
 800238a:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800238c:	4b2e      	ldr	r3, [pc, #184]	; (8002448 <MX_ADC_Init+0xec>)
 800238e:	2200      	movs	r2, #0
 8002390:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002392:	4b2d      	ldr	r3, [pc, #180]	; (8002448 <MX_ADC_Init+0xec>)
 8002394:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002398:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800239a:	4b2b      	ldr	r3, [pc, #172]	; (8002448 <MX_ADC_Init+0xec>)
 800239c:	2200      	movs	r2, #0
 800239e:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 80023a0:	4b29      	ldr	r3, [pc, #164]	; (8002448 <MX_ADC_Init+0xec>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 80023a6:	4b28      	ldr	r3, [pc, #160]	; (8002448 <MX_ADC_Init+0xec>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	61da      	str	r2, [r3, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 80023ac:	4b26      	ldr	r3, [pc, #152]	; (8002448 <MX_ADC_Init+0xec>)
 80023ae:	2200      	movs	r2, #0
 80023b0:	621a      	str	r2, [r3, #32]
  hadc.Init.ContinuousConvMode = ENABLE;
 80023b2:	4b25      	ldr	r3, [pc, #148]	; (8002448 <MX_ADC_Init+0xec>)
 80023b4:	2201      	movs	r2, #1
 80023b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc.Init.NbrOfConversion = 1;
 80023ba:	4b23      	ldr	r3, [pc, #140]	; (8002448 <MX_ADC_Init+0xec>)
 80023bc:	2201      	movs	r2, #1
 80023be:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80023c0:	4b21      	ldr	r3, [pc, #132]	; (8002448 <MX_ADC_Init+0xec>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80023c8:	4b1f      	ldr	r3, [pc, #124]	; (8002448 <MX_ADC_Init+0xec>)
 80023ca:	2210      	movs	r2, #16
 80023cc:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80023ce:	4b1e      	ldr	r3, [pc, #120]	; (8002448 <MX_ADC_Init+0xec>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.DMAContinuousRequests = DISABLE;
 80023d4:	4b1c      	ldr	r3, [pc, #112]	; (8002448 <MX_ADC_Init+0xec>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80023dc:	481a      	ldr	r0, [pc, #104]	; (8002448 <MX_ADC_Init+0xec>)
 80023de:	f7fd ff3b 	bl	8000258 <HAL_ADC_Init>
 80023e2:	4603      	mov	r3, r0
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d001      	beq.n	80023ec <MX_ADC_Init+0x90>
  {
    Error_Handler();
 80023e8:	f000 f8bc 	bl	8002564 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80023ec:	2310      	movs	r3, #16
 80023ee:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80023f0:	2301      	movs	r3, #1
 80023f2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES;
 80023f4:	2300      	movs	r3, #0
 80023f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80023f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023fc:	4619      	mov	r1, r3
 80023fe:	4812      	ldr	r0, [pc, #72]	; (8002448 <MX_ADC_Init+0xec>)
 8002400:	f7fe f870 	bl	80004e4 <HAL_ADC_ConfigChannel>
 8002404:	4603      	mov	r3, r0
 8002406:	2b00      	cmp	r3, #0
 8002408:	d001      	beq.n	800240e <MX_ADC_Init+0xb2>
  {
    Error_Handler();
 800240a:	f000 f8ab 	bl	8002564 <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_TEMPSENSOR;
 800240e:	2310      	movs	r3, #16
 8002410:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8002412:	2301      	movs	r3, #1
 8002414:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_4CYCLES;
 8002416:	2300      	movs	r3, #0
 8002418:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedOffset = 0;
 800241a:	2300      	movs	r3, #0
 800241c:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedNbrOfConversion = 1;
 800241e:	2301      	movs	r3, #1
 8002420:	617b      	str	r3, [r7, #20]
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 8002422:	2310      	movs	r3, #16
 8002424:	61fb      	str	r3, [r7, #28]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_NONE;
 8002426:	2300      	movs	r3, #0
 8002428:	623b      	str	r3, [r7, #32]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc, &sConfigInjected) != HAL_OK)
 800242a:	1d3b      	adds	r3, r7, #4
 800242c:	4619      	mov	r1, r3
 800242e:	4806      	ldr	r0, [pc, #24]	; (8002448 <MX_ADC_Init+0xec>)
 8002430:	f7fe f9c4 	bl	80007bc <HAL_ADCEx_InjectedConfigChannel>
 8002434:	4603      	mov	r3, r0
 8002436:	2b00      	cmp	r3, #0
 8002438:	d001      	beq.n	800243e <MX_ADC_Init+0xe2>
  {
    Error_Handler();
 800243a:	f000 f893 	bl	8002564 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800243e:	bf00      	nop
 8002440:	3730      	adds	r7, #48	; 0x30
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	200000e0 	.word	0x200000e0
 800244c:	40012400 	.word	0x40012400

08002450 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002454:	4b11      	ldr	r3, [pc, #68]	; (800249c <MX_USART2_UART_Init+0x4c>)
 8002456:	4a12      	ldr	r2, [pc, #72]	; (80024a0 <MX_USART2_UART_Init+0x50>)
 8002458:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 256000;
 800245a:	4b10      	ldr	r3, [pc, #64]	; (800249c <MX_USART2_UART_Init+0x4c>)
 800245c:	f44f 327a 	mov.w	r2, #256000	; 0x3e800
 8002460:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002462:	4b0e      	ldr	r3, [pc, #56]	; (800249c <MX_USART2_UART_Init+0x4c>)
 8002464:	2200      	movs	r2, #0
 8002466:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002468:	4b0c      	ldr	r3, [pc, #48]	; (800249c <MX_USART2_UART_Init+0x4c>)
 800246a:	2200      	movs	r2, #0
 800246c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800246e:	4b0b      	ldr	r3, [pc, #44]	; (800249c <MX_USART2_UART_Init+0x4c>)
 8002470:	2200      	movs	r2, #0
 8002472:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002474:	4b09      	ldr	r3, [pc, #36]	; (800249c <MX_USART2_UART_Init+0x4c>)
 8002476:	220c      	movs	r2, #12
 8002478:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800247a:	4b08      	ldr	r3, [pc, #32]	; (800249c <MX_USART2_UART_Init+0x4c>)
 800247c:	2200      	movs	r2, #0
 800247e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002480:	4b06      	ldr	r3, [pc, #24]	; (800249c <MX_USART2_UART_Init+0x4c>)
 8002482:	2200      	movs	r2, #0
 8002484:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002486:	4805      	ldr	r0, [pc, #20]	; (800249c <MX_USART2_UART_Init+0x4c>)
 8002488:	f7ff fb48 	bl	8001b1c <HAL_UART_Init>
 800248c:	4603      	mov	r3, r0
 800248e:	2b00      	cmp	r3, #0
 8002490:	d001      	beq.n	8002496 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002492:	f000 f867 	bl	8002564 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002496:	bf00      	nop
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	200000a0 	.word	0x200000a0
 80024a0:	40004400 	.word	0x40004400

080024a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b088      	sub	sp, #32
 80024a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024aa:	f107 030c 	add.w	r3, r7, #12
 80024ae:	2200      	movs	r2, #0
 80024b0:	601a      	str	r2, [r3, #0]
 80024b2:	605a      	str	r2, [r3, #4]
 80024b4:	609a      	str	r2, [r3, #8]
 80024b6:	60da      	str	r2, [r3, #12]
 80024b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80024ba:	4b26      	ldr	r3, [pc, #152]	; (8002554 <MX_GPIO_Init+0xb0>)
 80024bc:	69db      	ldr	r3, [r3, #28]
 80024be:	4a25      	ldr	r2, [pc, #148]	; (8002554 <MX_GPIO_Init+0xb0>)
 80024c0:	f043 0304 	orr.w	r3, r3, #4
 80024c4:	61d3      	str	r3, [r2, #28]
 80024c6:	4b23      	ldr	r3, [pc, #140]	; (8002554 <MX_GPIO_Init+0xb0>)
 80024c8:	69db      	ldr	r3, [r3, #28]
 80024ca:	f003 0304 	and.w	r3, r3, #4
 80024ce:	60bb      	str	r3, [r7, #8]
 80024d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80024d2:	4b20      	ldr	r3, [pc, #128]	; (8002554 <MX_GPIO_Init+0xb0>)
 80024d4:	69db      	ldr	r3, [r3, #28]
 80024d6:	4a1f      	ldr	r2, [pc, #124]	; (8002554 <MX_GPIO_Init+0xb0>)
 80024d8:	f043 0320 	orr.w	r3, r3, #32
 80024dc:	61d3      	str	r3, [r2, #28]
 80024de:	4b1d      	ldr	r3, [pc, #116]	; (8002554 <MX_GPIO_Init+0xb0>)
 80024e0:	69db      	ldr	r3, [r3, #28]
 80024e2:	f003 0320 	and.w	r3, r3, #32
 80024e6:	607b      	str	r3, [r7, #4]
 80024e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80024ea:	4b1a      	ldr	r3, [pc, #104]	; (8002554 <MX_GPIO_Init+0xb0>)
 80024ec:	69db      	ldr	r3, [r3, #28]
 80024ee:	4a19      	ldr	r2, [pc, #100]	; (8002554 <MX_GPIO_Init+0xb0>)
 80024f0:	f043 0301 	orr.w	r3, r3, #1
 80024f4:	61d3      	str	r3, [r2, #28]
 80024f6:	4b17      	ldr	r3, [pc, #92]	; (8002554 <MX_GPIO_Init+0xb0>)
 80024f8:	69db      	ldr	r3, [r3, #28]
 80024fa:	f003 0301 	and.w	r3, r3, #1
 80024fe:	603b      	str	r3, [r7, #0]
 8002500:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : BOARD_BTN_Pin */
  GPIO_InitStruct.Pin = BOARD_BTN_Pin;
 8002502:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002506:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002508:	4b13      	ldr	r3, [pc, #76]	; (8002558 <MX_GPIO_Init+0xb4>)
 800250a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800250c:	2300      	movs	r3, #0
 800250e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BOARD_BTN_GPIO_Port, &GPIO_InitStruct);
 8002510:	f107 030c 	add.w	r3, r7, #12
 8002514:	4619      	mov	r1, r3
 8002516:	4811      	ldr	r0, [pc, #68]	; (800255c <MX_GPIO_Init+0xb8>)
 8002518:	f7fe fc24 	bl	8000d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : SERVO_Pin */
  GPIO_InitStruct.Pin = SERVO_Pin;
 800251c:	2301      	movs	r3, #1
 800251e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002520:	2302      	movs	r3, #2
 8002522:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002524:	2300      	movs	r3, #0
 8002526:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002528:	2303      	movs	r3, #3
 800252a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800252c:	2301      	movs	r3, #1
 800252e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SERVO_GPIO_Port, &GPIO_InitStruct);
 8002530:	f107 030c 	add.w	r3, r7, #12
 8002534:	4619      	mov	r1, r3
 8002536:	480a      	ldr	r0, [pc, #40]	; (8002560 <MX_GPIO_Init+0xbc>)
 8002538:	f7fe fc14 	bl	8000d64 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800253c:	2200      	movs	r2, #0
 800253e:	2100      	movs	r1, #0
 8002540:	2028      	movs	r0, #40	; 0x28
 8002542:	f7fe fbd8 	bl	8000cf6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002546:	2028      	movs	r0, #40	; 0x28
 8002548:	f7fe fbf1 	bl	8000d2e <HAL_NVIC_EnableIRQ>

}
 800254c:	bf00      	nop
 800254e:	3720      	adds	r7, #32
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}
 8002554:	40023800 	.word	0x40023800
 8002558:	10110000 	.word	0x10110000
 800255c:	40020800 	.word	0x40020800
 8002560:	40020000 	.word	0x40020000

08002564 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002564:	b480      	push	{r7}
 8002566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002568:	bf00      	nop
 800256a:	46bd      	mov	sp, r7
 800256c:	bc80      	pop	{r7}
 800256e:	4770      	bx	lr

08002570 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002570:	b480      	push	{r7}
 8002572:	b085      	sub	sp, #20
 8002574:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8002576:	4b14      	ldr	r3, [pc, #80]	; (80025c8 <HAL_MspInit+0x58>)
 8002578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800257a:	4a13      	ldr	r2, [pc, #76]	; (80025c8 <HAL_MspInit+0x58>)
 800257c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002580:	6253      	str	r3, [r2, #36]	; 0x24
 8002582:	4b11      	ldr	r3, [pc, #68]	; (80025c8 <HAL_MspInit+0x58>)
 8002584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002586:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800258a:	60fb      	str	r3, [r7, #12]
 800258c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800258e:	4b0e      	ldr	r3, [pc, #56]	; (80025c8 <HAL_MspInit+0x58>)
 8002590:	6a1b      	ldr	r3, [r3, #32]
 8002592:	4a0d      	ldr	r2, [pc, #52]	; (80025c8 <HAL_MspInit+0x58>)
 8002594:	f043 0301 	orr.w	r3, r3, #1
 8002598:	6213      	str	r3, [r2, #32]
 800259a:	4b0b      	ldr	r3, [pc, #44]	; (80025c8 <HAL_MspInit+0x58>)
 800259c:	6a1b      	ldr	r3, [r3, #32]
 800259e:	f003 0301 	and.w	r3, r3, #1
 80025a2:	60bb      	str	r3, [r7, #8]
 80025a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80025a6:	4b08      	ldr	r3, [pc, #32]	; (80025c8 <HAL_MspInit+0x58>)
 80025a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025aa:	4a07      	ldr	r2, [pc, #28]	; (80025c8 <HAL_MspInit+0x58>)
 80025ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025b0:	6253      	str	r3, [r2, #36]	; 0x24
 80025b2:	4b05      	ldr	r3, [pc, #20]	; (80025c8 <HAL_MspInit+0x58>)
 80025b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ba:	607b      	str	r3, [r7, #4]
 80025bc:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025be:	bf00      	nop
 80025c0:	3714      	adds	r7, #20
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bc80      	pop	{r7}
 80025c6:	4770      	bx	lr
 80025c8:	40023800 	.word	0x40023800

080025cc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b085      	sub	sp, #20
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a09      	ldr	r2, [pc, #36]	; (8002600 <HAL_ADC_MspInit+0x34>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d10b      	bne.n	80025f6 <HAL_ADC_MspInit+0x2a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80025de:	4b09      	ldr	r3, [pc, #36]	; (8002604 <HAL_ADC_MspInit+0x38>)
 80025e0:	6a1b      	ldr	r3, [r3, #32]
 80025e2:	4a08      	ldr	r2, [pc, #32]	; (8002604 <HAL_ADC_MspInit+0x38>)
 80025e4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025e8:	6213      	str	r3, [r2, #32]
 80025ea:	4b06      	ldr	r3, [pc, #24]	; (8002604 <HAL_ADC_MspInit+0x38>)
 80025ec:	6a1b      	ldr	r3, [r3, #32]
 80025ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025f2:	60fb      	str	r3, [r7, #12]
 80025f4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80025f6:	bf00      	nop
 80025f8:	3714      	adds	r7, #20
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bc80      	pop	{r7}
 80025fe:	4770      	bx	lr
 8002600:	40012400 	.word	0x40012400
 8002604:	40023800 	.word	0x40023800

08002608 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b08a      	sub	sp, #40	; 0x28
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002610:	f107 0314 	add.w	r3, r7, #20
 8002614:	2200      	movs	r2, #0
 8002616:	601a      	str	r2, [r3, #0]
 8002618:	605a      	str	r2, [r3, #4]
 800261a:	609a      	str	r2, [r3, #8]
 800261c:	60da      	str	r2, [r3, #12]
 800261e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a17      	ldr	r2, [pc, #92]	; (8002684 <HAL_UART_MspInit+0x7c>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d127      	bne.n	800267a <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800262a:	4b17      	ldr	r3, [pc, #92]	; (8002688 <HAL_UART_MspInit+0x80>)
 800262c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800262e:	4a16      	ldr	r2, [pc, #88]	; (8002688 <HAL_UART_MspInit+0x80>)
 8002630:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002634:	6253      	str	r3, [r2, #36]	; 0x24
 8002636:	4b14      	ldr	r3, [pc, #80]	; (8002688 <HAL_UART_MspInit+0x80>)
 8002638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800263a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800263e:	613b      	str	r3, [r7, #16]
 8002640:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002642:	4b11      	ldr	r3, [pc, #68]	; (8002688 <HAL_UART_MspInit+0x80>)
 8002644:	69db      	ldr	r3, [r3, #28]
 8002646:	4a10      	ldr	r2, [pc, #64]	; (8002688 <HAL_UART_MspInit+0x80>)
 8002648:	f043 0301 	orr.w	r3, r3, #1
 800264c:	61d3      	str	r3, [r2, #28]
 800264e:	4b0e      	ldr	r3, [pc, #56]	; (8002688 <HAL_UART_MspInit+0x80>)
 8002650:	69db      	ldr	r3, [r3, #28]
 8002652:	f003 0301 	and.w	r3, r3, #1
 8002656:	60fb      	str	r3, [r7, #12]
 8002658:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800265a:	230c      	movs	r3, #12
 800265c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800265e:	2302      	movs	r3, #2
 8002660:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002662:	2301      	movs	r3, #1
 8002664:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002666:	2303      	movs	r3, #3
 8002668:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800266a:	2307      	movs	r3, #7
 800266c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800266e:	f107 0314 	add.w	r3, r7, #20
 8002672:	4619      	mov	r1, r3
 8002674:	4805      	ldr	r0, [pc, #20]	; (800268c <HAL_UART_MspInit+0x84>)
 8002676:	f7fe fb75 	bl	8000d64 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800267a:	bf00      	nop
 800267c:	3728      	adds	r7, #40	; 0x28
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	40004400 	.word	0x40004400
 8002688:	40023800 	.word	0x40023800
 800268c:	40020000 	.word	0x40020000

08002690 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002690:	b480      	push	{r7}
 8002692:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002694:	bf00      	nop
 8002696:	46bd      	mov	sp, r7
 8002698:	bc80      	pop	{r7}
 800269a:	4770      	bx	lr

0800269c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800269c:	b480      	push	{r7}
 800269e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026a0:	e7fe      	b.n	80026a0 <HardFault_Handler+0x4>

080026a2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026a2:	b480      	push	{r7}
 80026a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026a6:	e7fe      	b.n	80026a6 <MemManage_Handler+0x4>

080026a8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026a8:	b480      	push	{r7}
 80026aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026ac:	e7fe      	b.n	80026ac <BusFault_Handler+0x4>

080026ae <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80026ae:	b480      	push	{r7}
 80026b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026b2:	e7fe      	b.n	80026b2 <UsageFault_Handler+0x4>

080026b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80026b4:	b480      	push	{r7}
 80026b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80026b8:	bf00      	nop
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bc80      	pop	{r7}
 80026be:	4770      	bx	lr

080026c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80026c0:	b480      	push	{r7}
 80026c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80026c4:	bf00      	nop
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bc80      	pop	{r7}
 80026ca:	4770      	bx	lr

080026cc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80026cc:	b480      	push	{r7}
 80026ce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80026d0:	bf00      	nop
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bc80      	pop	{r7}
 80026d6:	4770      	bx	lr

080026d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80026dc:	f7fd fda0 	bl	8000220 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80026e0:	bf00      	nop
 80026e2:	bd80      	pop	{r7, pc}

080026e4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80026e4:	b480      	push	{r7}
 80026e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
  EXTI->PR |= GPIO_PIN_13;
 80026e8:	4b06      	ldr	r3, [pc, #24]	; (8002704 <EXTI15_10_IRQHandler+0x20>)
 80026ea:	695b      	ldr	r3, [r3, #20]
 80026ec:	4a05      	ldr	r2, [pc, #20]	; (8002704 <EXTI15_10_IRQHandler+0x20>)
 80026ee:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80026f2:	6153      	str	r3, [r2, #20]
  send_en = 1;
 80026f4:	4b04      	ldr	r3, [pc, #16]	; (8002708 <EXTI15_10_IRQHandler+0x24>)
 80026f6:	2201      	movs	r2, #1
 80026f8:	701a      	strb	r2, [r3, #0]
  /* USER CODE END EXTI15_10_IRQn 0 */
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80026fa:	bf00      	nop
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bc80      	pop	{r7}
 8002700:	4770      	bx	lr
 8002702:	bf00      	nop
 8002704:	40010400 	.word	0x40010400
 8002708:	2000008c 	.word	0x2000008c

0800270c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b086      	sub	sp, #24
 8002710:	af00      	add	r7, sp, #0
 8002712:	60f8      	str	r0, [r7, #12]
 8002714:	60b9      	str	r1, [r7, #8]
 8002716:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002718:	2300      	movs	r3, #0
 800271a:	617b      	str	r3, [r7, #20]
 800271c:	e00a      	b.n	8002734 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800271e:	f7ff fd6d 	bl	80021fc <__io_getchar>
 8002722:	4601      	mov	r1, r0
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	1c5a      	adds	r2, r3, #1
 8002728:	60ba      	str	r2, [r7, #8]
 800272a:	b2ca      	uxtb	r2, r1
 800272c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	3301      	adds	r3, #1
 8002732:	617b      	str	r3, [r7, #20]
 8002734:	697a      	ldr	r2, [r7, #20]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	429a      	cmp	r2, r3
 800273a:	dbf0      	blt.n	800271e <_read+0x12>
	}

return len;
 800273c:	687b      	ldr	r3, [r7, #4]
}
 800273e:	4618      	mov	r0, r3
 8002740:	3718      	adds	r7, #24
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}

08002746 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002746:	b580      	push	{r7, lr}
 8002748:	b086      	sub	sp, #24
 800274a:	af00      	add	r7, sp, #0
 800274c:	60f8      	str	r0, [r7, #12]
 800274e:	60b9      	str	r1, [r7, #8]
 8002750:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002752:	2300      	movs	r3, #0
 8002754:	617b      	str	r3, [r7, #20]
 8002756:	e009      	b.n	800276c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	1c5a      	adds	r2, r3, #1
 800275c:	60ba      	str	r2, [r7, #8]
 800275e:	781b      	ldrb	r3, [r3, #0]
 8002760:	4618      	mov	r0, r3
 8002762:	f7ff fd39 	bl	80021d8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	3301      	adds	r3, #1
 800276a:	617b      	str	r3, [r7, #20]
 800276c:	697a      	ldr	r2, [r7, #20]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	429a      	cmp	r2, r3
 8002772:	dbf1      	blt.n	8002758 <_write+0x12>
	}
	return len;
 8002774:	687b      	ldr	r3, [r7, #4]
}
 8002776:	4618      	mov	r0, r3
 8002778:	3718      	adds	r7, #24
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}

0800277e <_close>:

int _close(int file)
{
 800277e:	b480      	push	{r7}
 8002780:	b083      	sub	sp, #12
 8002782:	af00      	add	r7, sp, #0
 8002784:	6078      	str	r0, [r7, #4]
	return -1;
 8002786:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800278a:	4618      	mov	r0, r3
 800278c:	370c      	adds	r7, #12
 800278e:	46bd      	mov	sp, r7
 8002790:	bc80      	pop	{r7}
 8002792:	4770      	bx	lr

08002794 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002794:	b480      	push	{r7}
 8002796:	b083      	sub	sp, #12
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80027a4:	605a      	str	r2, [r3, #4]
	return 0;
 80027a6:	2300      	movs	r3, #0
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	370c      	adds	r7, #12
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bc80      	pop	{r7}
 80027b0:	4770      	bx	lr

080027b2 <_isatty>:

int _isatty(int file)
{
 80027b2:	b480      	push	{r7}
 80027b4:	b083      	sub	sp, #12
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	6078      	str	r0, [r7, #4]
	return 1;
 80027ba:	2301      	movs	r3, #1
}
 80027bc:	4618      	mov	r0, r3
 80027be:	370c      	adds	r7, #12
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bc80      	pop	{r7}
 80027c4:	4770      	bx	lr

080027c6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80027c6:	b480      	push	{r7}
 80027c8:	b085      	sub	sp, #20
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	60f8      	str	r0, [r7, #12]
 80027ce:	60b9      	str	r1, [r7, #8]
 80027d0:	607a      	str	r2, [r7, #4]
	return 0;
 80027d2:	2300      	movs	r3, #0
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	3714      	adds	r7, #20
 80027d8:	46bd      	mov	sp, r7
 80027da:	bc80      	pop	{r7}
 80027dc:	4770      	bx	lr
	...

080027e0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b084      	sub	sp, #16
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80027e8:	4b11      	ldr	r3, [pc, #68]	; (8002830 <_sbrk+0x50>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d102      	bne.n	80027f6 <_sbrk+0x16>
		heap_end = &end;
 80027f0:	4b0f      	ldr	r3, [pc, #60]	; (8002830 <_sbrk+0x50>)
 80027f2:	4a10      	ldr	r2, [pc, #64]	; (8002834 <_sbrk+0x54>)
 80027f4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80027f6:	4b0e      	ldr	r3, [pc, #56]	; (8002830 <_sbrk+0x50>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80027fc:	4b0c      	ldr	r3, [pc, #48]	; (8002830 <_sbrk+0x50>)
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	4413      	add	r3, r2
 8002804:	466a      	mov	r2, sp
 8002806:	4293      	cmp	r3, r2
 8002808:	d907      	bls.n	800281a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800280a:	f000 f86f 	bl	80028ec <__errno>
 800280e:	4602      	mov	r2, r0
 8002810:	230c      	movs	r3, #12
 8002812:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002814:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002818:	e006      	b.n	8002828 <_sbrk+0x48>
	}

	heap_end += incr;
 800281a:	4b05      	ldr	r3, [pc, #20]	; (8002830 <_sbrk+0x50>)
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	4413      	add	r3, r2
 8002822:	4a03      	ldr	r2, [pc, #12]	; (8002830 <_sbrk+0x50>)
 8002824:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002826:	68fb      	ldr	r3, [r7, #12]
}
 8002828:	4618      	mov	r0, r3
 800282a:	3710      	adds	r7, #16
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}
 8002830:	20000090 	.word	0x20000090
 8002834:	20000138 	.word	0x20000138

08002838 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002838:	b480      	push	{r7}
 800283a:	af00      	add	r7, sp, #0
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 800283c:	4b15      	ldr	r3, [pc, #84]	; (8002894 <SystemInit+0x5c>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a14      	ldr	r2, [pc, #80]	; (8002894 <SystemInit+0x5c>)
 8002842:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002846:	6013      	str	r3, [r2, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 8002848:	4b12      	ldr	r3, [pc, #72]	; (8002894 <SystemInit+0x5c>)
 800284a:	689a      	ldr	r2, [r3, #8]
 800284c:	4911      	ldr	r1, [pc, #68]	; (8002894 <SystemInit+0x5c>)
 800284e:	4b12      	ldr	r3, [pc, #72]	; (8002898 <SystemInit+0x60>)
 8002850:	4013      	ands	r3, r2
 8002852:	608b      	str	r3, [r1, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 8002854:	4b0f      	ldr	r3, [pc, #60]	; (8002894 <SystemInit+0x5c>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a0e      	ldr	r2, [pc, #56]	; (8002894 <SystemInit+0x5c>)
 800285a:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 800285e:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
 8002862:	6013      	str	r3, [r2, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002864:	4b0b      	ldr	r3, [pc, #44]	; (8002894 <SystemInit+0x5c>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a0a      	ldr	r2, [pc, #40]	; (8002894 <SystemInit+0x5c>)
 800286a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800286e:	6013      	str	r3, [r2, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 8002870:	4b08      	ldr	r3, [pc, #32]	; (8002894 <SystemInit+0x5c>)
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	4a07      	ldr	r2, [pc, #28]	; (8002894 <SystemInit+0x5c>)
 8002876:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 800287a:	6093      	str	r3, [r2, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 800287c:	4b05      	ldr	r3, [pc, #20]	; (8002894 <SystemInit+0x5c>)
 800287e:	2200      	movs	r2, #0
 8002880:	60da      	str	r2, [r3, #12]
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002882:	4b06      	ldr	r3, [pc, #24]	; (800289c <SystemInit+0x64>)
 8002884:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002888:	609a      	str	r2, [r3, #8]
#endif
}
 800288a:	bf00      	nop
 800288c:	46bd      	mov	sp, r7
 800288e:	bc80      	pop	{r7}
 8002890:	4770      	bx	lr
 8002892:	bf00      	nop
 8002894:	40023800 	.word	0x40023800
 8002898:	88ffc00c 	.word	0x88ffc00c
 800289c:	e000ed00 	.word	0xe000ed00

080028a0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80028a0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80028a2:	e003      	b.n	80028ac <LoopCopyDataInit>

080028a4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80028a4:	4b0b      	ldr	r3, [pc, #44]	; (80028d4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80028a6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80028a8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80028aa:	3104      	adds	r1, #4

080028ac <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80028ac:	480a      	ldr	r0, [pc, #40]	; (80028d8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80028ae:	4b0b      	ldr	r3, [pc, #44]	; (80028dc <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80028b0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80028b2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80028b4:	d3f6      	bcc.n	80028a4 <CopyDataInit>
  ldr r2, =_sbss
 80028b6:	4a0a      	ldr	r2, [pc, #40]	; (80028e0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80028b8:	e002      	b.n	80028c0 <LoopFillZerobss>

080028ba <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80028ba:	2300      	movs	r3, #0
  str r3, [r2], #4
 80028bc:	f842 3b04 	str.w	r3, [r2], #4

080028c0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80028c0:	4b08      	ldr	r3, [pc, #32]	; (80028e4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80028c2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80028c4:	d3f9      	bcc.n	80028ba <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80028c6:	f7ff ffb7 	bl	8002838 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80028ca:	f000 f815 	bl	80028f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80028ce:	f7ff fca7 	bl	8002220 <main>
  bx lr
 80028d2:	4770      	bx	lr
  ldr r3, =_sidata
 80028d4:	080038ac 	.word	0x080038ac
  ldr r0, =_sdata
 80028d8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80028dc:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 80028e0:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 80028e4:	20000138 	.word	0x20000138

080028e8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80028e8:	e7fe      	b.n	80028e8 <ADC1_IRQHandler>
	...

080028ec <__errno>:
 80028ec:	4b01      	ldr	r3, [pc, #4]	; (80028f4 <__errno+0x8>)
 80028ee:	6818      	ldr	r0, [r3, #0]
 80028f0:	4770      	bx	lr
 80028f2:	bf00      	nop
 80028f4:	2000000c 	.word	0x2000000c

080028f8 <__libc_init_array>:
 80028f8:	b570      	push	{r4, r5, r6, lr}
 80028fa:	2500      	movs	r5, #0
 80028fc:	4e0c      	ldr	r6, [pc, #48]	; (8002930 <__libc_init_array+0x38>)
 80028fe:	4c0d      	ldr	r4, [pc, #52]	; (8002934 <__libc_init_array+0x3c>)
 8002900:	1ba4      	subs	r4, r4, r6
 8002902:	10a4      	asrs	r4, r4, #2
 8002904:	42a5      	cmp	r5, r4
 8002906:	d109      	bne.n	800291c <__libc_init_array+0x24>
 8002908:	f000 ff5a 	bl	80037c0 <_init>
 800290c:	2500      	movs	r5, #0
 800290e:	4e0a      	ldr	r6, [pc, #40]	; (8002938 <__libc_init_array+0x40>)
 8002910:	4c0a      	ldr	r4, [pc, #40]	; (800293c <__libc_init_array+0x44>)
 8002912:	1ba4      	subs	r4, r4, r6
 8002914:	10a4      	asrs	r4, r4, #2
 8002916:	42a5      	cmp	r5, r4
 8002918:	d105      	bne.n	8002926 <__libc_init_array+0x2e>
 800291a:	bd70      	pop	{r4, r5, r6, pc}
 800291c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002920:	4798      	blx	r3
 8002922:	3501      	adds	r5, #1
 8002924:	e7ee      	b.n	8002904 <__libc_init_array+0xc>
 8002926:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800292a:	4798      	blx	r3
 800292c:	3501      	adds	r5, #1
 800292e:	e7f2      	b.n	8002916 <__libc_init_array+0x1e>
 8002930:	080038a4 	.word	0x080038a4
 8002934:	080038a4 	.word	0x080038a4
 8002938:	080038a4 	.word	0x080038a4
 800293c:	080038a8 	.word	0x080038a8

08002940 <memset>:
 8002940:	4603      	mov	r3, r0
 8002942:	4402      	add	r2, r0
 8002944:	4293      	cmp	r3, r2
 8002946:	d100      	bne.n	800294a <memset+0xa>
 8002948:	4770      	bx	lr
 800294a:	f803 1b01 	strb.w	r1, [r3], #1
 800294e:	e7f9      	b.n	8002944 <memset+0x4>

08002950 <iprintf>:
 8002950:	b40f      	push	{r0, r1, r2, r3}
 8002952:	4b0a      	ldr	r3, [pc, #40]	; (800297c <iprintf+0x2c>)
 8002954:	b513      	push	{r0, r1, r4, lr}
 8002956:	681c      	ldr	r4, [r3, #0]
 8002958:	b124      	cbz	r4, 8002964 <iprintf+0x14>
 800295a:	69a3      	ldr	r3, [r4, #24]
 800295c:	b913      	cbnz	r3, 8002964 <iprintf+0x14>
 800295e:	4620      	mov	r0, r4
 8002960:	f000 f862 	bl	8002a28 <__sinit>
 8002964:	ab05      	add	r3, sp, #20
 8002966:	9a04      	ldr	r2, [sp, #16]
 8002968:	68a1      	ldr	r1, [r4, #8]
 800296a:	4620      	mov	r0, r4
 800296c:	9301      	str	r3, [sp, #4]
 800296e:	f000 f967 	bl	8002c40 <_vfiprintf_r>
 8002972:	b002      	add	sp, #8
 8002974:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002978:	b004      	add	sp, #16
 800297a:	4770      	bx	lr
 800297c:	2000000c 	.word	0x2000000c

08002980 <putchar>:
 8002980:	b538      	push	{r3, r4, r5, lr}
 8002982:	4b08      	ldr	r3, [pc, #32]	; (80029a4 <putchar+0x24>)
 8002984:	4605      	mov	r5, r0
 8002986:	681c      	ldr	r4, [r3, #0]
 8002988:	b124      	cbz	r4, 8002994 <putchar+0x14>
 800298a:	69a3      	ldr	r3, [r4, #24]
 800298c:	b913      	cbnz	r3, 8002994 <putchar+0x14>
 800298e:	4620      	mov	r0, r4
 8002990:	f000 f84a 	bl	8002a28 <__sinit>
 8002994:	68a2      	ldr	r2, [r4, #8]
 8002996:	4629      	mov	r1, r5
 8002998:	4620      	mov	r0, r4
 800299a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800299e:	f000 bbed 	b.w	800317c <_putc_r>
 80029a2:	bf00      	nop
 80029a4:	2000000c 	.word	0x2000000c

080029a8 <std>:
 80029a8:	2300      	movs	r3, #0
 80029aa:	b510      	push	{r4, lr}
 80029ac:	4604      	mov	r4, r0
 80029ae:	e9c0 3300 	strd	r3, r3, [r0]
 80029b2:	6083      	str	r3, [r0, #8]
 80029b4:	8181      	strh	r1, [r0, #12]
 80029b6:	6643      	str	r3, [r0, #100]	; 0x64
 80029b8:	81c2      	strh	r2, [r0, #14]
 80029ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80029be:	6183      	str	r3, [r0, #24]
 80029c0:	4619      	mov	r1, r3
 80029c2:	2208      	movs	r2, #8
 80029c4:	305c      	adds	r0, #92	; 0x5c
 80029c6:	f7ff ffbb 	bl	8002940 <memset>
 80029ca:	4b05      	ldr	r3, [pc, #20]	; (80029e0 <std+0x38>)
 80029cc:	6224      	str	r4, [r4, #32]
 80029ce:	6263      	str	r3, [r4, #36]	; 0x24
 80029d0:	4b04      	ldr	r3, [pc, #16]	; (80029e4 <std+0x3c>)
 80029d2:	62a3      	str	r3, [r4, #40]	; 0x28
 80029d4:	4b04      	ldr	r3, [pc, #16]	; (80029e8 <std+0x40>)
 80029d6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80029d8:	4b04      	ldr	r3, [pc, #16]	; (80029ec <std+0x44>)
 80029da:	6323      	str	r3, [r4, #48]	; 0x30
 80029dc:	bd10      	pop	{r4, pc}
 80029de:	bf00      	nop
 80029e0:	08003209 	.word	0x08003209
 80029e4:	0800322b 	.word	0x0800322b
 80029e8:	08003263 	.word	0x08003263
 80029ec:	08003287 	.word	0x08003287

080029f0 <_cleanup_r>:
 80029f0:	4901      	ldr	r1, [pc, #4]	; (80029f8 <_cleanup_r+0x8>)
 80029f2:	f000 b885 	b.w	8002b00 <_fwalk_reent>
 80029f6:	bf00      	nop
 80029f8:	08003561 	.word	0x08003561

080029fc <__sfmoreglue>:
 80029fc:	b570      	push	{r4, r5, r6, lr}
 80029fe:	2568      	movs	r5, #104	; 0x68
 8002a00:	1e4a      	subs	r2, r1, #1
 8002a02:	4355      	muls	r5, r2
 8002a04:	460e      	mov	r6, r1
 8002a06:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002a0a:	f000 f897 	bl	8002b3c <_malloc_r>
 8002a0e:	4604      	mov	r4, r0
 8002a10:	b140      	cbz	r0, 8002a24 <__sfmoreglue+0x28>
 8002a12:	2100      	movs	r1, #0
 8002a14:	e9c0 1600 	strd	r1, r6, [r0]
 8002a18:	300c      	adds	r0, #12
 8002a1a:	60a0      	str	r0, [r4, #8]
 8002a1c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002a20:	f7ff ff8e 	bl	8002940 <memset>
 8002a24:	4620      	mov	r0, r4
 8002a26:	bd70      	pop	{r4, r5, r6, pc}

08002a28 <__sinit>:
 8002a28:	6983      	ldr	r3, [r0, #24]
 8002a2a:	b510      	push	{r4, lr}
 8002a2c:	4604      	mov	r4, r0
 8002a2e:	bb33      	cbnz	r3, 8002a7e <__sinit+0x56>
 8002a30:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8002a34:	6503      	str	r3, [r0, #80]	; 0x50
 8002a36:	4b12      	ldr	r3, [pc, #72]	; (8002a80 <__sinit+0x58>)
 8002a38:	4a12      	ldr	r2, [pc, #72]	; (8002a84 <__sinit+0x5c>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	6282      	str	r2, [r0, #40]	; 0x28
 8002a3e:	4298      	cmp	r0, r3
 8002a40:	bf04      	itt	eq
 8002a42:	2301      	moveq	r3, #1
 8002a44:	6183      	streq	r3, [r0, #24]
 8002a46:	f000 f81f 	bl	8002a88 <__sfp>
 8002a4a:	6060      	str	r0, [r4, #4]
 8002a4c:	4620      	mov	r0, r4
 8002a4e:	f000 f81b 	bl	8002a88 <__sfp>
 8002a52:	60a0      	str	r0, [r4, #8]
 8002a54:	4620      	mov	r0, r4
 8002a56:	f000 f817 	bl	8002a88 <__sfp>
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	60e0      	str	r0, [r4, #12]
 8002a5e:	2104      	movs	r1, #4
 8002a60:	6860      	ldr	r0, [r4, #4]
 8002a62:	f7ff ffa1 	bl	80029a8 <std>
 8002a66:	2201      	movs	r2, #1
 8002a68:	2109      	movs	r1, #9
 8002a6a:	68a0      	ldr	r0, [r4, #8]
 8002a6c:	f7ff ff9c 	bl	80029a8 <std>
 8002a70:	2202      	movs	r2, #2
 8002a72:	2112      	movs	r1, #18
 8002a74:	68e0      	ldr	r0, [r4, #12]
 8002a76:	f7ff ff97 	bl	80029a8 <std>
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	61a3      	str	r3, [r4, #24]
 8002a7e:	bd10      	pop	{r4, pc}
 8002a80:	0800380c 	.word	0x0800380c
 8002a84:	080029f1 	.word	0x080029f1

08002a88 <__sfp>:
 8002a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a8a:	4b1b      	ldr	r3, [pc, #108]	; (8002af8 <__sfp+0x70>)
 8002a8c:	4607      	mov	r7, r0
 8002a8e:	681e      	ldr	r6, [r3, #0]
 8002a90:	69b3      	ldr	r3, [r6, #24]
 8002a92:	b913      	cbnz	r3, 8002a9a <__sfp+0x12>
 8002a94:	4630      	mov	r0, r6
 8002a96:	f7ff ffc7 	bl	8002a28 <__sinit>
 8002a9a:	3648      	adds	r6, #72	; 0x48
 8002a9c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002aa0:	3b01      	subs	r3, #1
 8002aa2:	d503      	bpl.n	8002aac <__sfp+0x24>
 8002aa4:	6833      	ldr	r3, [r6, #0]
 8002aa6:	b133      	cbz	r3, 8002ab6 <__sfp+0x2e>
 8002aa8:	6836      	ldr	r6, [r6, #0]
 8002aaa:	e7f7      	b.n	8002a9c <__sfp+0x14>
 8002aac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002ab0:	b16d      	cbz	r5, 8002ace <__sfp+0x46>
 8002ab2:	3468      	adds	r4, #104	; 0x68
 8002ab4:	e7f4      	b.n	8002aa0 <__sfp+0x18>
 8002ab6:	2104      	movs	r1, #4
 8002ab8:	4638      	mov	r0, r7
 8002aba:	f7ff ff9f 	bl	80029fc <__sfmoreglue>
 8002abe:	6030      	str	r0, [r6, #0]
 8002ac0:	2800      	cmp	r0, #0
 8002ac2:	d1f1      	bne.n	8002aa8 <__sfp+0x20>
 8002ac4:	230c      	movs	r3, #12
 8002ac6:	4604      	mov	r4, r0
 8002ac8:	603b      	str	r3, [r7, #0]
 8002aca:	4620      	mov	r0, r4
 8002acc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002ace:	4b0b      	ldr	r3, [pc, #44]	; (8002afc <__sfp+0x74>)
 8002ad0:	6665      	str	r5, [r4, #100]	; 0x64
 8002ad2:	e9c4 5500 	strd	r5, r5, [r4]
 8002ad6:	60a5      	str	r5, [r4, #8]
 8002ad8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8002adc:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8002ae0:	2208      	movs	r2, #8
 8002ae2:	4629      	mov	r1, r5
 8002ae4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002ae8:	f7ff ff2a 	bl	8002940 <memset>
 8002aec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002af0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002af4:	e7e9      	b.n	8002aca <__sfp+0x42>
 8002af6:	bf00      	nop
 8002af8:	0800380c 	.word	0x0800380c
 8002afc:	ffff0001 	.word	0xffff0001

08002b00 <_fwalk_reent>:
 8002b00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002b04:	4680      	mov	r8, r0
 8002b06:	4689      	mov	r9, r1
 8002b08:	2600      	movs	r6, #0
 8002b0a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002b0e:	b914      	cbnz	r4, 8002b16 <_fwalk_reent+0x16>
 8002b10:	4630      	mov	r0, r6
 8002b12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002b16:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8002b1a:	3f01      	subs	r7, #1
 8002b1c:	d501      	bpl.n	8002b22 <_fwalk_reent+0x22>
 8002b1e:	6824      	ldr	r4, [r4, #0]
 8002b20:	e7f5      	b.n	8002b0e <_fwalk_reent+0xe>
 8002b22:	89ab      	ldrh	r3, [r5, #12]
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d907      	bls.n	8002b38 <_fwalk_reent+0x38>
 8002b28:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002b2c:	3301      	adds	r3, #1
 8002b2e:	d003      	beq.n	8002b38 <_fwalk_reent+0x38>
 8002b30:	4629      	mov	r1, r5
 8002b32:	4640      	mov	r0, r8
 8002b34:	47c8      	blx	r9
 8002b36:	4306      	orrs	r6, r0
 8002b38:	3568      	adds	r5, #104	; 0x68
 8002b3a:	e7ee      	b.n	8002b1a <_fwalk_reent+0x1a>

08002b3c <_malloc_r>:
 8002b3c:	b570      	push	{r4, r5, r6, lr}
 8002b3e:	1ccd      	adds	r5, r1, #3
 8002b40:	f025 0503 	bic.w	r5, r5, #3
 8002b44:	3508      	adds	r5, #8
 8002b46:	2d0c      	cmp	r5, #12
 8002b48:	bf38      	it	cc
 8002b4a:	250c      	movcc	r5, #12
 8002b4c:	2d00      	cmp	r5, #0
 8002b4e:	4606      	mov	r6, r0
 8002b50:	db01      	blt.n	8002b56 <_malloc_r+0x1a>
 8002b52:	42a9      	cmp	r1, r5
 8002b54:	d903      	bls.n	8002b5e <_malloc_r+0x22>
 8002b56:	230c      	movs	r3, #12
 8002b58:	6033      	str	r3, [r6, #0]
 8002b5a:	2000      	movs	r0, #0
 8002b5c:	bd70      	pop	{r4, r5, r6, pc}
 8002b5e:	f000 fdad 	bl	80036bc <__malloc_lock>
 8002b62:	4a21      	ldr	r2, [pc, #132]	; (8002be8 <_malloc_r+0xac>)
 8002b64:	6814      	ldr	r4, [r2, #0]
 8002b66:	4621      	mov	r1, r4
 8002b68:	b991      	cbnz	r1, 8002b90 <_malloc_r+0x54>
 8002b6a:	4c20      	ldr	r4, [pc, #128]	; (8002bec <_malloc_r+0xb0>)
 8002b6c:	6823      	ldr	r3, [r4, #0]
 8002b6e:	b91b      	cbnz	r3, 8002b78 <_malloc_r+0x3c>
 8002b70:	4630      	mov	r0, r6
 8002b72:	f000 fb39 	bl	80031e8 <_sbrk_r>
 8002b76:	6020      	str	r0, [r4, #0]
 8002b78:	4629      	mov	r1, r5
 8002b7a:	4630      	mov	r0, r6
 8002b7c:	f000 fb34 	bl	80031e8 <_sbrk_r>
 8002b80:	1c43      	adds	r3, r0, #1
 8002b82:	d124      	bne.n	8002bce <_malloc_r+0x92>
 8002b84:	230c      	movs	r3, #12
 8002b86:	4630      	mov	r0, r6
 8002b88:	6033      	str	r3, [r6, #0]
 8002b8a:	f000 fd98 	bl	80036be <__malloc_unlock>
 8002b8e:	e7e4      	b.n	8002b5a <_malloc_r+0x1e>
 8002b90:	680b      	ldr	r3, [r1, #0]
 8002b92:	1b5b      	subs	r3, r3, r5
 8002b94:	d418      	bmi.n	8002bc8 <_malloc_r+0x8c>
 8002b96:	2b0b      	cmp	r3, #11
 8002b98:	d90f      	bls.n	8002bba <_malloc_r+0x7e>
 8002b9a:	600b      	str	r3, [r1, #0]
 8002b9c:	18cc      	adds	r4, r1, r3
 8002b9e:	50cd      	str	r5, [r1, r3]
 8002ba0:	4630      	mov	r0, r6
 8002ba2:	f000 fd8c 	bl	80036be <__malloc_unlock>
 8002ba6:	f104 000b 	add.w	r0, r4, #11
 8002baa:	1d23      	adds	r3, r4, #4
 8002bac:	f020 0007 	bic.w	r0, r0, #7
 8002bb0:	1ac3      	subs	r3, r0, r3
 8002bb2:	d0d3      	beq.n	8002b5c <_malloc_r+0x20>
 8002bb4:	425a      	negs	r2, r3
 8002bb6:	50e2      	str	r2, [r4, r3]
 8002bb8:	e7d0      	b.n	8002b5c <_malloc_r+0x20>
 8002bba:	684b      	ldr	r3, [r1, #4]
 8002bbc:	428c      	cmp	r4, r1
 8002bbe:	bf16      	itet	ne
 8002bc0:	6063      	strne	r3, [r4, #4]
 8002bc2:	6013      	streq	r3, [r2, #0]
 8002bc4:	460c      	movne	r4, r1
 8002bc6:	e7eb      	b.n	8002ba0 <_malloc_r+0x64>
 8002bc8:	460c      	mov	r4, r1
 8002bca:	6849      	ldr	r1, [r1, #4]
 8002bcc:	e7cc      	b.n	8002b68 <_malloc_r+0x2c>
 8002bce:	1cc4      	adds	r4, r0, #3
 8002bd0:	f024 0403 	bic.w	r4, r4, #3
 8002bd4:	42a0      	cmp	r0, r4
 8002bd6:	d005      	beq.n	8002be4 <_malloc_r+0xa8>
 8002bd8:	1a21      	subs	r1, r4, r0
 8002bda:	4630      	mov	r0, r6
 8002bdc:	f000 fb04 	bl	80031e8 <_sbrk_r>
 8002be0:	3001      	adds	r0, #1
 8002be2:	d0cf      	beq.n	8002b84 <_malloc_r+0x48>
 8002be4:	6025      	str	r5, [r4, #0]
 8002be6:	e7db      	b.n	8002ba0 <_malloc_r+0x64>
 8002be8:	20000094 	.word	0x20000094
 8002bec:	20000098 	.word	0x20000098

08002bf0 <__sfputc_r>:
 8002bf0:	6893      	ldr	r3, [r2, #8]
 8002bf2:	b410      	push	{r4}
 8002bf4:	3b01      	subs	r3, #1
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	6093      	str	r3, [r2, #8]
 8002bfa:	da07      	bge.n	8002c0c <__sfputc_r+0x1c>
 8002bfc:	6994      	ldr	r4, [r2, #24]
 8002bfe:	42a3      	cmp	r3, r4
 8002c00:	db01      	blt.n	8002c06 <__sfputc_r+0x16>
 8002c02:	290a      	cmp	r1, #10
 8002c04:	d102      	bne.n	8002c0c <__sfputc_r+0x1c>
 8002c06:	bc10      	pop	{r4}
 8002c08:	f000 bb42 	b.w	8003290 <__swbuf_r>
 8002c0c:	6813      	ldr	r3, [r2, #0]
 8002c0e:	1c58      	adds	r0, r3, #1
 8002c10:	6010      	str	r0, [r2, #0]
 8002c12:	7019      	strb	r1, [r3, #0]
 8002c14:	4608      	mov	r0, r1
 8002c16:	bc10      	pop	{r4}
 8002c18:	4770      	bx	lr

08002c1a <__sfputs_r>:
 8002c1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c1c:	4606      	mov	r6, r0
 8002c1e:	460f      	mov	r7, r1
 8002c20:	4614      	mov	r4, r2
 8002c22:	18d5      	adds	r5, r2, r3
 8002c24:	42ac      	cmp	r4, r5
 8002c26:	d101      	bne.n	8002c2c <__sfputs_r+0x12>
 8002c28:	2000      	movs	r0, #0
 8002c2a:	e007      	b.n	8002c3c <__sfputs_r+0x22>
 8002c2c:	463a      	mov	r2, r7
 8002c2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002c32:	4630      	mov	r0, r6
 8002c34:	f7ff ffdc 	bl	8002bf0 <__sfputc_r>
 8002c38:	1c43      	adds	r3, r0, #1
 8002c3a:	d1f3      	bne.n	8002c24 <__sfputs_r+0xa>
 8002c3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002c40 <_vfiprintf_r>:
 8002c40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c44:	460c      	mov	r4, r1
 8002c46:	b09d      	sub	sp, #116	; 0x74
 8002c48:	4617      	mov	r7, r2
 8002c4a:	461d      	mov	r5, r3
 8002c4c:	4606      	mov	r6, r0
 8002c4e:	b118      	cbz	r0, 8002c58 <_vfiprintf_r+0x18>
 8002c50:	6983      	ldr	r3, [r0, #24]
 8002c52:	b90b      	cbnz	r3, 8002c58 <_vfiprintf_r+0x18>
 8002c54:	f7ff fee8 	bl	8002a28 <__sinit>
 8002c58:	4b7c      	ldr	r3, [pc, #496]	; (8002e4c <_vfiprintf_r+0x20c>)
 8002c5a:	429c      	cmp	r4, r3
 8002c5c:	d158      	bne.n	8002d10 <_vfiprintf_r+0xd0>
 8002c5e:	6874      	ldr	r4, [r6, #4]
 8002c60:	89a3      	ldrh	r3, [r4, #12]
 8002c62:	0718      	lsls	r0, r3, #28
 8002c64:	d55e      	bpl.n	8002d24 <_vfiprintf_r+0xe4>
 8002c66:	6923      	ldr	r3, [r4, #16]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d05b      	beq.n	8002d24 <_vfiprintf_r+0xe4>
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	9309      	str	r3, [sp, #36]	; 0x24
 8002c70:	2320      	movs	r3, #32
 8002c72:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002c76:	2330      	movs	r3, #48	; 0x30
 8002c78:	f04f 0b01 	mov.w	fp, #1
 8002c7c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002c80:	9503      	str	r5, [sp, #12]
 8002c82:	46b8      	mov	r8, r7
 8002c84:	4645      	mov	r5, r8
 8002c86:	f815 3b01 	ldrb.w	r3, [r5], #1
 8002c8a:	b10b      	cbz	r3, 8002c90 <_vfiprintf_r+0x50>
 8002c8c:	2b25      	cmp	r3, #37	; 0x25
 8002c8e:	d154      	bne.n	8002d3a <_vfiprintf_r+0xfa>
 8002c90:	ebb8 0a07 	subs.w	sl, r8, r7
 8002c94:	d00b      	beq.n	8002cae <_vfiprintf_r+0x6e>
 8002c96:	4653      	mov	r3, sl
 8002c98:	463a      	mov	r2, r7
 8002c9a:	4621      	mov	r1, r4
 8002c9c:	4630      	mov	r0, r6
 8002c9e:	f7ff ffbc 	bl	8002c1a <__sfputs_r>
 8002ca2:	3001      	adds	r0, #1
 8002ca4:	f000 80c2 	beq.w	8002e2c <_vfiprintf_r+0x1ec>
 8002ca8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002caa:	4453      	add	r3, sl
 8002cac:	9309      	str	r3, [sp, #36]	; 0x24
 8002cae:	f898 3000 	ldrb.w	r3, [r8]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	f000 80ba 	beq.w	8002e2c <_vfiprintf_r+0x1ec>
 8002cb8:	2300      	movs	r3, #0
 8002cba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002cbe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002cc2:	9304      	str	r3, [sp, #16]
 8002cc4:	9307      	str	r3, [sp, #28]
 8002cc6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002cca:	931a      	str	r3, [sp, #104]	; 0x68
 8002ccc:	46a8      	mov	r8, r5
 8002cce:	2205      	movs	r2, #5
 8002cd0:	f818 1b01 	ldrb.w	r1, [r8], #1
 8002cd4:	485e      	ldr	r0, [pc, #376]	; (8002e50 <_vfiprintf_r+0x210>)
 8002cd6:	f000 fce3 	bl	80036a0 <memchr>
 8002cda:	9b04      	ldr	r3, [sp, #16]
 8002cdc:	bb78      	cbnz	r0, 8002d3e <_vfiprintf_r+0xfe>
 8002cde:	06d9      	lsls	r1, r3, #27
 8002ce0:	bf44      	itt	mi
 8002ce2:	2220      	movmi	r2, #32
 8002ce4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002ce8:	071a      	lsls	r2, r3, #28
 8002cea:	bf44      	itt	mi
 8002cec:	222b      	movmi	r2, #43	; 0x2b
 8002cee:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002cf2:	782a      	ldrb	r2, [r5, #0]
 8002cf4:	2a2a      	cmp	r2, #42	; 0x2a
 8002cf6:	d02a      	beq.n	8002d4e <_vfiprintf_r+0x10e>
 8002cf8:	46a8      	mov	r8, r5
 8002cfa:	2000      	movs	r0, #0
 8002cfc:	250a      	movs	r5, #10
 8002cfe:	9a07      	ldr	r2, [sp, #28]
 8002d00:	4641      	mov	r1, r8
 8002d02:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002d06:	3b30      	subs	r3, #48	; 0x30
 8002d08:	2b09      	cmp	r3, #9
 8002d0a:	d969      	bls.n	8002de0 <_vfiprintf_r+0x1a0>
 8002d0c:	b360      	cbz	r0, 8002d68 <_vfiprintf_r+0x128>
 8002d0e:	e024      	b.n	8002d5a <_vfiprintf_r+0x11a>
 8002d10:	4b50      	ldr	r3, [pc, #320]	; (8002e54 <_vfiprintf_r+0x214>)
 8002d12:	429c      	cmp	r4, r3
 8002d14:	d101      	bne.n	8002d1a <_vfiprintf_r+0xda>
 8002d16:	68b4      	ldr	r4, [r6, #8]
 8002d18:	e7a2      	b.n	8002c60 <_vfiprintf_r+0x20>
 8002d1a:	4b4f      	ldr	r3, [pc, #316]	; (8002e58 <_vfiprintf_r+0x218>)
 8002d1c:	429c      	cmp	r4, r3
 8002d1e:	bf08      	it	eq
 8002d20:	68f4      	ldreq	r4, [r6, #12]
 8002d22:	e79d      	b.n	8002c60 <_vfiprintf_r+0x20>
 8002d24:	4621      	mov	r1, r4
 8002d26:	4630      	mov	r0, r6
 8002d28:	f000 fb16 	bl	8003358 <__swsetup_r>
 8002d2c:	2800      	cmp	r0, #0
 8002d2e:	d09d      	beq.n	8002c6c <_vfiprintf_r+0x2c>
 8002d30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002d34:	b01d      	add	sp, #116	; 0x74
 8002d36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d3a:	46a8      	mov	r8, r5
 8002d3c:	e7a2      	b.n	8002c84 <_vfiprintf_r+0x44>
 8002d3e:	4a44      	ldr	r2, [pc, #272]	; (8002e50 <_vfiprintf_r+0x210>)
 8002d40:	4645      	mov	r5, r8
 8002d42:	1a80      	subs	r0, r0, r2
 8002d44:	fa0b f000 	lsl.w	r0, fp, r0
 8002d48:	4318      	orrs	r0, r3
 8002d4a:	9004      	str	r0, [sp, #16]
 8002d4c:	e7be      	b.n	8002ccc <_vfiprintf_r+0x8c>
 8002d4e:	9a03      	ldr	r2, [sp, #12]
 8002d50:	1d11      	adds	r1, r2, #4
 8002d52:	6812      	ldr	r2, [r2, #0]
 8002d54:	9103      	str	r1, [sp, #12]
 8002d56:	2a00      	cmp	r2, #0
 8002d58:	db01      	blt.n	8002d5e <_vfiprintf_r+0x11e>
 8002d5a:	9207      	str	r2, [sp, #28]
 8002d5c:	e004      	b.n	8002d68 <_vfiprintf_r+0x128>
 8002d5e:	4252      	negs	r2, r2
 8002d60:	f043 0302 	orr.w	r3, r3, #2
 8002d64:	9207      	str	r2, [sp, #28]
 8002d66:	9304      	str	r3, [sp, #16]
 8002d68:	f898 3000 	ldrb.w	r3, [r8]
 8002d6c:	2b2e      	cmp	r3, #46	; 0x2e
 8002d6e:	d10e      	bne.n	8002d8e <_vfiprintf_r+0x14e>
 8002d70:	f898 3001 	ldrb.w	r3, [r8, #1]
 8002d74:	2b2a      	cmp	r3, #42	; 0x2a
 8002d76:	d138      	bne.n	8002dea <_vfiprintf_r+0x1aa>
 8002d78:	9b03      	ldr	r3, [sp, #12]
 8002d7a:	f108 0802 	add.w	r8, r8, #2
 8002d7e:	1d1a      	adds	r2, r3, #4
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	9203      	str	r2, [sp, #12]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	bfb8      	it	lt
 8002d88:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8002d8c:	9305      	str	r3, [sp, #20]
 8002d8e:	4d33      	ldr	r5, [pc, #204]	; (8002e5c <_vfiprintf_r+0x21c>)
 8002d90:	2203      	movs	r2, #3
 8002d92:	f898 1000 	ldrb.w	r1, [r8]
 8002d96:	4628      	mov	r0, r5
 8002d98:	f000 fc82 	bl	80036a0 <memchr>
 8002d9c:	b140      	cbz	r0, 8002db0 <_vfiprintf_r+0x170>
 8002d9e:	2340      	movs	r3, #64	; 0x40
 8002da0:	1b40      	subs	r0, r0, r5
 8002da2:	fa03 f000 	lsl.w	r0, r3, r0
 8002da6:	9b04      	ldr	r3, [sp, #16]
 8002da8:	f108 0801 	add.w	r8, r8, #1
 8002dac:	4303      	orrs	r3, r0
 8002dae:	9304      	str	r3, [sp, #16]
 8002db0:	f898 1000 	ldrb.w	r1, [r8]
 8002db4:	2206      	movs	r2, #6
 8002db6:	482a      	ldr	r0, [pc, #168]	; (8002e60 <_vfiprintf_r+0x220>)
 8002db8:	f108 0701 	add.w	r7, r8, #1
 8002dbc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002dc0:	f000 fc6e 	bl	80036a0 <memchr>
 8002dc4:	2800      	cmp	r0, #0
 8002dc6:	d037      	beq.n	8002e38 <_vfiprintf_r+0x1f8>
 8002dc8:	4b26      	ldr	r3, [pc, #152]	; (8002e64 <_vfiprintf_r+0x224>)
 8002dca:	bb1b      	cbnz	r3, 8002e14 <_vfiprintf_r+0x1d4>
 8002dcc:	9b03      	ldr	r3, [sp, #12]
 8002dce:	3307      	adds	r3, #7
 8002dd0:	f023 0307 	bic.w	r3, r3, #7
 8002dd4:	3308      	adds	r3, #8
 8002dd6:	9303      	str	r3, [sp, #12]
 8002dd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002dda:	444b      	add	r3, r9
 8002ddc:	9309      	str	r3, [sp, #36]	; 0x24
 8002dde:	e750      	b.n	8002c82 <_vfiprintf_r+0x42>
 8002de0:	fb05 3202 	mla	r2, r5, r2, r3
 8002de4:	2001      	movs	r0, #1
 8002de6:	4688      	mov	r8, r1
 8002de8:	e78a      	b.n	8002d00 <_vfiprintf_r+0xc0>
 8002dea:	2300      	movs	r3, #0
 8002dec:	250a      	movs	r5, #10
 8002dee:	4619      	mov	r1, r3
 8002df0:	f108 0801 	add.w	r8, r8, #1
 8002df4:	9305      	str	r3, [sp, #20]
 8002df6:	4640      	mov	r0, r8
 8002df8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002dfc:	3a30      	subs	r2, #48	; 0x30
 8002dfe:	2a09      	cmp	r2, #9
 8002e00:	d903      	bls.n	8002e0a <_vfiprintf_r+0x1ca>
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d0c3      	beq.n	8002d8e <_vfiprintf_r+0x14e>
 8002e06:	9105      	str	r1, [sp, #20]
 8002e08:	e7c1      	b.n	8002d8e <_vfiprintf_r+0x14e>
 8002e0a:	fb05 2101 	mla	r1, r5, r1, r2
 8002e0e:	2301      	movs	r3, #1
 8002e10:	4680      	mov	r8, r0
 8002e12:	e7f0      	b.n	8002df6 <_vfiprintf_r+0x1b6>
 8002e14:	ab03      	add	r3, sp, #12
 8002e16:	9300      	str	r3, [sp, #0]
 8002e18:	4622      	mov	r2, r4
 8002e1a:	4b13      	ldr	r3, [pc, #76]	; (8002e68 <_vfiprintf_r+0x228>)
 8002e1c:	a904      	add	r1, sp, #16
 8002e1e:	4630      	mov	r0, r6
 8002e20:	f3af 8000 	nop.w
 8002e24:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8002e28:	4681      	mov	r9, r0
 8002e2a:	d1d5      	bne.n	8002dd8 <_vfiprintf_r+0x198>
 8002e2c:	89a3      	ldrh	r3, [r4, #12]
 8002e2e:	065b      	lsls	r3, r3, #25
 8002e30:	f53f af7e 	bmi.w	8002d30 <_vfiprintf_r+0xf0>
 8002e34:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002e36:	e77d      	b.n	8002d34 <_vfiprintf_r+0xf4>
 8002e38:	ab03      	add	r3, sp, #12
 8002e3a:	9300      	str	r3, [sp, #0]
 8002e3c:	4622      	mov	r2, r4
 8002e3e:	4b0a      	ldr	r3, [pc, #40]	; (8002e68 <_vfiprintf_r+0x228>)
 8002e40:	a904      	add	r1, sp, #16
 8002e42:	4630      	mov	r0, r6
 8002e44:	f000 f888 	bl	8002f58 <_printf_i>
 8002e48:	e7ec      	b.n	8002e24 <_vfiprintf_r+0x1e4>
 8002e4a:	bf00      	nop
 8002e4c:	08003830 	.word	0x08003830
 8002e50:	08003870 	.word	0x08003870
 8002e54:	08003850 	.word	0x08003850
 8002e58:	08003810 	.word	0x08003810
 8002e5c:	08003876 	.word	0x08003876
 8002e60:	0800387a 	.word	0x0800387a
 8002e64:	00000000 	.word	0x00000000
 8002e68:	08002c1b 	.word	0x08002c1b

08002e6c <_printf_common>:
 8002e6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e70:	4691      	mov	r9, r2
 8002e72:	461f      	mov	r7, r3
 8002e74:	688a      	ldr	r2, [r1, #8]
 8002e76:	690b      	ldr	r3, [r1, #16]
 8002e78:	4606      	mov	r6, r0
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	bfb8      	it	lt
 8002e7e:	4613      	movlt	r3, r2
 8002e80:	f8c9 3000 	str.w	r3, [r9]
 8002e84:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002e88:	460c      	mov	r4, r1
 8002e8a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002e8e:	b112      	cbz	r2, 8002e96 <_printf_common+0x2a>
 8002e90:	3301      	adds	r3, #1
 8002e92:	f8c9 3000 	str.w	r3, [r9]
 8002e96:	6823      	ldr	r3, [r4, #0]
 8002e98:	0699      	lsls	r1, r3, #26
 8002e9a:	bf42      	ittt	mi
 8002e9c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002ea0:	3302      	addmi	r3, #2
 8002ea2:	f8c9 3000 	strmi.w	r3, [r9]
 8002ea6:	6825      	ldr	r5, [r4, #0]
 8002ea8:	f015 0506 	ands.w	r5, r5, #6
 8002eac:	d107      	bne.n	8002ebe <_printf_common+0x52>
 8002eae:	f104 0a19 	add.w	sl, r4, #25
 8002eb2:	68e3      	ldr	r3, [r4, #12]
 8002eb4:	f8d9 2000 	ldr.w	r2, [r9]
 8002eb8:	1a9b      	subs	r3, r3, r2
 8002eba:	42ab      	cmp	r3, r5
 8002ebc:	dc29      	bgt.n	8002f12 <_printf_common+0xa6>
 8002ebe:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002ec2:	6822      	ldr	r2, [r4, #0]
 8002ec4:	3300      	adds	r3, #0
 8002ec6:	bf18      	it	ne
 8002ec8:	2301      	movne	r3, #1
 8002eca:	0692      	lsls	r2, r2, #26
 8002ecc:	d42e      	bmi.n	8002f2c <_printf_common+0xc0>
 8002ece:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002ed2:	4639      	mov	r1, r7
 8002ed4:	4630      	mov	r0, r6
 8002ed6:	47c0      	blx	r8
 8002ed8:	3001      	adds	r0, #1
 8002eda:	d021      	beq.n	8002f20 <_printf_common+0xb4>
 8002edc:	6823      	ldr	r3, [r4, #0]
 8002ede:	68e5      	ldr	r5, [r4, #12]
 8002ee0:	f003 0306 	and.w	r3, r3, #6
 8002ee4:	2b04      	cmp	r3, #4
 8002ee6:	bf18      	it	ne
 8002ee8:	2500      	movne	r5, #0
 8002eea:	f8d9 2000 	ldr.w	r2, [r9]
 8002eee:	f04f 0900 	mov.w	r9, #0
 8002ef2:	bf08      	it	eq
 8002ef4:	1aad      	subeq	r5, r5, r2
 8002ef6:	68a3      	ldr	r3, [r4, #8]
 8002ef8:	6922      	ldr	r2, [r4, #16]
 8002efa:	bf08      	it	eq
 8002efc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002f00:	4293      	cmp	r3, r2
 8002f02:	bfc4      	itt	gt
 8002f04:	1a9b      	subgt	r3, r3, r2
 8002f06:	18ed      	addgt	r5, r5, r3
 8002f08:	341a      	adds	r4, #26
 8002f0a:	454d      	cmp	r5, r9
 8002f0c:	d11a      	bne.n	8002f44 <_printf_common+0xd8>
 8002f0e:	2000      	movs	r0, #0
 8002f10:	e008      	b.n	8002f24 <_printf_common+0xb8>
 8002f12:	2301      	movs	r3, #1
 8002f14:	4652      	mov	r2, sl
 8002f16:	4639      	mov	r1, r7
 8002f18:	4630      	mov	r0, r6
 8002f1a:	47c0      	blx	r8
 8002f1c:	3001      	adds	r0, #1
 8002f1e:	d103      	bne.n	8002f28 <_printf_common+0xbc>
 8002f20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002f24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f28:	3501      	adds	r5, #1
 8002f2a:	e7c2      	b.n	8002eb2 <_printf_common+0x46>
 8002f2c:	2030      	movs	r0, #48	; 0x30
 8002f2e:	18e1      	adds	r1, r4, r3
 8002f30:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002f34:	1c5a      	adds	r2, r3, #1
 8002f36:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002f3a:	4422      	add	r2, r4
 8002f3c:	3302      	adds	r3, #2
 8002f3e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002f42:	e7c4      	b.n	8002ece <_printf_common+0x62>
 8002f44:	2301      	movs	r3, #1
 8002f46:	4622      	mov	r2, r4
 8002f48:	4639      	mov	r1, r7
 8002f4a:	4630      	mov	r0, r6
 8002f4c:	47c0      	blx	r8
 8002f4e:	3001      	adds	r0, #1
 8002f50:	d0e6      	beq.n	8002f20 <_printf_common+0xb4>
 8002f52:	f109 0901 	add.w	r9, r9, #1
 8002f56:	e7d8      	b.n	8002f0a <_printf_common+0x9e>

08002f58 <_printf_i>:
 8002f58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002f5c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8002f60:	460c      	mov	r4, r1
 8002f62:	7e09      	ldrb	r1, [r1, #24]
 8002f64:	b085      	sub	sp, #20
 8002f66:	296e      	cmp	r1, #110	; 0x6e
 8002f68:	4617      	mov	r7, r2
 8002f6a:	4606      	mov	r6, r0
 8002f6c:	4698      	mov	r8, r3
 8002f6e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002f70:	f000 80b3 	beq.w	80030da <_printf_i+0x182>
 8002f74:	d822      	bhi.n	8002fbc <_printf_i+0x64>
 8002f76:	2963      	cmp	r1, #99	; 0x63
 8002f78:	d036      	beq.n	8002fe8 <_printf_i+0x90>
 8002f7a:	d80a      	bhi.n	8002f92 <_printf_i+0x3a>
 8002f7c:	2900      	cmp	r1, #0
 8002f7e:	f000 80b9 	beq.w	80030f4 <_printf_i+0x19c>
 8002f82:	2958      	cmp	r1, #88	; 0x58
 8002f84:	f000 8083 	beq.w	800308e <_printf_i+0x136>
 8002f88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002f8c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8002f90:	e032      	b.n	8002ff8 <_printf_i+0xa0>
 8002f92:	2964      	cmp	r1, #100	; 0x64
 8002f94:	d001      	beq.n	8002f9a <_printf_i+0x42>
 8002f96:	2969      	cmp	r1, #105	; 0x69
 8002f98:	d1f6      	bne.n	8002f88 <_printf_i+0x30>
 8002f9a:	6820      	ldr	r0, [r4, #0]
 8002f9c:	6813      	ldr	r3, [r2, #0]
 8002f9e:	0605      	lsls	r5, r0, #24
 8002fa0:	f103 0104 	add.w	r1, r3, #4
 8002fa4:	d52a      	bpl.n	8002ffc <_printf_i+0xa4>
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	6011      	str	r1, [r2, #0]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	da03      	bge.n	8002fb6 <_printf_i+0x5e>
 8002fae:	222d      	movs	r2, #45	; 0x2d
 8002fb0:	425b      	negs	r3, r3
 8002fb2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002fb6:	486f      	ldr	r0, [pc, #444]	; (8003174 <_printf_i+0x21c>)
 8002fb8:	220a      	movs	r2, #10
 8002fba:	e039      	b.n	8003030 <_printf_i+0xd8>
 8002fbc:	2973      	cmp	r1, #115	; 0x73
 8002fbe:	f000 809d 	beq.w	80030fc <_printf_i+0x1a4>
 8002fc2:	d808      	bhi.n	8002fd6 <_printf_i+0x7e>
 8002fc4:	296f      	cmp	r1, #111	; 0x6f
 8002fc6:	d020      	beq.n	800300a <_printf_i+0xb2>
 8002fc8:	2970      	cmp	r1, #112	; 0x70
 8002fca:	d1dd      	bne.n	8002f88 <_printf_i+0x30>
 8002fcc:	6823      	ldr	r3, [r4, #0]
 8002fce:	f043 0320 	orr.w	r3, r3, #32
 8002fd2:	6023      	str	r3, [r4, #0]
 8002fd4:	e003      	b.n	8002fde <_printf_i+0x86>
 8002fd6:	2975      	cmp	r1, #117	; 0x75
 8002fd8:	d017      	beq.n	800300a <_printf_i+0xb2>
 8002fda:	2978      	cmp	r1, #120	; 0x78
 8002fdc:	d1d4      	bne.n	8002f88 <_printf_i+0x30>
 8002fde:	2378      	movs	r3, #120	; 0x78
 8002fe0:	4865      	ldr	r0, [pc, #404]	; (8003178 <_printf_i+0x220>)
 8002fe2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002fe6:	e055      	b.n	8003094 <_printf_i+0x13c>
 8002fe8:	6813      	ldr	r3, [r2, #0]
 8002fea:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002fee:	1d19      	adds	r1, r3, #4
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	6011      	str	r1, [r2, #0]
 8002ff4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e08c      	b.n	8003116 <_printf_i+0x1be>
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003002:	6011      	str	r1, [r2, #0]
 8003004:	bf18      	it	ne
 8003006:	b21b      	sxthne	r3, r3
 8003008:	e7cf      	b.n	8002faa <_printf_i+0x52>
 800300a:	6813      	ldr	r3, [r2, #0]
 800300c:	6825      	ldr	r5, [r4, #0]
 800300e:	1d18      	adds	r0, r3, #4
 8003010:	6010      	str	r0, [r2, #0]
 8003012:	0628      	lsls	r0, r5, #24
 8003014:	d501      	bpl.n	800301a <_printf_i+0xc2>
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	e002      	b.n	8003020 <_printf_i+0xc8>
 800301a:	0668      	lsls	r0, r5, #25
 800301c:	d5fb      	bpl.n	8003016 <_printf_i+0xbe>
 800301e:	881b      	ldrh	r3, [r3, #0]
 8003020:	296f      	cmp	r1, #111	; 0x6f
 8003022:	bf14      	ite	ne
 8003024:	220a      	movne	r2, #10
 8003026:	2208      	moveq	r2, #8
 8003028:	4852      	ldr	r0, [pc, #328]	; (8003174 <_printf_i+0x21c>)
 800302a:	2100      	movs	r1, #0
 800302c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003030:	6865      	ldr	r5, [r4, #4]
 8003032:	2d00      	cmp	r5, #0
 8003034:	60a5      	str	r5, [r4, #8]
 8003036:	f2c0 8095 	blt.w	8003164 <_printf_i+0x20c>
 800303a:	6821      	ldr	r1, [r4, #0]
 800303c:	f021 0104 	bic.w	r1, r1, #4
 8003040:	6021      	str	r1, [r4, #0]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d13d      	bne.n	80030c2 <_printf_i+0x16a>
 8003046:	2d00      	cmp	r5, #0
 8003048:	f040 808e 	bne.w	8003168 <_printf_i+0x210>
 800304c:	4665      	mov	r5, ip
 800304e:	2a08      	cmp	r2, #8
 8003050:	d10b      	bne.n	800306a <_printf_i+0x112>
 8003052:	6823      	ldr	r3, [r4, #0]
 8003054:	07db      	lsls	r3, r3, #31
 8003056:	d508      	bpl.n	800306a <_printf_i+0x112>
 8003058:	6923      	ldr	r3, [r4, #16]
 800305a:	6862      	ldr	r2, [r4, #4]
 800305c:	429a      	cmp	r2, r3
 800305e:	bfde      	ittt	le
 8003060:	2330      	movle	r3, #48	; 0x30
 8003062:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003066:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800306a:	ebac 0305 	sub.w	r3, ip, r5
 800306e:	6123      	str	r3, [r4, #16]
 8003070:	f8cd 8000 	str.w	r8, [sp]
 8003074:	463b      	mov	r3, r7
 8003076:	aa03      	add	r2, sp, #12
 8003078:	4621      	mov	r1, r4
 800307a:	4630      	mov	r0, r6
 800307c:	f7ff fef6 	bl	8002e6c <_printf_common>
 8003080:	3001      	adds	r0, #1
 8003082:	d14d      	bne.n	8003120 <_printf_i+0x1c8>
 8003084:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003088:	b005      	add	sp, #20
 800308a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800308e:	4839      	ldr	r0, [pc, #228]	; (8003174 <_printf_i+0x21c>)
 8003090:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003094:	6813      	ldr	r3, [r2, #0]
 8003096:	6821      	ldr	r1, [r4, #0]
 8003098:	1d1d      	adds	r5, r3, #4
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	6015      	str	r5, [r2, #0]
 800309e:	060a      	lsls	r2, r1, #24
 80030a0:	d50b      	bpl.n	80030ba <_printf_i+0x162>
 80030a2:	07ca      	lsls	r2, r1, #31
 80030a4:	bf44      	itt	mi
 80030a6:	f041 0120 	orrmi.w	r1, r1, #32
 80030aa:	6021      	strmi	r1, [r4, #0]
 80030ac:	b91b      	cbnz	r3, 80030b6 <_printf_i+0x15e>
 80030ae:	6822      	ldr	r2, [r4, #0]
 80030b0:	f022 0220 	bic.w	r2, r2, #32
 80030b4:	6022      	str	r2, [r4, #0]
 80030b6:	2210      	movs	r2, #16
 80030b8:	e7b7      	b.n	800302a <_printf_i+0xd2>
 80030ba:	064d      	lsls	r5, r1, #25
 80030bc:	bf48      	it	mi
 80030be:	b29b      	uxthmi	r3, r3
 80030c0:	e7ef      	b.n	80030a2 <_printf_i+0x14a>
 80030c2:	4665      	mov	r5, ip
 80030c4:	fbb3 f1f2 	udiv	r1, r3, r2
 80030c8:	fb02 3311 	mls	r3, r2, r1, r3
 80030cc:	5cc3      	ldrb	r3, [r0, r3]
 80030ce:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80030d2:	460b      	mov	r3, r1
 80030d4:	2900      	cmp	r1, #0
 80030d6:	d1f5      	bne.n	80030c4 <_printf_i+0x16c>
 80030d8:	e7b9      	b.n	800304e <_printf_i+0xf6>
 80030da:	6813      	ldr	r3, [r2, #0]
 80030dc:	6825      	ldr	r5, [r4, #0]
 80030de:	1d18      	adds	r0, r3, #4
 80030e0:	6961      	ldr	r1, [r4, #20]
 80030e2:	6010      	str	r0, [r2, #0]
 80030e4:	0628      	lsls	r0, r5, #24
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	d501      	bpl.n	80030ee <_printf_i+0x196>
 80030ea:	6019      	str	r1, [r3, #0]
 80030ec:	e002      	b.n	80030f4 <_printf_i+0x19c>
 80030ee:	066a      	lsls	r2, r5, #25
 80030f0:	d5fb      	bpl.n	80030ea <_printf_i+0x192>
 80030f2:	8019      	strh	r1, [r3, #0]
 80030f4:	2300      	movs	r3, #0
 80030f6:	4665      	mov	r5, ip
 80030f8:	6123      	str	r3, [r4, #16]
 80030fa:	e7b9      	b.n	8003070 <_printf_i+0x118>
 80030fc:	6813      	ldr	r3, [r2, #0]
 80030fe:	1d19      	adds	r1, r3, #4
 8003100:	6011      	str	r1, [r2, #0]
 8003102:	681d      	ldr	r5, [r3, #0]
 8003104:	6862      	ldr	r2, [r4, #4]
 8003106:	2100      	movs	r1, #0
 8003108:	4628      	mov	r0, r5
 800310a:	f000 fac9 	bl	80036a0 <memchr>
 800310e:	b108      	cbz	r0, 8003114 <_printf_i+0x1bc>
 8003110:	1b40      	subs	r0, r0, r5
 8003112:	6060      	str	r0, [r4, #4]
 8003114:	6863      	ldr	r3, [r4, #4]
 8003116:	6123      	str	r3, [r4, #16]
 8003118:	2300      	movs	r3, #0
 800311a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800311e:	e7a7      	b.n	8003070 <_printf_i+0x118>
 8003120:	6923      	ldr	r3, [r4, #16]
 8003122:	462a      	mov	r2, r5
 8003124:	4639      	mov	r1, r7
 8003126:	4630      	mov	r0, r6
 8003128:	47c0      	blx	r8
 800312a:	3001      	adds	r0, #1
 800312c:	d0aa      	beq.n	8003084 <_printf_i+0x12c>
 800312e:	6823      	ldr	r3, [r4, #0]
 8003130:	079b      	lsls	r3, r3, #30
 8003132:	d413      	bmi.n	800315c <_printf_i+0x204>
 8003134:	68e0      	ldr	r0, [r4, #12]
 8003136:	9b03      	ldr	r3, [sp, #12]
 8003138:	4298      	cmp	r0, r3
 800313a:	bfb8      	it	lt
 800313c:	4618      	movlt	r0, r3
 800313e:	e7a3      	b.n	8003088 <_printf_i+0x130>
 8003140:	2301      	movs	r3, #1
 8003142:	464a      	mov	r2, r9
 8003144:	4639      	mov	r1, r7
 8003146:	4630      	mov	r0, r6
 8003148:	47c0      	blx	r8
 800314a:	3001      	adds	r0, #1
 800314c:	d09a      	beq.n	8003084 <_printf_i+0x12c>
 800314e:	3501      	adds	r5, #1
 8003150:	68e3      	ldr	r3, [r4, #12]
 8003152:	9a03      	ldr	r2, [sp, #12]
 8003154:	1a9b      	subs	r3, r3, r2
 8003156:	42ab      	cmp	r3, r5
 8003158:	dcf2      	bgt.n	8003140 <_printf_i+0x1e8>
 800315a:	e7eb      	b.n	8003134 <_printf_i+0x1dc>
 800315c:	2500      	movs	r5, #0
 800315e:	f104 0919 	add.w	r9, r4, #25
 8003162:	e7f5      	b.n	8003150 <_printf_i+0x1f8>
 8003164:	2b00      	cmp	r3, #0
 8003166:	d1ac      	bne.n	80030c2 <_printf_i+0x16a>
 8003168:	7803      	ldrb	r3, [r0, #0]
 800316a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800316e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003172:	e76c      	b.n	800304e <_printf_i+0xf6>
 8003174:	08003881 	.word	0x08003881
 8003178:	08003892 	.word	0x08003892

0800317c <_putc_r>:
 800317c:	b570      	push	{r4, r5, r6, lr}
 800317e:	460d      	mov	r5, r1
 8003180:	4614      	mov	r4, r2
 8003182:	4606      	mov	r6, r0
 8003184:	b118      	cbz	r0, 800318e <_putc_r+0x12>
 8003186:	6983      	ldr	r3, [r0, #24]
 8003188:	b90b      	cbnz	r3, 800318e <_putc_r+0x12>
 800318a:	f7ff fc4d 	bl	8002a28 <__sinit>
 800318e:	4b13      	ldr	r3, [pc, #76]	; (80031dc <_putc_r+0x60>)
 8003190:	429c      	cmp	r4, r3
 8003192:	d112      	bne.n	80031ba <_putc_r+0x3e>
 8003194:	6874      	ldr	r4, [r6, #4]
 8003196:	68a3      	ldr	r3, [r4, #8]
 8003198:	3b01      	subs	r3, #1
 800319a:	2b00      	cmp	r3, #0
 800319c:	60a3      	str	r3, [r4, #8]
 800319e:	da16      	bge.n	80031ce <_putc_r+0x52>
 80031a0:	69a2      	ldr	r2, [r4, #24]
 80031a2:	4293      	cmp	r3, r2
 80031a4:	db02      	blt.n	80031ac <_putc_r+0x30>
 80031a6:	b2eb      	uxtb	r3, r5
 80031a8:	2b0a      	cmp	r3, #10
 80031aa:	d110      	bne.n	80031ce <_putc_r+0x52>
 80031ac:	4622      	mov	r2, r4
 80031ae:	4629      	mov	r1, r5
 80031b0:	4630      	mov	r0, r6
 80031b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80031b6:	f000 b86b 	b.w	8003290 <__swbuf_r>
 80031ba:	4b09      	ldr	r3, [pc, #36]	; (80031e0 <_putc_r+0x64>)
 80031bc:	429c      	cmp	r4, r3
 80031be:	d101      	bne.n	80031c4 <_putc_r+0x48>
 80031c0:	68b4      	ldr	r4, [r6, #8]
 80031c2:	e7e8      	b.n	8003196 <_putc_r+0x1a>
 80031c4:	4b07      	ldr	r3, [pc, #28]	; (80031e4 <_putc_r+0x68>)
 80031c6:	429c      	cmp	r4, r3
 80031c8:	bf08      	it	eq
 80031ca:	68f4      	ldreq	r4, [r6, #12]
 80031cc:	e7e3      	b.n	8003196 <_putc_r+0x1a>
 80031ce:	6823      	ldr	r3, [r4, #0]
 80031d0:	b2e8      	uxtb	r0, r5
 80031d2:	1c5a      	adds	r2, r3, #1
 80031d4:	6022      	str	r2, [r4, #0]
 80031d6:	701d      	strb	r5, [r3, #0]
 80031d8:	bd70      	pop	{r4, r5, r6, pc}
 80031da:	bf00      	nop
 80031dc:	08003830 	.word	0x08003830
 80031e0:	08003850 	.word	0x08003850
 80031e4:	08003810 	.word	0x08003810

080031e8 <_sbrk_r>:
 80031e8:	b538      	push	{r3, r4, r5, lr}
 80031ea:	2300      	movs	r3, #0
 80031ec:	4c05      	ldr	r4, [pc, #20]	; (8003204 <_sbrk_r+0x1c>)
 80031ee:	4605      	mov	r5, r0
 80031f0:	4608      	mov	r0, r1
 80031f2:	6023      	str	r3, [r4, #0]
 80031f4:	f7ff faf4 	bl	80027e0 <_sbrk>
 80031f8:	1c43      	adds	r3, r0, #1
 80031fa:	d102      	bne.n	8003202 <_sbrk_r+0x1a>
 80031fc:	6823      	ldr	r3, [r4, #0]
 80031fe:	b103      	cbz	r3, 8003202 <_sbrk_r+0x1a>
 8003200:	602b      	str	r3, [r5, #0]
 8003202:	bd38      	pop	{r3, r4, r5, pc}
 8003204:	20000134 	.word	0x20000134

08003208 <__sread>:
 8003208:	b510      	push	{r4, lr}
 800320a:	460c      	mov	r4, r1
 800320c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003210:	f000 faa2 	bl	8003758 <_read_r>
 8003214:	2800      	cmp	r0, #0
 8003216:	bfab      	itete	ge
 8003218:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800321a:	89a3      	ldrhlt	r3, [r4, #12]
 800321c:	181b      	addge	r3, r3, r0
 800321e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003222:	bfac      	ite	ge
 8003224:	6563      	strge	r3, [r4, #84]	; 0x54
 8003226:	81a3      	strhlt	r3, [r4, #12]
 8003228:	bd10      	pop	{r4, pc}

0800322a <__swrite>:
 800322a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800322e:	461f      	mov	r7, r3
 8003230:	898b      	ldrh	r3, [r1, #12]
 8003232:	4605      	mov	r5, r0
 8003234:	05db      	lsls	r3, r3, #23
 8003236:	460c      	mov	r4, r1
 8003238:	4616      	mov	r6, r2
 800323a:	d505      	bpl.n	8003248 <__swrite+0x1e>
 800323c:	2302      	movs	r3, #2
 800323e:	2200      	movs	r2, #0
 8003240:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003244:	f000 f9b6 	bl	80035b4 <_lseek_r>
 8003248:	89a3      	ldrh	r3, [r4, #12]
 800324a:	4632      	mov	r2, r6
 800324c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003250:	81a3      	strh	r3, [r4, #12]
 8003252:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003256:	463b      	mov	r3, r7
 8003258:	4628      	mov	r0, r5
 800325a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800325e:	f000 b869 	b.w	8003334 <_write_r>

08003262 <__sseek>:
 8003262:	b510      	push	{r4, lr}
 8003264:	460c      	mov	r4, r1
 8003266:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800326a:	f000 f9a3 	bl	80035b4 <_lseek_r>
 800326e:	1c43      	adds	r3, r0, #1
 8003270:	89a3      	ldrh	r3, [r4, #12]
 8003272:	bf15      	itete	ne
 8003274:	6560      	strne	r0, [r4, #84]	; 0x54
 8003276:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800327a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800327e:	81a3      	strheq	r3, [r4, #12]
 8003280:	bf18      	it	ne
 8003282:	81a3      	strhne	r3, [r4, #12]
 8003284:	bd10      	pop	{r4, pc}

08003286 <__sclose>:
 8003286:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800328a:	f000 b8d3 	b.w	8003434 <_close_r>
	...

08003290 <__swbuf_r>:
 8003290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003292:	460e      	mov	r6, r1
 8003294:	4614      	mov	r4, r2
 8003296:	4605      	mov	r5, r0
 8003298:	b118      	cbz	r0, 80032a2 <__swbuf_r+0x12>
 800329a:	6983      	ldr	r3, [r0, #24]
 800329c:	b90b      	cbnz	r3, 80032a2 <__swbuf_r+0x12>
 800329e:	f7ff fbc3 	bl	8002a28 <__sinit>
 80032a2:	4b21      	ldr	r3, [pc, #132]	; (8003328 <__swbuf_r+0x98>)
 80032a4:	429c      	cmp	r4, r3
 80032a6:	d12a      	bne.n	80032fe <__swbuf_r+0x6e>
 80032a8:	686c      	ldr	r4, [r5, #4]
 80032aa:	69a3      	ldr	r3, [r4, #24]
 80032ac:	60a3      	str	r3, [r4, #8]
 80032ae:	89a3      	ldrh	r3, [r4, #12]
 80032b0:	071a      	lsls	r2, r3, #28
 80032b2:	d52e      	bpl.n	8003312 <__swbuf_r+0x82>
 80032b4:	6923      	ldr	r3, [r4, #16]
 80032b6:	b363      	cbz	r3, 8003312 <__swbuf_r+0x82>
 80032b8:	6923      	ldr	r3, [r4, #16]
 80032ba:	6820      	ldr	r0, [r4, #0]
 80032bc:	b2f6      	uxtb	r6, r6
 80032be:	1ac0      	subs	r0, r0, r3
 80032c0:	6963      	ldr	r3, [r4, #20]
 80032c2:	4637      	mov	r7, r6
 80032c4:	4283      	cmp	r3, r0
 80032c6:	dc04      	bgt.n	80032d2 <__swbuf_r+0x42>
 80032c8:	4621      	mov	r1, r4
 80032ca:	4628      	mov	r0, r5
 80032cc:	f000 f948 	bl	8003560 <_fflush_r>
 80032d0:	bb28      	cbnz	r0, 800331e <__swbuf_r+0x8e>
 80032d2:	68a3      	ldr	r3, [r4, #8]
 80032d4:	3001      	adds	r0, #1
 80032d6:	3b01      	subs	r3, #1
 80032d8:	60a3      	str	r3, [r4, #8]
 80032da:	6823      	ldr	r3, [r4, #0]
 80032dc:	1c5a      	adds	r2, r3, #1
 80032de:	6022      	str	r2, [r4, #0]
 80032e0:	701e      	strb	r6, [r3, #0]
 80032e2:	6963      	ldr	r3, [r4, #20]
 80032e4:	4283      	cmp	r3, r0
 80032e6:	d004      	beq.n	80032f2 <__swbuf_r+0x62>
 80032e8:	89a3      	ldrh	r3, [r4, #12]
 80032ea:	07db      	lsls	r3, r3, #31
 80032ec:	d519      	bpl.n	8003322 <__swbuf_r+0x92>
 80032ee:	2e0a      	cmp	r6, #10
 80032f0:	d117      	bne.n	8003322 <__swbuf_r+0x92>
 80032f2:	4621      	mov	r1, r4
 80032f4:	4628      	mov	r0, r5
 80032f6:	f000 f933 	bl	8003560 <_fflush_r>
 80032fa:	b190      	cbz	r0, 8003322 <__swbuf_r+0x92>
 80032fc:	e00f      	b.n	800331e <__swbuf_r+0x8e>
 80032fe:	4b0b      	ldr	r3, [pc, #44]	; (800332c <__swbuf_r+0x9c>)
 8003300:	429c      	cmp	r4, r3
 8003302:	d101      	bne.n	8003308 <__swbuf_r+0x78>
 8003304:	68ac      	ldr	r4, [r5, #8]
 8003306:	e7d0      	b.n	80032aa <__swbuf_r+0x1a>
 8003308:	4b09      	ldr	r3, [pc, #36]	; (8003330 <__swbuf_r+0xa0>)
 800330a:	429c      	cmp	r4, r3
 800330c:	bf08      	it	eq
 800330e:	68ec      	ldreq	r4, [r5, #12]
 8003310:	e7cb      	b.n	80032aa <__swbuf_r+0x1a>
 8003312:	4621      	mov	r1, r4
 8003314:	4628      	mov	r0, r5
 8003316:	f000 f81f 	bl	8003358 <__swsetup_r>
 800331a:	2800      	cmp	r0, #0
 800331c:	d0cc      	beq.n	80032b8 <__swbuf_r+0x28>
 800331e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8003322:	4638      	mov	r0, r7
 8003324:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003326:	bf00      	nop
 8003328:	08003830 	.word	0x08003830
 800332c:	08003850 	.word	0x08003850
 8003330:	08003810 	.word	0x08003810

08003334 <_write_r>:
 8003334:	b538      	push	{r3, r4, r5, lr}
 8003336:	4605      	mov	r5, r0
 8003338:	4608      	mov	r0, r1
 800333a:	4611      	mov	r1, r2
 800333c:	2200      	movs	r2, #0
 800333e:	4c05      	ldr	r4, [pc, #20]	; (8003354 <_write_r+0x20>)
 8003340:	6022      	str	r2, [r4, #0]
 8003342:	461a      	mov	r2, r3
 8003344:	f7ff f9ff 	bl	8002746 <_write>
 8003348:	1c43      	adds	r3, r0, #1
 800334a:	d102      	bne.n	8003352 <_write_r+0x1e>
 800334c:	6823      	ldr	r3, [r4, #0]
 800334e:	b103      	cbz	r3, 8003352 <_write_r+0x1e>
 8003350:	602b      	str	r3, [r5, #0]
 8003352:	bd38      	pop	{r3, r4, r5, pc}
 8003354:	20000134 	.word	0x20000134

08003358 <__swsetup_r>:
 8003358:	4b32      	ldr	r3, [pc, #200]	; (8003424 <__swsetup_r+0xcc>)
 800335a:	b570      	push	{r4, r5, r6, lr}
 800335c:	681d      	ldr	r5, [r3, #0]
 800335e:	4606      	mov	r6, r0
 8003360:	460c      	mov	r4, r1
 8003362:	b125      	cbz	r5, 800336e <__swsetup_r+0x16>
 8003364:	69ab      	ldr	r3, [r5, #24]
 8003366:	b913      	cbnz	r3, 800336e <__swsetup_r+0x16>
 8003368:	4628      	mov	r0, r5
 800336a:	f7ff fb5d 	bl	8002a28 <__sinit>
 800336e:	4b2e      	ldr	r3, [pc, #184]	; (8003428 <__swsetup_r+0xd0>)
 8003370:	429c      	cmp	r4, r3
 8003372:	d10f      	bne.n	8003394 <__swsetup_r+0x3c>
 8003374:	686c      	ldr	r4, [r5, #4]
 8003376:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800337a:	b29a      	uxth	r2, r3
 800337c:	0715      	lsls	r5, r2, #28
 800337e:	d42c      	bmi.n	80033da <__swsetup_r+0x82>
 8003380:	06d0      	lsls	r0, r2, #27
 8003382:	d411      	bmi.n	80033a8 <__swsetup_r+0x50>
 8003384:	2209      	movs	r2, #9
 8003386:	6032      	str	r2, [r6, #0]
 8003388:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800338c:	81a3      	strh	r3, [r4, #12]
 800338e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003392:	e03e      	b.n	8003412 <__swsetup_r+0xba>
 8003394:	4b25      	ldr	r3, [pc, #148]	; (800342c <__swsetup_r+0xd4>)
 8003396:	429c      	cmp	r4, r3
 8003398:	d101      	bne.n	800339e <__swsetup_r+0x46>
 800339a:	68ac      	ldr	r4, [r5, #8]
 800339c:	e7eb      	b.n	8003376 <__swsetup_r+0x1e>
 800339e:	4b24      	ldr	r3, [pc, #144]	; (8003430 <__swsetup_r+0xd8>)
 80033a0:	429c      	cmp	r4, r3
 80033a2:	bf08      	it	eq
 80033a4:	68ec      	ldreq	r4, [r5, #12]
 80033a6:	e7e6      	b.n	8003376 <__swsetup_r+0x1e>
 80033a8:	0751      	lsls	r1, r2, #29
 80033aa:	d512      	bpl.n	80033d2 <__swsetup_r+0x7a>
 80033ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80033ae:	b141      	cbz	r1, 80033c2 <__swsetup_r+0x6a>
 80033b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80033b4:	4299      	cmp	r1, r3
 80033b6:	d002      	beq.n	80033be <__swsetup_r+0x66>
 80033b8:	4630      	mov	r0, r6
 80033ba:	f000 f981 	bl	80036c0 <_free_r>
 80033be:	2300      	movs	r3, #0
 80033c0:	6363      	str	r3, [r4, #52]	; 0x34
 80033c2:	89a3      	ldrh	r3, [r4, #12]
 80033c4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80033c8:	81a3      	strh	r3, [r4, #12]
 80033ca:	2300      	movs	r3, #0
 80033cc:	6063      	str	r3, [r4, #4]
 80033ce:	6923      	ldr	r3, [r4, #16]
 80033d0:	6023      	str	r3, [r4, #0]
 80033d2:	89a3      	ldrh	r3, [r4, #12]
 80033d4:	f043 0308 	orr.w	r3, r3, #8
 80033d8:	81a3      	strh	r3, [r4, #12]
 80033da:	6923      	ldr	r3, [r4, #16]
 80033dc:	b94b      	cbnz	r3, 80033f2 <__swsetup_r+0x9a>
 80033de:	89a3      	ldrh	r3, [r4, #12]
 80033e0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80033e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033e8:	d003      	beq.n	80033f2 <__swsetup_r+0x9a>
 80033ea:	4621      	mov	r1, r4
 80033ec:	4630      	mov	r0, r6
 80033ee:	f000 f917 	bl	8003620 <__smakebuf_r>
 80033f2:	89a2      	ldrh	r2, [r4, #12]
 80033f4:	f012 0301 	ands.w	r3, r2, #1
 80033f8:	d00c      	beq.n	8003414 <__swsetup_r+0xbc>
 80033fa:	2300      	movs	r3, #0
 80033fc:	60a3      	str	r3, [r4, #8]
 80033fe:	6963      	ldr	r3, [r4, #20]
 8003400:	425b      	negs	r3, r3
 8003402:	61a3      	str	r3, [r4, #24]
 8003404:	6923      	ldr	r3, [r4, #16]
 8003406:	b953      	cbnz	r3, 800341e <__swsetup_r+0xc6>
 8003408:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800340c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8003410:	d1ba      	bne.n	8003388 <__swsetup_r+0x30>
 8003412:	bd70      	pop	{r4, r5, r6, pc}
 8003414:	0792      	lsls	r2, r2, #30
 8003416:	bf58      	it	pl
 8003418:	6963      	ldrpl	r3, [r4, #20]
 800341a:	60a3      	str	r3, [r4, #8]
 800341c:	e7f2      	b.n	8003404 <__swsetup_r+0xac>
 800341e:	2000      	movs	r0, #0
 8003420:	e7f7      	b.n	8003412 <__swsetup_r+0xba>
 8003422:	bf00      	nop
 8003424:	2000000c 	.word	0x2000000c
 8003428:	08003830 	.word	0x08003830
 800342c:	08003850 	.word	0x08003850
 8003430:	08003810 	.word	0x08003810

08003434 <_close_r>:
 8003434:	b538      	push	{r3, r4, r5, lr}
 8003436:	2300      	movs	r3, #0
 8003438:	4c05      	ldr	r4, [pc, #20]	; (8003450 <_close_r+0x1c>)
 800343a:	4605      	mov	r5, r0
 800343c:	4608      	mov	r0, r1
 800343e:	6023      	str	r3, [r4, #0]
 8003440:	f7ff f99d 	bl	800277e <_close>
 8003444:	1c43      	adds	r3, r0, #1
 8003446:	d102      	bne.n	800344e <_close_r+0x1a>
 8003448:	6823      	ldr	r3, [r4, #0]
 800344a:	b103      	cbz	r3, 800344e <_close_r+0x1a>
 800344c:	602b      	str	r3, [r5, #0]
 800344e:	bd38      	pop	{r3, r4, r5, pc}
 8003450:	20000134 	.word	0x20000134

08003454 <__sflush_r>:
 8003454:	898a      	ldrh	r2, [r1, #12]
 8003456:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800345a:	4605      	mov	r5, r0
 800345c:	0710      	lsls	r0, r2, #28
 800345e:	460c      	mov	r4, r1
 8003460:	d458      	bmi.n	8003514 <__sflush_r+0xc0>
 8003462:	684b      	ldr	r3, [r1, #4]
 8003464:	2b00      	cmp	r3, #0
 8003466:	dc05      	bgt.n	8003474 <__sflush_r+0x20>
 8003468:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800346a:	2b00      	cmp	r3, #0
 800346c:	dc02      	bgt.n	8003474 <__sflush_r+0x20>
 800346e:	2000      	movs	r0, #0
 8003470:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003474:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003476:	2e00      	cmp	r6, #0
 8003478:	d0f9      	beq.n	800346e <__sflush_r+0x1a>
 800347a:	2300      	movs	r3, #0
 800347c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003480:	682f      	ldr	r7, [r5, #0]
 8003482:	6a21      	ldr	r1, [r4, #32]
 8003484:	602b      	str	r3, [r5, #0]
 8003486:	d032      	beq.n	80034ee <__sflush_r+0x9a>
 8003488:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800348a:	89a3      	ldrh	r3, [r4, #12]
 800348c:	075a      	lsls	r2, r3, #29
 800348e:	d505      	bpl.n	800349c <__sflush_r+0x48>
 8003490:	6863      	ldr	r3, [r4, #4]
 8003492:	1ac0      	subs	r0, r0, r3
 8003494:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003496:	b10b      	cbz	r3, 800349c <__sflush_r+0x48>
 8003498:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800349a:	1ac0      	subs	r0, r0, r3
 800349c:	2300      	movs	r3, #0
 800349e:	4602      	mov	r2, r0
 80034a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80034a2:	6a21      	ldr	r1, [r4, #32]
 80034a4:	4628      	mov	r0, r5
 80034a6:	47b0      	blx	r6
 80034a8:	1c43      	adds	r3, r0, #1
 80034aa:	89a3      	ldrh	r3, [r4, #12]
 80034ac:	d106      	bne.n	80034bc <__sflush_r+0x68>
 80034ae:	6829      	ldr	r1, [r5, #0]
 80034b0:	291d      	cmp	r1, #29
 80034b2:	d848      	bhi.n	8003546 <__sflush_r+0xf2>
 80034b4:	4a29      	ldr	r2, [pc, #164]	; (800355c <__sflush_r+0x108>)
 80034b6:	40ca      	lsrs	r2, r1
 80034b8:	07d6      	lsls	r6, r2, #31
 80034ba:	d544      	bpl.n	8003546 <__sflush_r+0xf2>
 80034bc:	2200      	movs	r2, #0
 80034be:	6062      	str	r2, [r4, #4]
 80034c0:	6922      	ldr	r2, [r4, #16]
 80034c2:	04d9      	lsls	r1, r3, #19
 80034c4:	6022      	str	r2, [r4, #0]
 80034c6:	d504      	bpl.n	80034d2 <__sflush_r+0x7e>
 80034c8:	1c42      	adds	r2, r0, #1
 80034ca:	d101      	bne.n	80034d0 <__sflush_r+0x7c>
 80034cc:	682b      	ldr	r3, [r5, #0]
 80034ce:	b903      	cbnz	r3, 80034d2 <__sflush_r+0x7e>
 80034d0:	6560      	str	r0, [r4, #84]	; 0x54
 80034d2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80034d4:	602f      	str	r7, [r5, #0]
 80034d6:	2900      	cmp	r1, #0
 80034d8:	d0c9      	beq.n	800346e <__sflush_r+0x1a>
 80034da:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80034de:	4299      	cmp	r1, r3
 80034e0:	d002      	beq.n	80034e8 <__sflush_r+0x94>
 80034e2:	4628      	mov	r0, r5
 80034e4:	f000 f8ec 	bl	80036c0 <_free_r>
 80034e8:	2000      	movs	r0, #0
 80034ea:	6360      	str	r0, [r4, #52]	; 0x34
 80034ec:	e7c0      	b.n	8003470 <__sflush_r+0x1c>
 80034ee:	2301      	movs	r3, #1
 80034f0:	4628      	mov	r0, r5
 80034f2:	47b0      	blx	r6
 80034f4:	1c41      	adds	r1, r0, #1
 80034f6:	d1c8      	bne.n	800348a <__sflush_r+0x36>
 80034f8:	682b      	ldr	r3, [r5, #0]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d0c5      	beq.n	800348a <__sflush_r+0x36>
 80034fe:	2b1d      	cmp	r3, #29
 8003500:	d001      	beq.n	8003506 <__sflush_r+0xb2>
 8003502:	2b16      	cmp	r3, #22
 8003504:	d101      	bne.n	800350a <__sflush_r+0xb6>
 8003506:	602f      	str	r7, [r5, #0]
 8003508:	e7b1      	b.n	800346e <__sflush_r+0x1a>
 800350a:	89a3      	ldrh	r3, [r4, #12]
 800350c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003510:	81a3      	strh	r3, [r4, #12]
 8003512:	e7ad      	b.n	8003470 <__sflush_r+0x1c>
 8003514:	690f      	ldr	r7, [r1, #16]
 8003516:	2f00      	cmp	r7, #0
 8003518:	d0a9      	beq.n	800346e <__sflush_r+0x1a>
 800351a:	0793      	lsls	r3, r2, #30
 800351c:	bf18      	it	ne
 800351e:	2300      	movne	r3, #0
 8003520:	680e      	ldr	r6, [r1, #0]
 8003522:	bf08      	it	eq
 8003524:	694b      	ldreq	r3, [r1, #20]
 8003526:	eba6 0807 	sub.w	r8, r6, r7
 800352a:	600f      	str	r7, [r1, #0]
 800352c:	608b      	str	r3, [r1, #8]
 800352e:	f1b8 0f00 	cmp.w	r8, #0
 8003532:	dd9c      	ble.n	800346e <__sflush_r+0x1a>
 8003534:	4643      	mov	r3, r8
 8003536:	463a      	mov	r2, r7
 8003538:	6a21      	ldr	r1, [r4, #32]
 800353a:	4628      	mov	r0, r5
 800353c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800353e:	47b0      	blx	r6
 8003540:	2800      	cmp	r0, #0
 8003542:	dc06      	bgt.n	8003552 <__sflush_r+0xfe>
 8003544:	89a3      	ldrh	r3, [r4, #12]
 8003546:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800354a:	81a3      	strh	r3, [r4, #12]
 800354c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003550:	e78e      	b.n	8003470 <__sflush_r+0x1c>
 8003552:	4407      	add	r7, r0
 8003554:	eba8 0800 	sub.w	r8, r8, r0
 8003558:	e7e9      	b.n	800352e <__sflush_r+0xda>
 800355a:	bf00      	nop
 800355c:	20400001 	.word	0x20400001

08003560 <_fflush_r>:
 8003560:	b538      	push	{r3, r4, r5, lr}
 8003562:	690b      	ldr	r3, [r1, #16]
 8003564:	4605      	mov	r5, r0
 8003566:	460c      	mov	r4, r1
 8003568:	b1db      	cbz	r3, 80035a2 <_fflush_r+0x42>
 800356a:	b118      	cbz	r0, 8003574 <_fflush_r+0x14>
 800356c:	6983      	ldr	r3, [r0, #24]
 800356e:	b90b      	cbnz	r3, 8003574 <_fflush_r+0x14>
 8003570:	f7ff fa5a 	bl	8002a28 <__sinit>
 8003574:	4b0c      	ldr	r3, [pc, #48]	; (80035a8 <_fflush_r+0x48>)
 8003576:	429c      	cmp	r4, r3
 8003578:	d109      	bne.n	800358e <_fflush_r+0x2e>
 800357a:	686c      	ldr	r4, [r5, #4]
 800357c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003580:	b17b      	cbz	r3, 80035a2 <_fflush_r+0x42>
 8003582:	4621      	mov	r1, r4
 8003584:	4628      	mov	r0, r5
 8003586:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800358a:	f7ff bf63 	b.w	8003454 <__sflush_r>
 800358e:	4b07      	ldr	r3, [pc, #28]	; (80035ac <_fflush_r+0x4c>)
 8003590:	429c      	cmp	r4, r3
 8003592:	d101      	bne.n	8003598 <_fflush_r+0x38>
 8003594:	68ac      	ldr	r4, [r5, #8]
 8003596:	e7f1      	b.n	800357c <_fflush_r+0x1c>
 8003598:	4b05      	ldr	r3, [pc, #20]	; (80035b0 <_fflush_r+0x50>)
 800359a:	429c      	cmp	r4, r3
 800359c:	bf08      	it	eq
 800359e:	68ec      	ldreq	r4, [r5, #12]
 80035a0:	e7ec      	b.n	800357c <_fflush_r+0x1c>
 80035a2:	2000      	movs	r0, #0
 80035a4:	bd38      	pop	{r3, r4, r5, pc}
 80035a6:	bf00      	nop
 80035a8:	08003830 	.word	0x08003830
 80035ac:	08003850 	.word	0x08003850
 80035b0:	08003810 	.word	0x08003810

080035b4 <_lseek_r>:
 80035b4:	b538      	push	{r3, r4, r5, lr}
 80035b6:	4605      	mov	r5, r0
 80035b8:	4608      	mov	r0, r1
 80035ba:	4611      	mov	r1, r2
 80035bc:	2200      	movs	r2, #0
 80035be:	4c05      	ldr	r4, [pc, #20]	; (80035d4 <_lseek_r+0x20>)
 80035c0:	6022      	str	r2, [r4, #0]
 80035c2:	461a      	mov	r2, r3
 80035c4:	f7ff f8ff 	bl	80027c6 <_lseek>
 80035c8:	1c43      	adds	r3, r0, #1
 80035ca:	d102      	bne.n	80035d2 <_lseek_r+0x1e>
 80035cc:	6823      	ldr	r3, [r4, #0]
 80035ce:	b103      	cbz	r3, 80035d2 <_lseek_r+0x1e>
 80035d0:	602b      	str	r3, [r5, #0]
 80035d2:	bd38      	pop	{r3, r4, r5, pc}
 80035d4:	20000134 	.word	0x20000134

080035d8 <__swhatbuf_r>:
 80035d8:	b570      	push	{r4, r5, r6, lr}
 80035da:	460e      	mov	r6, r1
 80035dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80035e0:	b096      	sub	sp, #88	; 0x58
 80035e2:	2900      	cmp	r1, #0
 80035e4:	4614      	mov	r4, r2
 80035e6:	461d      	mov	r5, r3
 80035e8:	da07      	bge.n	80035fa <__swhatbuf_r+0x22>
 80035ea:	2300      	movs	r3, #0
 80035ec:	602b      	str	r3, [r5, #0]
 80035ee:	89b3      	ldrh	r3, [r6, #12]
 80035f0:	061a      	lsls	r2, r3, #24
 80035f2:	d410      	bmi.n	8003616 <__swhatbuf_r+0x3e>
 80035f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80035f8:	e00e      	b.n	8003618 <__swhatbuf_r+0x40>
 80035fa:	466a      	mov	r2, sp
 80035fc:	f000 f8be 	bl	800377c <_fstat_r>
 8003600:	2800      	cmp	r0, #0
 8003602:	dbf2      	blt.n	80035ea <__swhatbuf_r+0x12>
 8003604:	9a01      	ldr	r2, [sp, #4]
 8003606:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800360a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800360e:	425a      	negs	r2, r3
 8003610:	415a      	adcs	r2, r3
 8003612:	602a      	str	r2, [r5, #0]
 8003614:	e7ee      	b.n	80035f4 <__swhatbuf_r+0x1c>
 8003616:	2340      	movs	r3, #64	; 0x40
 8003618:	2000      	movs	r0, #0
 800361a:	6023      	str	r3, [r4, #0]
 800361c:	b016      	add	sp, #88	; 0x58
 800361e:	bd70      	pop	{r4, r5, r6, pc}

08003620 <__smakebuf_r>:
 8003620:	898b      	ldrh	r3, [r1, #12]
 8003622:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003624:	079d      	lsls	r5, r3, #30
 8003626:	4606      	mov	r6, r0
 8003628:	460c      	mov	r4, r1
 800362a:	d507      	bpl.n	800363c <__smakebuf_r+0x1c>
 800362c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003630:	6023      	str	r3, [r4, #0]
 8003632:	6123      	str	r3, [r4, #16]
 8003634:	2301      	movs	r3, #1
 8003636:	6163      	str	r3, [r4, #20]
 8003638:	b002      	add	sp, #8
 800363a:	bd70      	pop	{r4, r5, r6, pc}
 800363c:	ab01      	add	r3, sp, #4
 800363e:	466a      	mov	r2, sp
 8003640:	f7ff ffca 	bl	80035d8 <__swhatbuf_r>
 8003644:	9900      	ldr	r1, [sp, #0]
 8003646:	4605      	mov	r5, r0
 8003648:	4630      	mov	r0, r6
 800364a:	f7ff fa77 	bl	8002b3c <_malloc_r>
 800364e:	b948      	cbnz	r0, 8003664 <__smakebuf_r+0x44>
 8003650:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003654:	059a      	lsls	r2, r3, #22
 8003656:	d4ef      	bmi.n	8003638 <__smakebuf_r+0x18>
 8003658:	f023 0303 	bic.w	r3, r3, #3
 800365c:	f043 0302 	orr.w	r3, r3, #2
 8003660:	81a3      	strh	r3, [r4, #12]
 8003662:	e7e3      	b.n	800362c <__smakebuf_r+0xc>
 8003664:	4b0d      	ldr	r3, [pc, #52]	; (800369c <__smakebuf_r+0x7c>)
 8003666:	62b3      	str	r3, [r6, #40]	; 0x28
 8003668:	89a3      	ldrh	r3, [r4, #12]
 800366a:	6020      	str	r0, [r4, #0]
 800366c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003670:	81a3      	strh	r3, [r4, #12]
 8003672:	9b00      	ldr	r3, [sp, #0]
 8003674:	6120      	str	r0, [r4, #16]
 8003676:	6163      	str	r3, [r4, #20]
 8003678:	9b01      	ldr	r3, [sp, #4]
 800367a:	b15b      	cbz	r3, 8003694 <__smakebuf_r+0x74>
 800367c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003680:	4630      	mov	r0, r6
 8003682:	f000 f88d 	bl	80037a0 <_isatty_r>
 8003686:	b128      	cbz	r0, 8003694 <__smakebuf_r+0x74>
 8003688:	89a3      	ldrh	r3, [r4, #12]
 800368a:	f023 0303 	bic.w	r3, r3, #3
 800368e:	f043 0301 	orr.w	r3, r3, #1
 8003692:	81a3      	strh	r3, [r4, #12]
 8003694:	89a3      	ldrh	r3, [r4, #12]
 8003696:	431d      	orrs	r5, r3
 8003698:	81a5      	strh	r5, [r4, #12]
 800369a:	e7cd      	b.n	8003638 <__smakebuf_r+0x18>
 800369c:	080029f1 	.word	0x080029f1

080036a0 <memchr>:
 80036a0:	b510      	push	{r4, lr}
 80036a2:	b2c9      	uxtb	r1, r1
 80036a4:	4402      	add	r2, r0
 80036a6:	4290      	cmp	r0, r2
 80036a8:	4603      	mov	r3, r0
 80036aa:	d101      	bne.n	80036b0 <memchr+0x10>
 80036ac:	2300      	movs	r3, #0
 80036ae:	e003      	b.n	80036b8 <memchr+0x18>
 80036b0:	781c      	ldrb	r4, [r3, #0]
 80036b2:	3001      	adds	r0, #1
 80036b4:	428c      	cmp	r4, r1
 80036b6:	d1f6      	bne.n	80036a6 <memchr+0x6>
 80036b8:	4618      	mov	r0, r3
 80036ba:	bd10      	pop	{r4, pc}

080036bc <__malloc_lock>:
 80036bc:	4770      	bx	lr

080036be <__malloc_unlock>:
 80036be:	4770      	bx	lr

080036c0 <_free_r>:
 80036c0:	b538      	push	{r3, r4, r5, lr}
 80036c2:	4605      	mov	r5, r0
 80036c4:	2900      	cmp	r1, #0
 80036c6:	d043      	beq.n	8003750 <_free_r+0x90>
 80036c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80036cc:	1f0c      	subs	r4, r1, #4
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	bfb8      	it	lt
 80036d2:	18e4      	addlt	r4, r4, r3
 80036d4:	f7ff fff2 	bl	80036bc <__malloc_lock>
 80036d8:	4a1e      	ldr	r2, [pc, #120]	; (8003754 <_free_r+0x94>)
 80036da:	6813      	ldr	r3, [r2, #0]
 80036dc:	4610      	mov	r0, r2
 80036de:	b933      	cbnz	r3, 80036ee <_free_r+0x2e>
 80036e0:	6063      	str	r3, [r4, #4]
 80036e2:	6014      	str	r4, [r2, #0]
 80036e4:	4628      	mov	r0, r5
 80036e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80036ea:	f7ff bfe8 	b.w	80036be <__malloc_unlock>
 80036ee:	42a3      	cmp	r3, r4
 80036f0:	d90b      	bls.n	800370a <_free_r+0x4a>
 80036f2:	6821      	ldr	r1, [r4, #0]
 80036f4:	1862      	adds	r2, r4, r1
 80036f6:	4293      	cmp	r3, r2
 80036f8:	bf01      	itttt	eq
 80036fa:	681a      	ldreq	r2, [r3, #0]
 80036fc:	685b      	ldreq	r3, [r3, #4]
 80036fe:	1852      	addeq	r2, r2, r1
 8003700:	6022      	streq	r2, [r4, #0]
 8003702:	6063      	str	r3, [r4, #4]
 8003704:	6004      	str	r4, [r0, #0]
 8003706:	e7ed      	b.n	80036e4 <_free_r+0x24>
 8003708:	4613      	mov	r3, r2
 800370a:	685a      	ldr	r2, [r3, #4]
 800370c:	b10a      	cbz	r2, 8003712 <_free_r+0x52>
 800370e:	42a2      	cmp	r2, r4
 8003710:	d9fa      	bls.n	8003708 <_free_r+0x48>
 8003712:	6819      	ldr	r1, [r3, #0]
 8003714:	1858      	adds	r0, r3, r1
 8003716:	42a0      	cmp	r0, r4
 8003718:	d10b      	bne.n	8003732 <_free_r+0x72>
 800371a:	6820      	ldr	r0, [r4, #0]
 800371c:	4401      	add	r1, r0
 800371e:	1858      	adds	r0, r3, r1
 8003720:	4282      	cmp	r2, r0
 8003722:	6019      	str	r1, [r3, #0]
 8003724:	d1de      	bne.n	80036e4 <_free_r+0x24>
 8003726:	6810      	ldr	r0, [r2, #0]
 8003728:	6852      	ldr	r2, [r2, #4]
 800372a:	4401      	add	r1, r0
 800372c:	6019      	str	r1, [r3, #0]
 800372e:	605a      	str	r2, [r3, #4]
 8003730:	e7d8      	b.n	80036e4 <_free_r+0x24>
 8003732:	d902      	bls.n	800373a <_free_r+0x7a>
 8003734:	230c      	movs	r3, #12
 8003736:	602b      	str	r3, [r5, #0]
 8003738:	e7d4      	b.n	80036e4 <_free_r+0x24>
 800373a:	6820      	ldr	r0, [r4, #0]
 800373c:	1821      	adds	r1, r4, r0
 800373e:	428a      	cmp	r2, r1
 8003740:	bf01      	itttt	eq
 8003742:	6811      	ldreq	r1, [r2, #0]
 8003744:	6852      	ldreq	r2, [r2, #4]
 8003746:	1809      	addeq	r1, r1, r0
 8003748:	6021      	streq	r1, [r4, #0]
 800374a:	6062      	str	r2, [r4, #4]
 800374c:	605c      	str	r4, [r3, #4]
 800374e:	e7c9      	b.n	80036e4 <_free_r+0x24>
 8003750:	bd38      	pop	{r3, r4, r5, pc}
 8003752:	bf00      	nop
 8003754:	20000094 	.word	0x20000094

08003758 <_read_r>:
 8003758:	b538      	push	{r3, r4, r5, lr}
 800375a:	4605      	mov	r5, r0
 800375c:	4608      	mov	r0, r1
 800375e:	4611      	mov	r1, r2
 8003760:	2200      	movs	r2, #0
 8003762:	4c05      	ldr	r4, [pc, #20]	; (8003778 <_read_r+0x20>)
 8003764:	6022      	str	r2, [r4, #0]
 8003766:	461a      	mov	r2, r3
 8003768:	f7fe ffd0 	bl	800270c <_read>
 800376c:	1c43      	adds	r3, r0, #1
 800376e:	d102      	bne.n	8003776 <_read_r+0x1e>
 8003770:	6823      	ldr	r3, [r4, #0]
 8003772:	b103      	cbz	r3, 8003776 <_read_r+0x1e>
 8003774:	602b      	str	r3, [r5, #0]
 8003776:	bd38      	pop	{r3, r4, r5, pc}
 8003778:	20000134 	.word	0x20000134

0800377c <_fstat_r>:
 800377c:	b538      	push	{r3, r4, r5, lr}
 800377e:	2300      	movs	r3, #0
 8003780:	4c06      	ldr	r4, [pc, #24]	; (800379c <_fstat_r+0x20>)
 8003782:	4605      	mov	r5, r0
 8003784:	4608      	mov	r0, r1
 8003786:	4611      	mov	r1, r2
 8003788:	6023      	str	r3, [r4, #0]
 800378a:	f7ff f803 	bl	8002794 <_fstat>
 800378e:	1c43      	adds	r3, r0, #1
 8003790:	d102      	bne.n	8003798 <_fstat_r+0x1c>
 8003792:	6823      	ldr	r3, [r4, #0]
 8003794:	b103      	cbz	r3, 8003798 <_fstat_r+0x1c>
 8003796:	602b      	str	r3, [r5, #0]
 8003798:	bd38      	pop	{r3, r4, r5, pc}
 800379a:	bf00      	nop
 800379c:	20000134 	.word	0x20000134

080037a0 <_isatty_r>:
 80037a0:	b538      	push	{r3, r4, r5, lr}
 80037a2:	2300      	movs	r3, #0
 80037a4:	4c05      	ldr	r4, [pc, #20]	; (80037bc <_isatty_r+0x1c>)
 80037a6:	4605      	mov	r5, r0
 80037a8:	4608      	mov	r0, r1
 80037aa:	6023      	str	r3, [r4, #0]
 80037ac:	f7ff f801 	bl	80027b2 <_isatty>
 80037b0:	1c43      	adds	r3, r0, #1
 80037b2:	d102      	bne.n	80037ba <_isatty_r+0x1a>
 80037b4:	6823      	ldr	r3, [r4, #0]
 80037b6:	b103      	cbz	r3, 80037ba <_isatty_r+0x1a>
 80037b8:	602b      	str	r3, [r5, #0]
 80037ba:	bd38      	pop	{r3, r4, r5, pc}
 80037bc:	20000134 	.word	0x20000134

080037c0 <_init>:
 80037c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037c2:	bf00      	nop
 80037c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037c6:	bc08      	pop	{r3}
 80037c8:	469e      	mov	lr, r3
 80037ca:	4770      	bx	lr

080037cc <_fini>:
 80037cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037ce:	bf00      	nop
 80037d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037d2:	bc08      	pop	{r3}
 80037d4:	469e      	mov	lr, r3
 80037d6:	4770      	bx	lr
